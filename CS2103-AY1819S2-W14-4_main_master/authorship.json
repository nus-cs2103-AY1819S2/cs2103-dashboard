[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d GradTrak"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "https://travis-ci.org/cs2103-ay1819s2-w14-4/main[image:https://travis-ci.org/cs2103-ay1819s2-w14-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "https://ci.appveyor.com/project/crumpledpaper/main[image:https://ci.appveyor.com/api/projects/status/5gj2bbi8m22402im?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "https://coveralls.io/github/cs2103-ay1819s2-w14-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/cs2103-ay1819s2-w14-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "https://www.codacy.com/app/crumpledpaper/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dcs2103-ay1819s2-w14-4/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/8252478d5ba54270b64ad69074a826b8[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "NUS graduation tracker is an application to aid School of Computing students to track their graduation progress. GradTrak is implemented to aid students in alleviating the hardships of module planning to tracking C.A.P scores so that students can focus on “student-ing”. Not to mention with the tremendous amount of uncollated information required to keep track of the graduation requirements, GradTrak is the one stop solution to solve all of these problems."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d Requirements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* GradTrak is written in *_java_* and uses *_JDK 9_* library."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d Plan Modules"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* Plan when to take modules throughout your undergraduate studies"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* Recommends which modules to read based on module prerequisites and specialization"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* Able to account for Exchange Programmes, NUS Overseas College \u0026 Gap Year etc."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d Managing C.A.P"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Track Number of S/U credits left and recommends when to use them"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Provides minimum grades required for current and future semesters to hit your desired C.A.P"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* Even predict your potential C.A.P"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d Specializations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Ability to choose your specialization and GradTrak will aid to reach your goal based on the specialization requirements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* Recommend potential FYP projects based on selected specialization and modules read"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* This project is based-off  AddressBook 4 by:  https://github.com/se-edu/[SE-EDU]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Anand270294": 21,
      "crumpledpaper": 4,
      "-": 29
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "    archiveName \u003d \u0027gradtrak.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \u0027site-name\u0027: \u0027GradTrak\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-w14-4/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "crumpledpaper": 1,
      "-": 233,
      "monikernemo": 2
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in type name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 417,
      "monikernemo": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "GradTrak is a module tracker that is able to track the academic progress of students to help them plan for modules for graduation. It is developed by the https://github.com/orgs/cs2103-ay1819s2-w14-4/teams/developers[W14-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d T Anandakkoomar"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::anand270294.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "{empty}[http://github.com/Anand270294[github]] [\u003c\u003cAnand270294#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Responsibilities: User interface"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Chong Hong Yun"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::alexchong711.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "{empty} [https://github.com/alexchong711[github]] [\u003c\u003calexchong711#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Responsibilities: Display user information"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Lee Yi Quan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::monikernemo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "{empty}[https://github.com/monikernemo[github]] [\u003c\u003cmonikernemo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Responsibilities: Course, Course Requirement of GradTrak"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Lim Shao Hong"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::lshwayne96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "{empty}[http://github.com/lshwayne96[github]] [\u003c\u003clshwayne96#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Responsibilities: Display module information"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Ong Jun Hao Bryan"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::crumpledpaper.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "{empty}[http://github.com/crumpledpaper[github]] [\u003c\u003ccrumpledpaper#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Responsibilities: Additional commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "monikernemo": 1,
      "alexchong711": 1,
      "lshwayne96": 21
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w14-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* *Email us* : You can also reach us at `e0176751 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "crumpledpaper": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d GradTrak - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w14-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "By: `Team W14-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Go through the following sections to set up GradTrak."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Checking prerequisites"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Ensure that each of the following software has been installed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Setting up the project"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Follow the instructions below to set up the project on your computer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Follow the instructions below to verify that the setup is successful."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Run `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure all of them pass."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Configurating the project"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Go through the following sections to configure the project."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Follow the instructions below to rectify this issue."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Click on the `Imports` tab to set the order."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Follow the instructions below when you are ready to start coding."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The following sections explain the design of GradTrak."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* At app launch: Initializing the components in the correct sequence and connecting them with one another."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* At shut down: Shutting down the components and invoking cleanup methods where necessary."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The user interface (UI) of the App."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: The model holding the data of the App in-memory."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: The storage which reads data from and writes data to the hard disk."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Each of the four components above:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* Defines its Application Programming Interface (API) in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "For example, the `Logic` component (see class diagram in Section 2.3) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::SDforDeleteModuleTaken.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  `Logic` uses the `GradTrakParser` class to parse the user command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a module)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The `Model`:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* stores the GradTrak data."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cModuleTaken\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `GradTrak`, which `ModuleTaken` can reference. This would allow `GradTrak` to only require one `Tag` object per unique `Tag`, instead of each `ModuleTaken` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "Within the `Storage` component there are *2* types of storage classes: +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "1. read and write storage +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "2. read only storage"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d\u003d Read and write storage"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* can save the GradTrak data in json format and read it back."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d\u003d Read only storage"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Structure of read only storage component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::moduleinfostorage.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage/ModuleInfoStorage.java[`ModuleInfoStorage.java`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The ModuleInfoStorage is a read-only form of storage as it is only reads the list of module information saved in a JSON"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "file and coverts them into `ModuleInfo` and the stores all the `ModuleInfo` into list called `ModuleInfoList`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* can only read `ModuleInfo` objects in json format."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "//tag::displaymod[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d Displaymod feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The `displaymod` is a search function that displays all available information with regards to the module codes the user types"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "into the command box."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "When the application is launched, a JSON file containing all of NUS module information is then converted"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "into an Object Class called ModuleInfo individually and stored into an ObservableList\u003cModuleInfo\u003e called ModuleInfoList."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::ConversionModuleInfo.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The usage of ModuleInfoList is only temporary as it is passed into `ModelManager` and then converted into an ObservableList\u003c\u003e."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The purpose of having ModuleInfoList is not only for temporary use; it also serves as form of Error handling if the application"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "is unable to find the location of the JSON file containing all of the module information, a blank ModuleInfoList is handed to the"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "ModelManager."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "image::Observable.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "This is done as `ObservableList\u003c\u003e` comes with a `FilteredList\u003c\u003e` feature: which wraps an ObservableList and filters the contents"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "based on `predicates`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* `Predicates` -- All search keywords i.e *Module Code* is saved as a list of `predicates`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "This allows for easier search throughout the list of all Module Information, as the User can search for multiple modules in"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "a single search."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The FilteredList is then collected and the ModuleInfo Objects will be formatted into Strings so that the information required"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "is displayed by the UI."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Displaymod executes"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* **Current Implementation :** Searches based on Module Codes Only"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Pros: Searches is slightly faster since its only based on Module Codes"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Cons: Limited search since it requires User to know Module Codes beforehand."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* **Future Implementation :** Search based on keywords"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Pros: User can search for Modules based on keywords thus require no prior knowledge on a particular module code"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Cons: Have to combine all module information into a single String and search for keywords; slower searches."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Data Structure Used"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* **Current Implementation :** `ObservableList\u003c\u003e` is used"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Pros: Allows for `FilteredList\u003c\u003e` to be used based on predicates; easy implementation."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Cons: Requires additional classes to be implemented to handle the use of `Predicates`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* **Alternative :** Sticking to the `ArrayList\u003c\u003e`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Pros: Easy to handle as it is a simple data structure."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "** Cons: Harder to search for specific Keywords(future implementation)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedGradTrak`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "It extends `GradTrak` with an undo/redo history, stored internally as an `gradTrakStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `VersionedGradTrak#commit()` -- Saves the current GradTrak state in its history."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `VersionedGradTrak#undo()` -- Restores the previous GradTrak state from its history."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `VersionedGradTrak#redo()` -- Restores a previously undone GradTrak state from its history."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitGradTrak()`, `Model#undoGradTrak()` and `Model#redoGradTrak()` respectively."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedGradTrak` will be initialized with the initial GradTrak state, and the `currentStatePointer` pointing to that single GradTrak state."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th module in the GradTrak. The `delete` command calls `Model#commitGradTrak()`, causing the modified state of the GradTrak after the `delete 5` command executes to be saved in the `GradTrakStateList`, and the `currentStatePointer` is shifted to the newly inserted GradTrak state."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Step 3. The user executes `add c/CS2103T ...` to add a new module. The `add` command also calls `Model#commitGradTrak()`, causing another modified GradTrak state to be saved into the `gradTrakStateList`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "If a command fails its execution, it will not call `Model#commitGradTrak()`, so the GradTrak state will not be saved into the `gradTrakStateList`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Step 4. The user now decides that adding the module was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoGradTrak()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous GradTrak state, and restores the GradTrak to that state."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial GradTrak state, then there are no previous GradTrak states to restore. The `undo` command uses `Model#canUndoGradTrak()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoGradTrak()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the GradTrak to that state."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "If the `currentStatePointer` is at index `gradTrakStateList.size() - 1`, pointing to the latest GradTrak state, then there are no undone GradTrak states to restore. The `redo` command uses `Model#canRedoGradTrak()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the GradTrak, such as `list`, will usually not call `Model#commitGradTrak()`, `Model#undoGradTrak()` or `Model#redoGradTrak()`. Thus, the `gradTrakStateList` remains unchanged."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitGradTrak()`. Since the `currentStatePointer` is not pointing at the end of the `gradTrakStateList`, all GradTrak states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add c/CS2103T ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire GradTrak."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of GradTrak states."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Pros: Easy for less experienced developers to understand."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedGradTrak`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "// tag::CourseRequirement[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d\u003d Checking whether Course Requirement is fulfilled Feature"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Users are able to check whether they have satisfied course requirements through a function `displayreq`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Similar to the implementation of the feature related to `displaymod`, when the application is"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "launched, a JSON file containing pre-existing information on courses (either default or pre-defined by users) and their respective course requirement"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "will loaded as `Course` objects and `CourseRequirement` interface (`Course` contains multiple `CourseRequirement` interface implementees)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "and stored in an `CourseList` inside of `ModelManager`. While the app does not support adding or removing courses and course requirements,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "users can still define their own course or course requirements by modifying the JSON file."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "We employ the \"Composite\" design pattern for this class as there are desirable boolean binary operations such as"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\"and\", \"or\", that we would like to apply on two different requirements and we would want to regard the \"simple\" CourseRequirement,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "(one that can be achieved without \"and\", \"or\") and a more complicated one (one that can only be achieved with \"and\", \"or\") to be the same."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "As such the logical choice would be to make `CourseRequirement` an interface and its implementation is restricted to"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "the `PrimitiveRequirement` and `CompositeRequirement` classes."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "image::CompositeDesignPattern.png[width\u003d\u003d800]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "As the name suggests,"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "`CompositeRequirement` is made up of two other `CourseRequirements`, a `LogicalConnector` enumerations (which is used to represent"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "logical binary operators such conjunctions and disjunctions). On the other hand, a `PrimitiveRequirement` is a standalone `CourseRequirement` implementation"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "that contains a `Condition` class, which is really a helper class that is used to check whether a list of `ModuleInfoCode` can satisfy the `CourseRequirement`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "The `Condition` class has the following attribute to decide whether the a condition of `PrimitiveRequirement` is fulfilled, namely one String, Regular Expression,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "and an integer `minToSatisfy`. We will further elaborate the details below."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "There currently 3 ways that `CourseRequirement` provides information to the user:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* `isFulfilled()` -- a method that accepts a list of `ModuleInfoCode` and returns a `boolean` to indicate whether the list of"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "`ModuleInfoCode` can satisfy the requirement."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** For `PrimitiveRequirement`, if the number of distinct `ModuleInfoCode` satisfies the list of Regular Expression pre-defined in"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "`Condition` class exceeds `minToSatisfy`, we define the `PrimitiveRequirement` to be satisfied."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Similarly, for `CompositeRequirement`, it depends on the `LogicalConnector`; if we have \"and\", then both `CourseRequirement` must be satisfied"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "in order for `CompositeRequirement` to be satisfied and likewise for \"or\"."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* `percentageFulfilled()` -- a method that also accepts a list of ModuleInfoCode returns a `double` value on the percentage of completion of the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "`CourseRequirement`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** For `PrimitiveRequirement` this will be the proportion of distinct modules that satisfy at least one of the regular expression"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "divided by `minToSatisfy`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** For `CompositeRequirement`, a `LogicalConnector` of \"or\" wil result in the max of the two requirements whereas for \"and\", we take average"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "of both classes to approximate the degree of completion."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* `getUnfulfilled()` -- a method that accepts a list of `ModuleInfoCode` and returns a list of Strings that matches regular expressions (defined under Condition) of the `ModuleInfoCode`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "that can be used to satisfy the `CourseRequirement`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How condition checks whether Course Requirement is fulfilled"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* **Alternative 1 (current choice): Checking Requirement fulfilled by only using `ModuleInfoCode` of"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "`ModuleTaken`**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Pros: Easier to implement since we are restricting scope to only checking of strings"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Cons: There could be \u0027corner cases\u0027 that we left out; actual NUS Course Requirement that we cannot represent by"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "merely checking the module code."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* ** Alternative 2: Checking Requirement fulfilled by accessing any attribute of `ModuleTaken`**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Pros: Increased flexibility allows for more powerful expressions and increased usability for users side"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Cons: More Java classes/coding required (to Separate Responsibilities and Concerns) also means that more tests"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "and storage components for different classes."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Alternative 1 is chosen over alternative 2 because it is much easier to implement in terms of scope."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Another reason why we chose alternative 1 over alternative 2 is due to the lack of time."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "For most cases, alternative 1 seems to be sufficient."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "However, in the future, we might extend the Condition class to check for other attributes of `ModuleTaken`."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "//end::CourseRequirement[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "//tag::recommend[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Module recommendation feature"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The module recommendation feature displays modules which the user is recommended to take based on existing GradTrak modules"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "and specific course requirements. It generates a list of module codes together with their corresponding titles and requirement"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "types satisfied. The entire list is displayed on the Result Panel upon entering the `rec` command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Each recommended module is represented by a `RecModule` which contains a unique `ModuleInfoCode`, `ModuleInfoTitle` and its corresponding"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`CourseReqType` satisfied, as shown in the diagram below."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".`RecModule` class diagram"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::RecModuleClassDiagram.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "When `ModelManager` is initialised, `Model#getObservableRecModuleList` is called which generates an"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`ObservableList` of `RecModule` , one for each module in the entire `ModuleInfoList`. This list is wrapped in a `FilteredList`,"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "which is further wrapped in a `SortedList`, both stored in `ModelManager`. At this point, all `RecModule` in the list contain an empty `CourseReqType` field."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "When the `rec` command is entered, the sequence of execution is as follows:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  `Model#updateRecModuleList` is called, which creates a `RecModulePredicate` given the user\u0027s `Course` and `GradTrak`, and a `RecModuleComparator`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  The `RecModulePredicate` is applied to the `FilteredList` of `RecModule`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. It first tests if the `ModuleInfoCode` (call it `codeToTest`) in a `RecModule` is eligible to be taken,"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "using an `EligibleModulePredicate` which takes in `GradTrak`. Those `RecModule` corresponding to `ModuleTaken` in `GradTrak`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "which are already passed or to be taken in a future semester (collectively known as non-failed modules) are filtered out at this stage."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. The `codeToTest` is then passed into `Course#getCourseReqTypeOf`, which in turn calls `CourseRequirement#canFulfill` for each `CourseRequirement` listed in `Course`."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " A list of `CourseReqType` that the `codeToTest` can satisfy is returned."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "This `courseReqTypeList` is sorted by the priority of `CourseReqType` as defined in the `enum` class: `CORE`, `BD`, `IE`, `FAC`, `GE`, `UE`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. A `nonFailedCodeList` of `ModuleInfoCode` corresponding to non-failed `ModuleTaken` is retrieved from `GradTrak`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "For each `CourseReqType` in the `courseReqTypeList` (highest priority first):"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "... `Course#isCodeContributing` is called, which takes in the `CourseReqType`, `nonFailedCodeList` and `codeToTest`."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "... For each `CourseRequirement` listed in `Course` corresponding to the given `CourseReqType`, `CourseRequirement#getUnfulfilled`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "is called which takes in the `nonFailedCodeList` and returns an `unfulfilledRegexList` of RegExes not satisfied."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "... If the `codeToTest` matches any of the RegExes in the"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`unfulfilledRegexList`, `Course#isCodeContributing` returns `true` and the loop for `courseReqTypeList` terminates."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. The `CourseReqType` of highest priority satisfied by `codeToTest` is then set into the `RecModule`. However, if the `codeToTest` does not"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "contribute to any of the `CourseRequirement` listed in `Course`, the `RecModule` is filtered out."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". The `RecModuleComparator` is applied to the `SortedList` of `RecModule`. It sorts the list in decreasing priority of the"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`CourseReqType` satisfied by the `RecModule`. Those `RecModule` with equal priority are sorted by module level (the first numerical digit of its `ModuleInfoCode`),"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "considering that lower level modules are usually taken first. In the case of equal priority and module level, lexicographical sorting is used."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". The `SortedList` of `RecModule` is retrieved from `ModelManager` and displayed to the user in the Result Panel."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "If there are changes to `GradTrak` (adding, editing or deleting modules) or `Course` (changing the course of study), the `rec` command"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "must be run again to reflect the updated recommendation list."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The sequence diagrams summarising the above execution are shown below."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".`RecCommand` sequence diagram"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::RecCommandSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".`RecModulePredicate` sequence diagram"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::RecModulePredicateSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".`RecModuleComparator` sequence diagram"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::RecModuleComparatorSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Sorting of recommendation list"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **Alternative 1 (current choice): Recommendation list is sorted by a fixed order of `CourseReqType` priority as defined in the `enum` class**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Pros: Easy to implement and modify"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Cons: User may have his own order of priority that differs from the default one"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **Alternative 2: Recommendation list can be sorted by a custom order defined by the user**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Pros: User can sort the list according to his own preferences"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Cons: Difficult to implement if several parameters for sorting is allowed; input method for the custom order is problematic"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `CourseReqType` for each tested module is stored"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **Alternative 1 (current choice): `CourseReqType` is stored in `RecModule` together with `ModuleInfoCode` and `ModuleInfoTitle`**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Pros: More organised; any additional information the user wishes to be displayed can also be stored in `RecModule`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Cons: More space required for creating `RecModule` for all modules"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **Alternative 2 (previous choice): A `HashMap` of `ModuleInfoCode` to `CourseReqType` is stored; the map is reset before each `rec` command**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Pros: Only need to store `ModuleInfoCode` instead of `RecModule`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Cons: Retrieving other information of the module for displaying in the Result Panel is slightly problematic"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d Possible Improvements"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Allow the user to display a module\u0027s information (from displaymod command) using its index in the recommendation list"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Allow the user to add a module to GradTrak using its index in the recommendation list"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "//end::recommend[]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "// tag::semesterlimits[]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Semester CAP and workload management feature"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Users are able to set their preferred minimum and maximum CAP limits for each semester. They are also able to set the minimum and maximum workload limits for each semester in terms of the number of hours per week in terms of lectures, tutorials, labs, projects, and preparation."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "The current stored semester limits will be loaded from the GradTrak.json file into a list of `SemLimit` Objects for each semester on app startup."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "If the user has not set any limits, the json file will contain a list with default limit values."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Users able to set the expected minimum and maximum grade for each module they take, as well as the number of workload hours."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "The `EditCommand` is used to set the grades and workload expected using an single argument for each variable."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Users can check if their expected grades and workload per semester falls within their preferred limits."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "A class `LimitChecker` handles the computation of CAP and total workload of the semesters and generates a table in HTML with the information computed."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "//end::semesterlimits[]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "// tag::semestertracking[]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Current Semester Tracking"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Modules taken before the current semester must have a finalized grade such that"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "when the user tries to shift the current semester forward, the app will check through all the modules taken before the current semester to ensure that the maximum and minimum expected grades are set to be the same."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "or else the `cursem` command will fail and be rejected with an error message"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "//end::semestertracking[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ".  Update the version courseReqCredits in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ".  Tag the repo with the version courseReqCredits. e.g. `v0.1`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "A project often depends on third-party libraries. For example, GradTrak depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all modulesTaken in the list."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/GradTrak.java[`GradTrak`] API need to be updated."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/GradTrak.java[`GradTrak`] and link:{repoURL}/src/main/java/seedu/address/model/person/ModuleTaken.java[`ModuleTaken`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/GradTrak.java[`GradTrak`] allows you to update a module, and link:{repoURL}/src/main/java/seedu/address/model/person/ModuleTaken.java[`ModuleTaken`] allows you to update the tags."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/GradTrak.java[`GradTrak`]. Loop through each module, and remove the `tag` from each module."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `GradTrak#removeTag(Tag)`."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total courseReqCredits of people in the address book."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the courseReqCredits of modulesTaken when the application just started."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleGradTrakChangedEvent(GradTrakChangedEvent)`] to update the courseReqCredits of modulesTaken whenever there are new changes to the GradTrak."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total courseReqCredits of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/GradTrakSystemTest.java[`GradTrakSystemTest`] to also verify the new total courseReqCredits of modulesTaken status bar."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the GradTrak to the cloud. However, the current implementation of the application constantly saves the GradTrak after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the GradTrak storage."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Add a new method `backupGradTrak(ReadOnlyGradTrak)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/GradTrakStorage.java[`GradTrakStorage`] interface."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonGradTrakStorage.java[`JsonGradTrakStorage`] class."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "*Scenario:* You are a software maintainer for `GradTrak`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular module, by providing a flexible `remark` field for each module, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `remark 1 r/Very difficult!` +"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Edits the remark for the first module to `Very difficult!`"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Removes the remark for the first module."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/GradTrakParser.java[`GradTrakParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/GradTrakParserTest.java[`GradTrakTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Very Difficult!`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/GradTrakParser.java[`GradTrakParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/GradTrakParserTest.java[`GradTrakParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `ModuleTaken` to support a `Remark` field"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/moduletaken/ModuleTaken.java[`ModuleTaken`]."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/moduletaken/ModuleTaken.java[`ModuleTaken`]."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the module will be created without a remark)."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/gradtrak.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedModuleTaken` class"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "We now have `Remark` s for `ModuleTaken` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedModuleTaken.java[`JsonModuleTaken`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Fix `invalidAndValidModuleTakenGradTrak.json`, `typicalModuleTakenGradTrak.json`, `validGradTrak.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `ModuleTaken`"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Since `ModuleTaken` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/ModuleTakenBuilder.java[`ModuleTakenBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/moduletaken/ModuleTaken.java[`ModuleTaken`]."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/ModuleTakenBuilder.java[`ModuleTakenBuilder`]. This method will create a new `Remark` for the module that it is currently building."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Try and use the method on any sample `ModuleTaken` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalModuleTaken.java[`TypicalModuleTaken`]."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `ModuleTaken` \u0027s remark."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* has a need to manage a significant courseReqCredits of contacts"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`* * *` |student |track the modules I am taking |know what I need to complete my graduation requirement"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`* * *` |student |add a module for the current semester|"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`* * *` |student |delete a module |remove modules that I am not taking"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "|`* * *` |student |find a module by code, semester, grade or finished status |locate details of modules without having to go through the entire list"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`* *` |student |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`* *` |student |view pre-requisites for a module |take the pre-requisites ahead of time"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`* *` |student |add my modules in future semesters |plan ahead"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`* *` |student |know my CAP |pull up my CAP"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "|`* *` |student |see a recommended list of modules I can take in order of priority |fulfil the graduation requirements on time"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "|`*` |student with many modules |sort module by name |locate a module easily"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "(For all use cases below, the *System* is `GT` (GradTrak) and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "\u003d\u003d\u003d Use case: Initialising"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Precondition: User uses GT for the first time"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "1.  User starts GT."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "2.  GT displays courses."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "3.  GT prompts for user to set choice of course."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "4.  User selects course."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "5.  GT sets choice of course by user."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 4a. User selects course that has specialisation."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 4a1. GT displays specialisation."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 4a2. GT prompts user to select specialisation."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 4a3. GT sets choice of course and specialisation by user."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "\u003d\u003d\u003d Use case: Adding to completed list of modules"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Precondition: Student has already initialised GT"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "1.  User enters command to add modules with module code, semester completed and grades."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "2.  System records module code, semester completed and grades."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1a. Student enters invalid grade."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 1a1. GT prompts user that grade is invalid."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1b. Student enters invalid module code."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 1b1. GT prompts user that module code is invalid."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1c. Student enters invalid semester."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 1c1. GT prompts user that semester is invalid."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1d. Student enters module that is already in list of completed modules."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 1d1. GT prompts user that there is a repeat of module code."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "\u003d\u003d\u003d Use case: Delete module"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Precondition: Student has already intialised GT"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "1.  User enters command to remove modules by giving module code."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "2.  System removes module from list of completed / planned modules."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1a. Student enters module code that is correct but not in list of modules completed or planned."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1b. Student enters module code that is wrong."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 1b1. GT shows an error message."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "\u003d\u003d\u003d Use case: Modify details of modules taken"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "1.  User enters command to edit modules indicated by module code and gives grades and semester taken / planning to take."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "2.  System edits relevant details."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1a. Module code correct but not in the list of modules completed or planned."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 1a1. GT prompts user that module is not being taken."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* 1b. Student enters invalid module code."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "** 1b1. GT shows an error message."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "\u003d\u003d\u003d Use case: Display module info"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "1.  Student keys command to find module code or keywords in the title of module."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "2.  System returns module given module code or keywords."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "+"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ".  Should be able to hold up to 1000 modulesTaken without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ". Deleting a person while all modulesTaken are listed"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ".. Prerequisites: List all modulesTaken using the `list` command. Multiple modulesTaken in the list."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 65,
      "crumpledpaper": 116,
      "monikernemo": 76,
      "-": 838,
      "lshwayne96": 194,
      "alexchong711": 19
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "\u003d GradTrak - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w14-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "By: `Team W14-4`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "GradTrak is an application designed for students of National University of Singapore (NUS) to easily track their graduation progress."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "The current version of the application offers graduation requirement tracking to Computer Science majors (namely the Algorithms, Artificial Intelligence and Software Engineering Focus Areas)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Stay tuned as we will be adding other courses in the near future!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Users can interact with the application by entering commands into the command box. This will benefit Computer Science majors as they can generally type quickly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d Installation Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Follow the instructions below to install this application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  Download the latest `GradTrak.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your GradTrak."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  Double-click the file to start the app. The app window should appear within a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d Quick Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Read the guide below to have a quick understanding of the usage of this app."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".Parts of the User Interface"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "image::annotated-ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". Refer to `Fig 1` for parts of the User Interface (UI). Here are the brief functionalities"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "of the UI annotated above:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Task Bar: You can exit the application or access the help menu (this guide) here."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Command Box: You can enter a command here to access the features of the application"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Result Box: You receive feedback for your entered command here. If the command is unsuccessfully executed,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "the correct input format of the command will be provided."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Result Panel: You can view the information associated with the command entered here."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".. Module Panel: You can view the details of the modules that you have taken"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "or are planning to take."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  To access a feature of the application, type a command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "For example, typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ". You might wish to set the course of study first. There are currently 3 courses available in this app: Computer Science Algorithms,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Computer Science Artificial Intelligence, Computer Science Software Engineering."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "To set the course, enter one of the following commands:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`study Computer Science Algorithms`, `study Computer Science Software Engineering` or `study Computer Science Artificial Intelligence`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".  Here are some commands you can try:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **`add`**`c/CS1010 s/Y1S1` : adds the module \"CS1010\", taken in Y1S1, into the module plan."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **`delete`**`1` : deletes the first module on the most recently displayed list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* **`displayreq`**: displays information on your course requirements and the percentage completed for each requirement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Here we only introduced some of the more basic functions and commands of GradTrak. The following section, \u003c\u003cFeatures\u003e\u003e,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "will give you a more detailed guide/walk through for each command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user, e.g. in `add c/MODULE_CODE`, `MODULE_CODE` is a parameter which can be used as `add c/cs1010`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* Items in square brackets are optional e.g `c/MODULE_CODE [g/GRADE_OBTAINED]` can be used as `c/CS1010 g/A` or as `c/CS1010`."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "[[add]]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Add module: `add`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Adds a module to GradTrak based on the given module code, semester taken and expected / obtained grade. +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `add c/MODULE_CODE s/SEMESTER [min/NEW_EXPECTED_MIN_GRADE] [max/NEW_EXPECTED_MAX_GRADE] [lec/NEW_LECTURE_HOURS] [tut/NEW_TUTORIAL_HOURS] [lab/NEW_LAB_HOURS] [proj/NEW_PROJ_HOURS] [prep/NEW_PREP_HOURS]` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "or +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`add c/MODULE_CODE s/SEMESTER [g/NEW_EXPECTED_MIN_GRADE NEW_EXPECTED_MAX_GRADE] [lec/NEW_LECTURE_HOURS] [tut/NEW_TUTORIAL_HOURS] [lab/NEW_LAB_HOURS] [proj/NEW_PROJ_HOURS] [prep/NEW_PREP_HOURS]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* Possible grade options are the standard letter grades (A_PLUS, A, A_MINUS, B_PLUS, B, B_MINUS etc.) and IC, EXE, CS, CU, W, S, U."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* You cannot add an existing module with the same semester."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* You can only add a module if you have previously added its prerequisites."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `add c/CS2103T s/Y2S2` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Adds CS2103T, to be taken in Y2S2, to the module plan."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `add c/CS2103T s/Y2S2 max/B_MINUS` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Adds CS2103T, to be taken in Y2S2 with expected max grade B-, to the module plan."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Listing all modules in module plan: `cklimit`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Calculates the expected total workload and expected min and max CAP of each semester and checks against the limit set by the user. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `cklimit`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Clear all data entered: `clear`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Deletes all the added modules. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Sets the current semester: `cursem`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Indicates that the previous semesters must have a single finalized grade in the expected grade range. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `cursem`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Delete module: `delete`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Removes a module from GradTrak based on module code or index in the most recently displayed list. +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Format: `delete INDEX` +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "or +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`delete c/MODULE_CODE`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* Shows a message if the given module code is not found."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `delete c/CS2103T` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Deletes CS2103T from GradTrak."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Deletes the first module on the most recently displayed list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003d\u003d\u003d Display module information: `displaymod`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The `displaymod` command shows all modules that is available in NUS based on the user\u0027s search. This command simply"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "shows modules straight from NUS\u0027s database of modules and does not check if the user has met the prerequisites to read"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "a particular module."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "This command will allow users to find out more about a module or even compare modules so as to decide which modules to read"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "in the upcoming semesters. Once decided on which module the user plans to read, they can use \u003c\u003cadd\u003e\u003e command to add the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "module to their own list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "Searches are *case-insensitive*."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "Users must strictly adhere to syntax of the `displaymod` command in order to get optimum search results."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "There are *2* ways to search for modules:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* Search by *code*:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "All modules have module code associated with it, this makes it easier to remember modules.To search for modules based on"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "code, a `c/` prefix must be added after `displaymod` command, followed by a list of modules which are separated by `,`. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "Format: `displaymod c/MODULE_CODE,[MODULE_CODE]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Single module code search command format +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymod1cexamplecmd.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The search above should yield a result: +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Single module code search result +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymod1cexampleresult.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "However if users wishes to search for multiple modules at once they can follow the example given below: +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Multiple module codes search command format +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymodMcexamplecmd.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The search above should yield a result: +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Multiple module code search result +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymodMcexampleresult.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* Search by *name*:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "There are cases where students may not remember or know a module\u0027s code but vaguely remember the module\u0027s name. Users"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "who find themselves in such a situation can search for modules by their names by adding a `n/` prefix after the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "`displaymod` command, followed by keyword/s that can be found in the module\u0027s name. Keywords have to be separated by `+`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "symbol. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "Format: `displaymod n/KEYWORD+[KEYWORD]`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Single module name search command format"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymod1nexamplecmd.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The search above should yield a result: +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Single module name search command result +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymod1nexampleresult.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "However if users wishes to search for multiple modules at once they can follow the example given below: +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Multiple module name keyword search format +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymodMnexamplecmd.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "The search above should yield a result: +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".Multiple module name keyword search result +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymodMnexampleresult.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "If the user has successfully managed to display a module of their choice, they will be presented with module/s containing"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "several information that the user will find useful. The example below will show the information provided for each module"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "after a successful search:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".What information each module contains"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "image::displaymoddisplay.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "What each number displays: +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "*1.* Shows the module *code* and module *name*. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "*2.* Shows which *department* the module belongs to. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "*3.* Displays the amount of module *credits* a student can gain by reading this module. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "*4.* Displays a brief description of the modules and potentially the topics that may be covered. +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "*5.* Contains the *prerequisite tree* for each module. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "*6.* Contains *workload* load information, the values are meant to be read as *Hours*."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "// tag::Displayreq[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d\u003d Display Course Requirements: `displayreq`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "One of the core functions of GradTrak is to track whether the user has fulfilled his/her degree requirement."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "As of `v1.3` of the application, GradTrak currently only has course information of 3 Computer Science major Focus Areas, namely:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* Algorithms"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* Artificial Intelligence"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* Software Engineering"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "You may refer to the guide on `study` command to understand how to set your current course of study."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Using the information of the modules the user has already taken or is planning to take in the future semesters,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "this command informs the user whether they have completed a certain Graduation / Course Requirement. If a certain requirement is not completed, this command will also inform the user an approximate degree of completion of the requirement and also"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "at the same time, suggest some other modules offered by NUS which they can take to fulfill the requirement."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Format: `displayreq`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "// end::Displayreq[]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Edit module: `edit`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Edits the semester or grade of a module in the module plan based on module code or index in the most recently displayed list. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `edit INDEX [s/NEW_SEMESTER] [min/NEW_EXPECTED_MIN_GRADE] [max/NEW_EXPECTED_MAX_GRADE] [lec/NEW_LECTURE_HOURS] [tut/NEW_TUTORIAL_HOURS] [lab/NEW_LAB_HOURS] [proj/NEW_PROJ_HOURS] [prep/NEW_PREP_HOURS]`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "or +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`edit INDEX [s/NEW_SEMESTER] [g/NEW_EXPECTED_MIN_GRADE NEW_EXPECTED_MAX_GRADE] [lec/NEW_LECTURE_HOURS] [tut/NEW_TUTORIAL_HOURS] [lab/NEW_LAB_HOURS] [proj/NEW_PROJ_HOURS] [prep/NEW_PREP_HOURS]` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* Parameters can be in any order, but the index must be entered first."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* At least one field to be edited must be given."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `edit c/CS2103T s/Y2S2` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Changes the semester taken of CS2103T to Y2S2."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `edit 2 min/A_PLUS` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Changes the expected min grade of the second module in the most recently displayed list to A+."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Exit the program: `exit`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Find module: `find`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Finds modules in GradTrak matching all given module code, semester, grade or finished status. +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `find [c/MODULE_CODE] [s/SEMESTER] [g/GRADE] [f/IS_FINISHED]`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* Parameters can be in any order and are case-insensitive."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* Module code can be entered partially, but semester and grade must be in the exact format."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* For unfinished modules, searching by grade will display those whose grade range covers that grade."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* Finished status is indicated by \u0027y\u0027 for finished module (i.e. semester taken is before current semester) or any other value for unfinished."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `find c/CS` +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Lists all CS modules in GradTrak."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".Finding CS modules"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::find(c).png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `find s/Y1S2` +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Lists all modules in Y1S2 in GradTrak."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".Finding modules in Y1S2"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::find(s).png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* `find g/A f/y` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Lists all finished modules with grade A."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".Finding finished modules with grade A (current semester: Y1S2)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::find(g,f).png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d View all other commands : `help`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Displays a list of all available commands. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d List entered commands: `history`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Lists all commands entered in reverse chronological order. +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Listing all modules in module plan: `list`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Shows a list of all modules in GradTrak. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Recommend module: `rec`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Recommends a list of modules that can be taken based on GradTrak modules and course requirements, as shown above."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Modules with unmet prerequisites or preclusions present in GradTrak as well as modules already added (unless they have been failed) will not be recommended. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Recommended modules are displayed in order of requirement satisfied: Core, Breadth \u0026 Depth, Industry Experience, Faculty, General Education, Unrestricted Electives."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Modules with the same requirement satisfied are sorted by level. +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `rec`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ".Recommendation list for Computer Science Algorithms"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "image::recommend.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Redo the previously undone command: `redo`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "// tag::study[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d\u003d Set current course of study: `study`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "To set the course of study you are currently undertaking, just simply key in the following command:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Format: `study COURSE` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "As of `v1.3`, GradTrak has the functionalities to keep track of Graduation Requirements"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "from the courses mentioned below:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* Computer Science Algorithms"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* Computer Science Artificial Intelligence"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* Computer Science Software Engineering"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "****"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* `study Computer Science Algorithms` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Sets the course of study to Computer Science with Focus Area Algorithms. Invoking `study` command again will change your course of study."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "Feeling left out as you are unable to track your course of study? Fear not! We will roll"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "out more courses of study in a future version of GradTrak, so stay tuned!"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "// end::study[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Sets the total expected CAP and workload limit for each semester: `setlimit`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Calculates the expected total workload and expected min and max CAP of each semester and checks against the limit set by the user. +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `setlimit s/SEMESTER [g/MIN_GRADE MAX_GRADE] [lec/MIN_LECTURE_HOURS MAX_LECTURE_HOURS] [tut/MIN_TUTORIAL_HOURS MAX_TUTORIAL_HOURS] [lab/MIN_LAB_HOURS MAX_LAB_HOURS] [proj/MIN_PROJ_HOURS MAX_PROJ_HOURS] [prep/MIN_PREP_HOURS MAX_PREP_HOURS]`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `setlimit s/Y1S1 g/2.5 5.0`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d Undo previous command: `undo`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Restores GradTrak to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Undoable commands: those commands that modify the module plan or course (`set`, `add`, `edit`, `delete` and `clear`)."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`displaym o/all` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `displaym o/all` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`history` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Save data"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Data are saved in the hard disk automatically after any command that changes them. There is no need to save manually."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Encrypt data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Encrypts your data files."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003d\u003d\u003d Update module information `[coming in v2.0]`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "Retrieves the latest information of all modules from CORS."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous GradTrak folder."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* *Add*: `add c/MODULE_CODE s/SEMESTER [g/MIN_GRADE_EXPECTED MAX_GRADE_EXPECTED]` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          or +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          `add c/MODULE_CODE s/SEMESTER [g/GRADE_OBTAINED]` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Cklimit*: `cklimit`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Clear*: `clear`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Cursem*: `cursem s/SEMESTER`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "* *Delete*: `delete c/MODULE_CODE` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "or +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "`delete INDEX` +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "* *Displaymod*: `displaym o/OPTIONS [MORE_ARGUMENTS]` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "* *Displayu*: `displayu o/OPTIONS [MORE_ARGUMENTS]` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Edit*: `edit c/MODULE_CODE [s/NEW_SEMESTER] [g/NEW_GRADE_OBTAINED]` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "or +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "`edit INDEX [s/NEW_SEMESTER] [g/NEW_GRADE_OBTAINED]` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Exit*: `exit`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Find*: `find [c/MODULE_CODE] [s/SEMESTER] [g/GRADE] [f/IS_FINISHED]`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help*: `help`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* *History*: `history`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *List*: `list`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Recommend*: `rec`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo*: `redo`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Set*: `set COURSE` +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Setlimit*: `setlimit s/SEMESTER [g/MIN_GRADE MAX_GRADE] [lec/MIN_LECTURE_HOURS MAX_LECTURE_HOURS] [tut/MIN_TUTORIAL_HOURS MAX_TUTORIAL_HOURS] [lab/MIN_LAB_HOURS MAX_LAB_HOURS] [proj/MIN_PROJ_HOURS MAX_PROJ_HOURS] [prep/MIN_PREP_HOURS MAX_PREP_HOURS]`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "* *Undo*: `undo`"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 79,
      "crumpledpaper": 14,
      "-": 135,
      "monikernemo": 40,
      "lshwayne96": 94,
      "alexchong711": 96
    }
  },
  {
    "path": "docs/team/monikernemo.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d Lee Yi Quan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d PROJECT: GradTrak - A Graduation Tracker for NUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "GradTrak is an application that was morphed from the codebase of https://github.com/nus-cs2103-AY1819S2/addressbook-level4[Address Book - Level 4]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "It was conceptualised and designed in mind to assist students of NUS to track their graduation progress and plan future modules that they want to take."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* *Major feature*: added the functionality for users to track their graduation requirements"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** What it does: allows the user to check against the a list of modules they have taken / are planning to take, whether"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "they have fulfilled the requirements. If the requirement is not fulfilled, the feature also allows the users"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "to know approximately, the extent of completion of these graduation requirements and suggest the suitable modules"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "they can take to satisfy the requirement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Why this feature: This feature is one of the core functionalities of GradTrak. This greatly enhances quality of life of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "students in NUS as it would allow them to find out the modules they can take to satisfy graduation requirement."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Highlights: It is difficult to implement this feature properly because it is difficult to capture the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "key characteristics of graduation requirements since they can vary quite a fair bit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "I had to do some research on design patterns to understand how to mimic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "some of the behaviours of Course Requirements as intended."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* *Minor enhancement*: created user editable files for users to store different courses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "and course requirements, added some sample courses into the application namely: Computer Science Algorithms, Artificial Intelligence"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "and Software Engineering."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* *Code contributed*: [https://github.com/cs2103-ay1819s2-w14-4/main/tree/master/src/main/java/seedu/address/model/course[Functional code]] [https://github.com[Test code]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Project Management"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "*** Set up milestones, issue tracker"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "*** Put up user stories"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Refactored Code"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "*** Renamed significant amount of variables, classes in Address Book - Level 4 code base"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "*** Updated some documentation and their visuals inherited from Address Book - Level 4 to match GradTrak"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "*** Changed some visuals for the User Guide, Developer Guide https://github.com/cs2103-ay1819s2-w14-4/main/pull/90[#90]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "*** Changed some of the prose of the User Guide, Developer Guide (see above PR)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "*** Modified some sections of User Guide, Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dDisplayreq]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstudy]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dCourseRequirement]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003d\u003d PROJECT: Cuckoo Hash"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "An experimental assignment from https://www.comp.nus.edu.sg/~gilbert/CS5330/[CS5330 - Randomised Algorithm]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "to investigate various effects of different Cuckoo Hash schemes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "https://www.comp.nus.edu.sg/~gilbert/CS5330/2019/psets/ExperimentalAlgorithms.pdf[More information on assignment here]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "and https://github.com/monikernemo/CS5330-Experimental-Assignment[more on the codes of the implementation here]"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.GradTrakStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.JsonGradTrakStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.UserInfoStorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.coursestorage.CourseManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.storage.moduleinfostorage.ModuleInfoManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    protected ModuleInfoManager moduleInfoManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    protected CourseManager courseManager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    protected UserInfoStorageManager userInfoStorageManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //protected Course manager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing GradTrak ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrakStorage gradTrakStorage \u003d new JsonGradTrakStorage(userPrefs.getGradTrakFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        storage \u003d new StorageManager(gradTrakStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //Other app data managers"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        moduleInfoManager \u003d new ModuleInfoManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        courseManager \u003d new CourseManager();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInfoStorageManager \u003d new UserInfoStorageManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, moduleInfoManager,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                courseManager, userInfoStorageManager);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logic \u003d new LogicManager(model, storage, userInfoStorageManager);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * An empty GradTrak will be used instead if {@code storage}\u0027s GradTrak is not found,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * or an empty GradTrak will be used instead if errors occur when reading {@code storage}\u0027s GradTrak."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs, ModuleInfoManager moduleInfoManager,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                   CourseManager courseManager, UserInfoStorageManager userInfoStorageManager) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cReadOnlyGradTrak\u003e gradTrakOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ReadOnlyGradTrak initialData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Optional\u003cModuleInfoList\u003e allModulesOptional;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ModuleInfoList allModules;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cCourseList\u003e allCourseListOptional;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseList allCourses;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cUserInfo\u003e userInfoOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UserInfo userInfo;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            allCourseListOptional \u003d courseManager.readCourseFile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (!allCourseListOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                logger.info(\"File for all courses not found! Starting with sample course List\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            userInfoOptional \u003d userInfoStorageManager.readUserInfoFile();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (!userInfoOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                logger.info(\"File for user information not found! Starting with default user info file\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            allModulesOptional \u003d moduleInfoManager.readModuleInfoFile();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (!allModulesOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                logger.info(\"File for all module information not found! Starting with empty module List\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            gradTrakOptional \u003d storage.readGradTrak();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (!gradTrakOptional.isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty GradTrak\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            initialData \u003d gradTrakOptional.orElseGet(GradTrak::new);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            //If unable to find the data file provide a blank Module Info List"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            allModules \u003d allModulesOptional.orElse(new ModuleInfoList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            //If unable to find data file, provide default course list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            //TODO: Implement sample courses and course requirement"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            allCourses \u003d allCourseListOptional.orElse(new CourseList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            userInfo \u003d userInfoOptional.orElse(new UserInfo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty GradTrak\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            initialData \u003d new GradTrak();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            allModules \u003d new ModuleInfoList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            allCourses \u003d new CourseList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            userInfo \u003d new UserInfo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradTrak\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            initialData \u003d new GradTrak();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            allModules \u003d new ModuleInfoList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            allCourses \u003d new CourseList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            userInfo \u003d new UserInfo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new ModelManager(initialData, userPrefs, allModules, allCourses, userInfo);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty GradTrak\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logger.info(\"Starting GradTrak \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 10,
      "-": 162,
      "monikernemo": 59,
      "lshwayne96": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX \u003d \"The index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_MODULE_DOES_NOT_EXIST \u003d \"Module does not exist\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_INVALID_SEMESTER_LIMIT \u003d \"The semester provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_GRADES_NOT_FINALIZED_BEFORE_SEMESTER \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            \"Grades before current semester must be finalized\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_GRADES_OUT_OF_ORDER \u003d \"Grades are out of order\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_MAX_GRADE_MUST_BE_COUNTED \u003d \"Max grade of module must be countable in CAP\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_MODULETAKEN_LISTED_OVERVIEW \u003d \"GradTrak modules found: %1$d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "lshwayne96": 3,
      "alexchong711": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Similar to readJsonFile, but input is inputStreamPath instead of file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param inputStreamPath cannot be null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IOException if the inputStreamPath is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFileFromInputStream("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            String inputStreamPath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(inputStreamPath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        InputStream inputStream \u003d MainApp.class.getResourceAsStream(inputStreamPath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            String line \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            StringBuilder json \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                json.append(line);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.of(objectMapper.readValue(json.toString(), classOfObjectToDeserialize));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "monikernemo": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ModuleTree.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * A Tree Data Structure for Module Prerequisites"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleTree {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Node headNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleTree(String moduleCode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.code \u003d moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.headNode \u003d new Node(true, false, code);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void addTree(Node subHead) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.headNode.addChild(subHead);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public Node getHead() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.headNode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Checks against the list of module taken with the prerequisite of the module"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return ArrayList of Modules that is missing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ArrayList\u003cString\u003e checkPrerequisites(ArrayList\u003cString\u003e modules) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ArrayList\u003cString\u003e missingModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        getHead().checkChildren(modules, missingModules);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return missingModules;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/Node.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Nodes for Prerequisite Tree"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class Node {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final int HEAD_CHILD_INDEX \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private boolean head;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Node parent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private boolean isModule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private String nodeValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ArrayList\u003cNode\u003e childList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public Node(boolean isHead, boolean isModule, String value) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.head \u003d isHead;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.isModule \u003d isModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.nodeValue \u003d value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        childList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean isHead() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return head;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean isModule() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return isModule;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Checks if a particular node has a parent Node"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return boolean value if it has a parent or not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean hasParent() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return (parent \u003d\u003d null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean isDummy() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return (getValue().equals(\" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void setHead(boolean b) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.head \u003d b;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return nodeValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private void setParent(Node parent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Add Child to the current Node"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void addChild(Node child) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        child.setParent(this);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        childList.add(child);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean hasNoChild() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return childList.isEmpty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ArrayList\u003cNode\u003e getChildList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.childList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void addChildList(ArrayList\u003cNode\u003e list) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.childList \u003d list;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Method to check for nodes matching"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void checkChildren(ArrayList\u003cString\u003e modules, ArrayList\u003cString\u003e missingModules) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (isHead() || \"Requires:\".equals(getValue())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            getChildList().get(HEAD_CHILD_INDEX).checkChildren(modules, missingModules);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else if (\"OR\".equals(nodeValue)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            for (int i \u003d 0; i \u003c getChildList().size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                Node currNode \u003d getChildList().get(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (!currNode.isModule() \u0026\u0026 (currNode.getValue().equals(\"OR\") || currNode.getValue().equals(\"AND\"))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    currNode.checkChildren(modules, missingModules);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    for (int j \u003d 0; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        if (modules.get(j).equals(currNode.getValue()) \u0026\u0026 currNode.isModule()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                            return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (i \u003d\u003d getChildList().size() - 1 \u0026\u0026 currNode.isModule()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    //gives the last value of the OR list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    missingModules.add(currNode.getValue());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else if (\"AND\".equals(nodeValue)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            for (int i \u003d 0; i \u003c getChildList().size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                Node currNode \u003d getChildList().get(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (!currNode.isModule() \u0026\u0026 (currNode.getValue().equals(\"OR\") || currNode.getValue().equals(\"AND\"))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    currNode.checkChildren(modules, missingModules);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    for (int j \u003d 0; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        if (modules.get(j).equals(currNode.getValue())) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        if (j \u003d\u003d modules.size() - 1 \u0026\u0026 currNode.isModule()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                            missingModules.add(currNode.getValue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof Node// instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 nodeValue.equals(((Node) other).nodeValue)) // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 childList.size() \u003d\u003d ((Node) other).childList.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ClassForPrinting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the GradTrak."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @see seedu.address.model.Model#getGradTrak()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ReadOnlyGradTrak getAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cModuleTaken\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Selected moduleTaken in the filtered moduleTaken list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * null if no moduleTaken is selected."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @see seedu.address.model.Model#selectedModuleTakenProperty()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    ReadOnlyProperty\u003cClassForPrinting\u003e selectedPersonProperty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Sets the selected moduleTaken in the filtered moduleTaken list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedModuleTaken(ClassForPrinting)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    void setSelectedPerson(ClassForPrinting moduleTaken);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @see Model#selectedModuleInfoProperty()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    ReadOnlyProperty\u003cModuleInfo\u003e selectedModuleInfoProperty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Sets the selected person in the filtered person list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedModuleInfo(ModuleInfo)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    void setSelectedModuleInfo(ModuleInfo moduleInfo);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Gets the filtered list based on the search"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @see Model#getDisplayList()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    ObservableList\u003cModuleInfo\u003e getDisplayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cRequirementStatus\u003e getRequirementStatusList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns a moduleInfoCodeList"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cModuleInfoCode\u003e getModuleInfoCodeList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Gets the {@code SortedList} of {@code RecModule}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @see Model#getRecModuleListSorted()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    ObservableList\u003cRecModule\u003e getRecModuleListSorted();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 20,
      "-": 64,
      "monikernemo": 21,
      "alexchong711": 4,
      "lshwayne96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.logic.parser.GradTrakParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ClassForPrinting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.UserInfoStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final UserInfoStorage userInfoStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final GradTrakParser gradTrakParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private boolean gradTrakModified;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private boolean userInfoModified;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public LogicManager(Model model, Storage storage, UserInfoStorage userInfoStorage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.userInfoStorage \u003d userInfoStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        gradTrakParser \u003d new GradTrakParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // Set gradTrakModified to true whenever the model\u0027s gradTrak is modified."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.getGradTrak().addListener(observable -\u003e gradTrakModified \u003d true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.getUserInfo().addListener(observable -\u003e userInfoModified \u003d true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        gradTrakModified \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInfoModified \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            Command command \u003d gradTrakParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (userInfoModified) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.info(\"userInfo modified, saving to file.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                userInfoStorage.saveUserInfo(model.getUserInfo());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (gradTrakModified) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.info(\"GradTrak modified, saving to file.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                storage.saveGradTrak(model.getGradTrak());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ReadOnlyGradTrak getAddressBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return model.getGradTrak();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cModuleTaken\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return model.getFilteredModulesTakenList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return model.getGradTrakFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ReadOnlyProperty\u003cClassForPrinting\u003e selectedPersonProperty() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return model.selectedModuleTakenProperty();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSelectedPerson(ClassForPrinting moduleTaken) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.setSelectedModuleTaken(moduleTaken);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ReadOnlyProperty\u003cModuleInfo\u003e selectedModuleInfoProperty() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return model.selectedModuleInfoProperty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void setSelectedModuleInfo(ModuleInfo moduleInfo) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        model.setSelectedModuleInfo(moduleInfo);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ObservableList\u003cModuleInfo\u003e getDisplayList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return model.getDisplayList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cRequirementStatus\u003e getRequirementStatusList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return model.getRequirementStatusList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cModuleInfoCode\u003e getModuleInfoCodeList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return model.getModuleInfoCodeList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public ObservableList\u003cRecModule\u003e getRecModuleListSorted() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return model.getRecModuleListSorted();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 16,
      "-": 86,
      "monikernemo": 49,
      "alexchong711": 3,
      "lshwayne96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MAX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MIN_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Workload;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Adds a moduleTaken to the GradTrak."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a moduleTaken to the address book. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + PREFIX_MODULE_INFO_CODE + \"ModuleInfoCode \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_SEMESTER + \"SEMESTER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_EXPECTED_MIN_GRADE + \"EXPECTED MIN GRADE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_EXPECTED_MAX_GRADE + \"EXPECTED MAX GRADE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + PREFIX_MODULE_INFO_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_SEMESTER + \"Y3S1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_EXPECTED_MIN_GRADE + \"D \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_EXPECTED_MAX_GRADE + \"A \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_TAG + \"Software \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_TAG + \"OOP\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New moduleTaken added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This moduleTaken already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ModuleTaken toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code ModuleTaken}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public AddCommand(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(moduleTaken);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        toAdd \u003d moduleTaken;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (model.hasModuleTaken(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (toAdd.getExpectedMinGrade().getGradePoint()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u003e toAdd.getExpectedMaxGrade().getGradePoint()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_GRADES_OUT_OF_ORDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!toAdd.getExpectedMaxGrade().isCountedInCap()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MAX_GRADE_MUST_BE_COUNTED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!toAdd.getExpectedMinGrade().equals(toAdd.getExpectedMaxGrade())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 toAdd.getSemester().getIndex() \u003c model.getCurrentSemester().getIndex()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_GRADES_NOT_FINALIZED_BEFORE_SEMESTER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        ModuleInfo moduleInfo \u003d model.getModuleInfoList().getModule(String.valueOf(toAdd.getModuleInfoCode()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (moduleInfo !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            toAdd.setWorkload(new Workload(moduleInfo.getModuleInfoWorkload()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            //TODO fix the tests"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.addModuleTaken(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.commitGradTrak();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "monikernemo": 18,
      "alexchong711": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckLimitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ClassForPrinting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Checks the CAP and Workload limits set by the user for every semester against the modules the user plans to take."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class CheckLimitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cklimit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All limits are checked.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        model.updateFilteredModulesTakenList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        ClassForPrinting s \u003d model.checkLimit(model.getModuleInfoList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        model.setSelectedModuleTaken(s);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        model.setSelectedModuleTaken(s);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"GradTrak has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.setGradTrak(new GradTrak());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.commitGradTrak();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "monikernemo": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private String result;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public CommandResult(String feedbackToUser, String result) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.result \u003d requireNonNull(result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Optional\u003cString\u003e getResult() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return Optional.ofNullable(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "lshwayne96": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Deletes a moduleTaken identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \": Deletes the moduleTaken identified by the index number used in the displayed moduleTaken list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted ModuleTaken: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e lastShownList \u003d model.getFilteredModulesTakenList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.deleteModuleTaken(moduleTakenToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.commitGradTrak();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, moduleTakenToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "monikernemo": 9,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DisplaymodCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODCODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.CodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Command to show the module information being searched for."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Limitations: only can find a list of module per command and find only based on Keyword search"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " *              and yet to use prefix allocated for search; for later versions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class DisplaymodCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"displaymod\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \": Finds one module Information based on given \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"parameters. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + PREFIX_MODCODE + \"MODULE CODE\" + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + PREFIX_MODNAME + \"MODULE NAME\" + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + PREFIX_MODCODE + \"CS2103T,CS2101\" + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + PREFIX_MODNAME + \"Software+Engineering\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module Code : %1$s \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Module Title : %2$s \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Department : %3$s \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Module Credits : %4$s \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Module Description : %5$s \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + \"Workload : %6$s \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Preclusions : %7$s \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"Prerequisites : %8$s \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_NO_MODULE \u003d \"Unable to find the Module, please check the parameters\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_MODULES_FOUND \u003d \"Modules found: %d\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final CodeContainsKeywordsPredicate keywords;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public DisplaymodCommand(CodeContainsKeywordsPredicate keywords) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        model.updateDisplayList(keywords);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (model.getDisplayList().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new CommandException(MESSAGE_NO_MODULE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MODULES_FOUND, model.getDisplayList().size()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof DisplaymodCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 keywords.equals(((DisplaymodCommand) other).keywords)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * returns a String for the Command result if the list is not empty"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return String result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static String generateResultString(Model model) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        for (int i \u003d 0; i \u003c model.getDisplayList().size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            sb.append(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                model.getDisplayList().get(i).getCodeString(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                model.getDisplayList().get(i).getTitleString(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                model.getDisplayList().get(i).getDepartmentString(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                model.getDisplayList().get(i).getCreditString(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                model.getDisplayList().get(i).getDescriptionString(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                model.getDisplayList().get(i).getWorkloadString(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                model.getDisplayList().get(i).getPreclusionsString(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                model.getDisplayList().get(i).getPrerequisitesString()))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .append(\"\\n\\n\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 80,
      "lshwayne96": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DisplayreqCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Command to display all requirements of course"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class DisplayreqCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"displayreq\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \": Displays lists of requirement based on given \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"EXAMPLE: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all requirements!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MAX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MIN_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LAB_HOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Workload;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Edits the details of an existing moduleTaken in the address book."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"moduleTaken identified \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"by the index number used in the displayed moduleTaken list. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"[\" + PREFIX_MODULE_INFO_CODE + \"NAME] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_SEMESTER + \"SEMESTER] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_EXPECTED_MIN_GRADE + \"EXPECTED MIN GRADE] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_EXPECTED_MAX_GRADE + \"EXPECTED MAX GRADE] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_LECTURE_HOUR + \"LECTURE HOUR] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_TUTORIAL_HOUR + \"TUTORIAL HOUR] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_LAB_HOUR + \"LAB HOUR] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_PROJECT_HOUR + \"PROJECT HOUR] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_PREPARATION_HOUR + \"PREPARATION HOUR] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_SEMESTER + \"Y3S1 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_EXPECTED_MIN_GRADE + \"B\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited ModuleTaken: %1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This moduleTaken already exists in the address book.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final EditModuleTakenDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param index of the moduleTaken in the filtered moduleTaken list to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param editPersonDescriptor details to edit the moduleTaken with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditCommand(Index index, EditModuleTakenDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.editPersonDescriptor \u003d new EditModuleTakenDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e lastShownList \u003d model.getFilteredModulesTakenList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedModuleTaken \u003d createEditedPerson(moduleTakenToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (editedModuleTaken.getExpectedMinGrade().getGradePoint()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u003e editedModuleTaken.getExpectedMaxGrade().getGradePoint()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_GRADES_OUT_OF_ORDER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if ((editPersonDescriptor.getExpectedMinGrade() !\u003d null || editPersonDescriptor.getExpectedMaxGrade() !\u003d null)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 editedModuleTaken.getSemester().getIndex() \u003c model.getCurrentSemester().getIndex()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_GRADES_NOT_FINALIZED_BEFORE_SEMESTER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!editedModuleTaken.getExpectedMaxGrade().isCountedInCap()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MAX_GRADE_MUST_BE_COUNTED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!moduleTakenToEdit.isSameModuleTaken(editedModuleTaken) \u0026\u0026 model.hasModuleTaken(editedModuleTaken)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        ModuleInfo moduleInfo \u003d model.getModuleInfoList()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getModule(String.valueOf(editedModuleTaken.getModuleInfoCode()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (moduleInfo !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editedModuleTaken.setWorkload(new Workload(moduleInfo.getModuleInfoWorkload()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            //TODO fix the tests"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            //throw new CommandException(Messages.MESSAGE_MODULE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.setModuleTaken(moduleTakenToEdit, editedModuleTaken);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.commitGradTrak();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedModuleTaken));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Creates and returns a {@code ModuleTaken} with the details of {@code moduleTakenToEdit}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static ModuleTaken createEditedPerson(ModuleTaken moduleTakenToEdit,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                                  EditModuleTakenDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assert moduleTakenToEdit !\u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModuleInfoCode updatedName \u003d editPersonDescriptor.getModuleInfoCode()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .orElse(moduleTakenToEdit.getModuleInfoCode());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Semester updatedSemester \u003d editPersonDescriptor.getSemester().orElse(moduleTakenToEdit.getSemester());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Grade updatedExpectedMinGrade \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .getExpectedMinGrade().orElse(moduleTakenToEdit.getExpectedMinGrade());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Grade updatedExpectedMaxGrade \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .getExpectedMaxGrade().orElse(moduleTakenToEdit.getExpectedMaxGrade());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedLectureHour \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .getLectureHour().orElse(moduleTakenToEdit.getLectureHour());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedTutorialHour \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getTutorialHour().orElse(moduleTakenToEdit.getTutorialHour());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedLabHour \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getLabHour().orElse(moduleTakenToEdit.getLabHour());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedProjectHour \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getProjectHour().orElse(moduleTakenToEdit.getProjectHour());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedPreparationHour \u003d editPersonDescriptor"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getPreparationHour().orElse(moduleTakenToEdit.getPreparationHour());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Workload updatedWorkload \u003d new Workload(updatedLectureHour, updatedTutorialHour, updatedLabHour,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                updatedProjectHour, updatedPreparationHour);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(moduleTakenToEdit.getTags());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new ModuleTaken(updatedName, updatedSemester, updatedExpectedMinGrade, updatedExpectedMaxGrade,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                updatedWorkload, updatedTags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Stores the details to edit the moduleTaken with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * corresponding field value of the moduleTaken."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static class EditModuleTakenDescriptor {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        private ModuleInfoCode moduleInfoCode;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Semester semester;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Grade expectedMinGrade;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Grade expectedMaxGrade;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour lectureHour;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour tutorialHour;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour labHour;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour projectHour;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour preparationHour;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public EditModuleTakenDescriptor() {}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public EditModuleTakenDescriptor(EditModuleTakenDescriptor toCopy) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            setModuleInfoCode(toCopy.moduleInfoCode);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setSemester(toCopy.semester);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setExpectedMinGrade(toCopy.expectedMinGrade);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setExpectedMaxGrade(toCopy.expectedMaxGrade);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setLectureHour(toCopy.lectureHour);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setTutorialHour(toCopy.tutorialHour);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setLabHour(toCopy.labHour);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setProjectHour(toCopy.projectHour);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setPreparationHour(toCopy.preparationHour);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleInfoCode, semester, expectedMinGrade, expectedMaxGrade, tags);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void setModuleInfoCode(ModuleInfoCode moduleInfoCode) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.moduleInfoCode \u003d moduleInfoCode;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public Optional\u003cModuleInfoCode\u003e getModuleInfoCode() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.ofNullable(moduleInfoCode);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setSemester(Semester semester) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.semester \u003d semester;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cSemester\u003e getSemester() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(semester);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setExpectedMinGrade(Grade expectedMinGrade) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.expectedMinGrade \u003d expectedMinGrade;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cGrade\u003e getExpectedMinGrade() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(expectedMinGrade);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setExpectedMaxGrade(Grade expectedMaxGrade) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.expectedMaxGrade \u003d expectedMaxGrade;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cGrade\u003e getExpectedMaxGrade() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(expectedMaxGrade);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setLectureHour(Hour lectureHour) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.lectureHour \u003d lectureHour;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getLectureHour() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(lectureHour);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setTutorialHour(Hour tutorialHour) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.tutorialHour \u003d tutorialHour;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getTutorialHour() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(tutorialHour);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setLabHour(Hour labHour) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.labHour \u003d labHour;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getLabHour() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(labHour);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setProjectHour(Hour projectHour) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.projectHour \u003d projectHour;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getProjectHour() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(projectHour);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setPreparationHour(Hour preparationHour) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.preparationHour \u003d preparationHour;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getPreparationHour() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(preparationHour);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (!(other instanceof EditModuleTakenDescriptor)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            EditModuleTakenDescriptor e \u003d (EditModuleTakenDescriptor) other;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return getModuleInfoCode().equals(e.getModuleInfoCode())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getSemester().equals(e.getSemester())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getExpectedMinGrade().equals(e.getExpectedMinGrade())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getExpectedMaxGrade().equals(e.getExpectedMaxGrade())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getLectureHour().equals(e.getLectureHour())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getTutorialHour().equals(e.getTutorialHour())"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getLabHour().equals(e.getLabHour())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getProjectHour().equals(e.getProjectHour())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getPreparationHour().equals(e.getPreparationHour())"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 167,
      "monikernemo": 43,
      "alexchong711": 126,
      "lshwayne96": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.FindModulePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Finds {@code ModuleTaken} in {@code GradTrak} matching all given {@code ModuleInfoCode},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * {@code Semester}, {@code Grade} or finished status (case-insensitive)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds modules matching all given parameters.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + \"Parameters: [c/MODULE_CODE] [s/SEMESTER] [g/GRADE] [f/IS_FINISHED]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" s/y1s1 c/cs g/A f/y\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final FindModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindCommand(FindModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.descriptor \u003d descriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                String.format(Messages.MESSAGE_MODULETAKEN_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        model.getFilteredModulesTakenList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 descriptor.equals(((FindCommand) other).descriptor)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Stores details for finding a {@code ModuleTaken} in {@code GradTrak}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * There must be at least one filled field."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static class FindModuleDescriptor {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        private String subCode; // can be substring of exact code"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        private Semester semester;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        private Grade grade;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        private Boolean isFinished;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public FindModuleDescriptor() {}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public FindModuleDescriptor(FindModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            setSubCode(toCopy.subCode);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            setSemester(toCopy.semester);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            setGrade(toCopy.grade);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            setFinished(toCopy.isFinished);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public void setSubCode(String subCode) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            this.subCode \u003d subCode.toLowerCase();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public Optional\u003cString\u003e getSubCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return Optional.ofNullable(subCode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public void setSemester(Semester semester) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            this.semester \u003d semester;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public Optional\u003cSemester\u003e getSemester() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return Optional.ofNullable(semester);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            this.grade \u003d grade;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public Optional\u003cBoolean\u003e isFinished() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return Optional.ofNullable(isFinished);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public void setFinished(boolean isFinished) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            this.isFinished \u003d isFinished;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            String feedback \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (subCode !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                feedback +\u003d \"Code: \" + subCode + \" | \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (semester !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                feedback +\u003d \"Semester: \" + semester + \" | \";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (grade !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                feedback +\u003d \"Grade: \" + grade + \" | \";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (isFinished !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                feedback +\u003d \"Finished: \" + isFinished + \" | \";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return feedback;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public boolean equals(Object object) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (object \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (!(object instanceof FindModuleDescriptor)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            FindModuleDescriptor other \u003d (FindModuleDescriptor) object;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return getSubCode().equals(other.getSubCode())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    \u0026\u0026 getSemester().equals(other.getSemester())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    \u0026\u0026 getGrade().equals(other.getGrade())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    \u0026\u0026 isFinished().equals(other.isFinished());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "monikernemo": 7,
      "lshwayne96": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules in GradTrak\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "monikernemo": 1,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Lists modules that the user is recommended to take based on passed modules and course requirements."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class RecCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rec\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Recommends a list of modules that can be taken \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + \"based on GradTrak modules and course requirements.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_REC \u003d \"Recommended modules found: %d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        model.updateRecModuleList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REC, model.getRecModuleListSorted().size()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Generates a {@code String} representing a {@code List} of {@code RecModule}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param sortedList The {@code List} of {@code RecModule}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return The {@code String} stated above."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private static String generateResultString(ObservableList\u003cRecModule\u003e sortedList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        for (RecModule recModule : sortedList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            assert (recModule.getCourseReqType().isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            sb.append(recModule.getModuleInfoCode().toString())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    .append(\" \").append(recModule.getModuleInfoTitle())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    .append(\" [\").append(recModule.getCourseReqType().get().name()).append(\"]\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!model.canRedoGradTrak()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.redoGradTrak();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "monikernemo": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Selects a moduleTaken identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \": Selects the moduleTaken identified by the index number used in the displayed moduleTaken list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected ModuleTaken: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e filteredModuleTakenList \u003d model.getFilteredModulesTakenList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredModuleTakenList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.setSelectedModuleTaken(filteredModuleTakenList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "monikernemo": 7,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCourseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Adds a moduleTaken to the GradTrak."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SetCourseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"study\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"Sets the user\u0027s course. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"Computer Science Algorithms - sets course to Computer Science algorithm\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"Computer Science AI - sets course to Computer Science AI\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + \"Computer Science Software Eng - sets course to Computer Science Software Engineering\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Course is set to %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_CANNOT_FIND_COURSE \u003d \"Course %s is not found\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseName courseName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Sets course to specified {@code Course}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public SetCourseCommand(CourseName course) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(course);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseName \u003d course;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!model.hasCourse(courseName)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_CANNOT_FIND_COURSE, courseName));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.setCourse(courseName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, courseName));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                || (other instanceof SetCourseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 courseName.equals(((SetCourseCommand) other).courseName));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 19,
      "alexchong711": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCurrentSemesterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Sets the current semester of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SetCurrentSemesterCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cursem\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the current semester of the \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"user while ensuring all the grades have been finalized in the previous semesters.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"Parameters: SEMESTER \\n \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Y3S2 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_EDIT_LIMIT_SUCCESS \u003d \"Edited Semester: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param semester to set as the current semester"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SetCurrentSemesterCommand(Semester semester) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param semester to set as the current semester"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @return indication if the current list of modules taken have all the grades finalized before the given semester"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean checkGrades(List\u003cModuleTaken\u003e lastShownList, Semester semester) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            boolean isModuleTakenBeforeGivenSemester \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    lastShownList.get(i).getSemester().getIndex() \u003c semester.getIndex();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            boolean isModuleGradeFinalized \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    lastShownList.get(i).getExpectedMinGrade().equals(lastShownList.get(i).getExpectedMaxGrade());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (isModuleTakenBeforeGivenSemester \u0026\u0026 !isModuleGradeFinalized) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e lastShownList \u003d model.getFilteredModulesTakenList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        boolean hasValidGradesTillSemester \u003d checkGrades(lastShownList, semester);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!hasValidGradesTillSemester) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_GRADES_NOT_FINALIZED_BEFORE_SEMESTER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        model.setCurrentSemester(semester);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.commitGradTrak();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LIMIT_SUCCESS, semester));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!(other instanceof SetCurrentSemesterCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetCurrentSemesterCommand e \u003d (SetCurrentSemesterCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return semester.equals(e.semester);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 2,
      "alexchong711": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetSemLimitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_CAP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_LAB_HOUR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_CAP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_LAB_HOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_LECTURE_HOUR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PROJECT_HOUR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Edits the details of an semester grade and workload limits in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SetSemLimitCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setlimit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final int NUMSEM \u003d 10;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"Grade and Workload limits of a semester. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"Parameters: SEMESTER \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MIN_CAP + \"MIN CAP] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MAX_CAP + \"MAX CAP] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MIN_LECTURE_HOUR + \"LECTURE HOUR] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MAX_LECTURE_HOUR + \"LECTURE HOUR] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MIN_TUTORIAL_HOUR + \"TUTORIAL HOUR] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MAX_TUTORIAL_HOUR + \"TUTORIAL HOUR] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MIN_LAB_HOUR + \"LAB HOUR] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MAX_LAB_HOUR + \"LAB HOUR] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MIN_PROJECT_HOUR + \"PROJECT HOUR] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MAX_PROJECT_HOUR + \"PROJECT HOUR] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MIN_PREPARATION_HOUR + \"PREPARATION HOUR] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"[\" + PREFIX_MAX_PREPARATION_HOUR + \"PREPARATION HOUR]...\\n \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Y3S1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_CAP + \"3.27 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_LAB_HOUR + \"2.5\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_EDIT_LIMIT_SUCCESS \u003d \"Edited Semester: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final EditSemLimitDescriptor editSemLimitDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param index of the moduleTaken in the filtered moduleTaken list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param editLimitDescriptor details to edit the moduleTaken with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SetSemLimitCommand(Index index, EditSemLimitDescriptor editLimitDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(editLimitDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.editSemLimitDescriptor \u003d new EditSemLimitDescriptor(editLimitDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        List\u003cSemLimit\u003e lastShownList \u003d model.getSemLimitList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d NUMSEM) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SEMESTER_LIMIT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit semLimitToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit editedSemLimit \u003d createEditedLimit(semLimitToEdit, editSemLimitDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        model.setSemesterLimit(index.getZeroBased(), editedSemLimit);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.commitGradTrak();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LIMIT_SUCCESS, editedSemLimit));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Creates and returns a {@code SemLimit} with the details of {@code semLimitToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * edited with {@code EditSemLimitDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static SemLimit createEditedLimit(SemLimit semLimitToEdit,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                                  EditSemLimitDescriptor editSemLimitDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assert semLimitToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage updatedMinCap \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMinCap().orElse(semLimitToEdit.getMinCap());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage updatedMaxCap \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMaxCap().orElse(semLimitToEdit.getMaxCap());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMinLectureHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMinLectureHour().orElse(semLimitToEdit.getMinLectureHour());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMaxLectureHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMaxLectureHour().orElse(semLimitToEdit.getMaxLectureHour());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMinTutorialHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMinTutorialHour().orElse(semLimitToEdit.getMinTutorialHour());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMaxTutorialHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMaxTutorialHour().orElse(semLimitToEdit.getMaxTutorialHour());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMinLabHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMinLabHour().orElse(semLimitToEdit.getMinLabHour());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMaxLabHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMaxLabHour().orElse(semLimitToEdit.getMaxLabHour());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMinProjectHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMinProjectHour().orElse(semLimitToEdit.getMinProjectHour());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMaxProjectHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMaxProjectHour().orElse(semLimitToEdit.getMaxProjectHour());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMinPreparationHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMinPreparationHour().orElse(semLimitToEdit.getMinPreparationHour());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour updatedMaxPreparationHour \u003d editSemLimitDescriptor"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .getMaxPreparationHour().orElse(semLimitToEdit.getMaxPreparationHour());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new SemLimit(updatedMinCap, updatedMaxCap,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                updatedMinLectureHour, updatedMaxLectureHour, updatedMinTutorialHour, updatedMaxTutorialHour,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                updatedMinLabHour, updatedMaxLabHour, updatedMinProjectHour, updatedMaxProjectHour,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                updatedMinPreparationHour, updatedMaxPreparationHour);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!(other instanceof SetSemLimitCommand)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand e \u003d (SetSemLimitCommand) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 editSemLimitDescriptor.equals(e.editSemLimitDescriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Stores the details to edit the limit with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * corresponding field value of the limit."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static class EditSemLimitDescriptor {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private CapAverage minCap;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private CapAverage maxCap;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour minLectureHour;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour maxLectureHour;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour minTutorialHour;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour maxTutorialHour;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour minLabHour;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour maxLabHour;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour minProjectHour;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour maxProjectHour;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour minPreparationHour;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        private Hour maxPreparationHour;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public EditSemLimitDescriptor() {}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "         */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public EditSemLimitDescriptor(EditSemLimitDescriptor toCopy) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMinCap(toCopy.minCap);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMaxCap(toCopy.maxCap);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMinLectureHour(toCopy.minLectureHour);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMaxLectureHour(toCopy.maxLectureHour);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMinTutorialHour(toCopy.minTutorialHour);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMaxTutorialHour(toCopy.maxTutorialHour);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMinLabHour(toCopy.minLabHour);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMaxLabHour(toCopy.maxLabHour);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMinProjectHour(toCopy.minProjectHour);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMaxProjectHour(toCopy.maxProjectHour);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMinPreparationHour(toCopy.minPreparationHour);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            setMaxPreparationHour(toCopy.maxPreparationHour);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return CollectionUtil.isAnyNonNull(minCap, maxCap, minLectureHour, maxLectureHour,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    minTutorialHour, maxTutorialHour, minLabHour, maxLabHour, minProjectHour, maxProjectHour,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    minPreparationHour, maxPreparationHour);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMinCap(CapAverage minCap) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.minCap \u003d minCap;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cCapAverage\u003e getMinCap() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(minCap);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMaxCap(CapAverage maxCap) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.maxCap \u003d maxCap;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cCapAverage\u003e getMaxCap() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(maxCap);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMinLectureHour(Hour minLectureHour) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.minLectureHour \u003d minLectureHour;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMinLectureHour() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(minLectureHour);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMaxLectureHour(Hour maxLectureHour) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.maxLectureHour \u003d maxLectureHour;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMaxLectureHour() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(maxLectureHour);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMinTutorialHour(Hour minTutorialHour) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.minTutorialHour \u003d minTutorialHour;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMinTutorialHour() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(minTutorialHour);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMaxTutorialHour(Hour maxTutorialHour) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.maxTutorialHour \u003d maxTutorialHour;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMaxTutorialHour() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(maxTutorialHour);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMinLabHour(Hour minLabHour) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.minLabHour \u003d minLabHour;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMinLabHour() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(minLabHour);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMaxLabHour(Hour maxLabHour) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.maxLabHour \u003d maxLabHour;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMaxLabHour() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(maxLabHour);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMinProjectHour(Hour minProjectHour) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.minProjectHour \u003d minProjectHour;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMinProjectHour() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(minProjectHour);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMaxProjectHour(Hour maxProjectHour) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.maxProjectHour \u003d maxProjectHour;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMaxProjectHour() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(maxProjectHour);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMinPreparationHour(Hour minPreparationHour) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.minPreparationHour \u003d minPreparationHour;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMinPreparationHour() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(minPreparationHour);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setMaxPreparationHour(Hour maxPreparationHour) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            this.maxPreparationHour \u003d maxPreparationHour;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Optional\u003cHour\u003e getMaxPreparationHour() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Optional.ofNullable(maxPreparationHour);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (!(other instanceof EditSemLimitDescriptor)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            EditSemLimitDescriptor e \u003d (EditSemLimitDescriptor) other;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return getMinCap().equals(e.getMinCap())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMaxCap().equals(e.getMaxCap())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMinLectureHour().equals(e.getMinLectureHour())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMaxLectureHour().equals(e.getMaxLectureHour())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMinTutorialHour().equals(e.getMinTutorialHour())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMaxTutorialHour().equals(e.getMaxTutorialHour())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMinLabHour().equals(e.getMinLabHour())"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMaxLabHour().equals(e.getMaxLabHour())"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMinProjectHour().equals(e.getMinProjectHour())"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMaxProjectHour().equals(e.getMaxProjectHour())"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMinPreparationHour().equals(e.getMinPreparationHour())"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 getMaxPreparationHour().equals(e.getMaxPreparationHour());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 321
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!model.canUndoGradTrak()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.undoGradTrak();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "monikernemo": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MAX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MIN_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LAB_HOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Workload;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Grade DEFAULT_MIN_GRADE \u003d Grade.valueOf(\"F\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Grade DEFAULT_MAX_GRADE \u003d Grade.valueOf(\"A\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Hour DEFAULT_WORKLOAD_HOUR \u003d new Hour(\"0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_INFO_CODE, PREFIX_SEMESTER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_EXPECTED_MIN_GRADE, PREFIX_EXPECTED_MAX_GRADE, PREFIX_LECTURE_HOUR, PREFIX_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_LAB_HOUR, PREFIX_PROJECT_HOUR, PREFIX_PREPARATION_HOUR, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_INFO_CODE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleInfoCode name \u003d ParserUtil.moduleInfoCode(argMultimap.getValue(PREFIX_MODULE_INFO_CODE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester semester \u003d ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Grade expectedMinGrade \u003d DEFAULT_MIN_GRADE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_EXPECTED_MIN_GRADE)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            expectedMinGrade \u003d ParserUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    .parseGrade(argMultimap.getValue(PREFIX_EXPECTED_MIN_GRADE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Grade expectedMaxGrade \u003d DEFAULT_MAX_GRADE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_EXPECTED_MAX_GRADE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            expectedMaxGrade \u003d ParserUtil"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    .parseGrade(argMultimap.getValue(PREFIX_EXPECTED_MAX_GRADE).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour lectureHour \u003d DEFAULT_WORKLOAD_HOUR;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_LECTURE_HOUR)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            lectureHour \u003d ParserUtil"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    .parseHour(argMultimap.getValue(PREFIX_LECTURE_HOUR).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour tutorialHour \u003d DEFAULT_WORKLOAD_HOUR;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TUTORIAL_HOUR)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            tutorialHour \u003d ParserUtil"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    .parseHour(argMultimap.getValue(PREFIX_TUTORIAL_HOUR).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour labHour \u003d DEFAULT_WORKLOAD_HOUR;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_LAB_HOUR)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            labHour \u003d ParserUtil"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    .parseHour(argMultimap.getValue(PREFIX_LAB_HOUR).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour projectHour \u003d DEFAULT_WORKLOAD_HOUR;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PROJECT_HOUR)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            projectHour \u003d ParserUtil"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    .parseHour(argMultimap.getValue(PREFIX_PROJECT_HOUR).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour preparationHour \u003d DEFAULT_WORKLOAD_HOUR;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PREPARATION_HOUR)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            preparationHour \u003d ParserUtil"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    .parseHour(argMultimap.getValue(PREFIX_PREPARATION_HOUR).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Workload workload \u003d new Workload(lectureHour, tutorialHour, labHour, projectHour, preparationHour);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTaken \u003d new ModuleTaken(name, semester, expectedMinGrade,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                expectedMaxGrade, workload, tagList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new AddCommand(moduleTaken);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "monikernemo": 11,
      "alexchong711": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Prefix PREFIX_MODULE_INFO_CODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_EXPECTED_MIN_GRADE \u003d new Prefix(\"ming/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_EXPECTED_MAX_GRADE \u003d new Prefix(\"maxg/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MIN_CAP \u003d new Prefix(\"mincap/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MAX_CAP \u003d new Prefix(\"maxcap/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MIN_LECTURE_HOUR \u003d new Prefix(\"minlec/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MAX_LECTURE_HOUR \u003d new Prefix(\"maxlec/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MIN_TUTORIAL_HOUR \u003d new Prefix(\"mintut/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MAX_TUTORIAL_HOUR \u003d new Prefix(\"maxtut/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MIN_LAB_HOUR \u003d new Prefix(\"minlab/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MAX_LAB_HOUR \u003d new Prefix(\"maxlab/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MIN_PROJECT_HOUR \u003d new Prefix(\"minproj/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MAX_PROJECT_HOUR \u003d new Prefix(\"maxproj/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MIN_PREPARATION_HOUR \u003d new Prefix(\"minprep/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Prefix PREFIX_MAX_PREPARATION_HOUR \u003d new Prefix(\"maxprep/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_LECTURE_HOUR \u003d new Prefix(\"lec/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_TUTORIAL_HOUR \u003d new Prefix(\"tut/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_LAB_HOUR \u003d new Prefix(\"lab/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_HOUR \u003d new Prefix(\"proj/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_PREPARATION_HOUR \u003d new Prefix(\"prep/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_FINISHED \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Prefix PREFIX_UNFULFILLED \u003d new Prefix((\"u/\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /*Prefix related to finding Module Information */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final Prefix PREFIX_MODCODE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Prefix PREFIX_MODNAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 2,
      "-": 11,
      "monikernemo": 2,
      "alexchong711": 15,
      "lshwayne96": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DisplaymodCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODCODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.logic.commands.DisplaymodCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.CodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Parses input arguments and creates a new DisplaymodCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class DisplaymodCommandParser implements Parser\u003cDisplaymodCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final String MODULECODE_REGEX \u003d \".*?[a-zA-Z]{2,3}\\\\d{4}[a-zA-Z]{0,3}.*?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final String MODULETITLE_REGX \u003d \".*?[a-zA-Z].*?\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisplaymodCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * and returns an DisplaymodCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public DisplaymodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MODCODE, PREFIX_MODNAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_MODCODE, PREFIX_MODNAME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplaymodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ArrayList\u003cString\u003e keywordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_MODCODE).isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String codes \u003d argumentMultimap.getValue(PREFIX_MODCODE).get().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String[] tester \u003d codes.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (tester.length \u003e 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        DisplaymodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (!codes.matches(MODULECODE_REGEX)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        DisplaymodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String[] codesKeyword \u003d codes.split(\",\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            Stream.of(codesKeyword).forEach(code -\u003e keywordsList.add(code));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (argumentMultimap.getValue(PREFIX_MODNAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String names \u003d argumentMultimap.getValue(PREFIX_MODNAME).get().trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String [] tester \u003d names.split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (tester.length \u003e 1 || !names.matches(MODULETITLE_REGX)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        DisplaymodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                keywordsList.add(names);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String[] keywords \u003d keywordsList.toArray(new String[keywordsList.size()]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return new DisplaymodCommand(new CodeContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MAX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MIN_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LAB_HOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleTakenDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_INFO_CODE, PREFIX_SEMESTER,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_EXPECTED_MIN_GRADE, PREFIX_EXPECTED_MAX_GRADE, PREFIX_LECTURE_HOUR, PREFIX_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_LAB_HOUR, PREFIX_PROJECT_HOUR, PREFIX_PREPARATION_HOUR, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor editPersonDescriptor \u003d new EditCommand.EditModuleTakenDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_INFO_CODE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            editPersonDescriptor.setModuleInfoCode("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    ParserUtil.moduleInfoCode(argMultimap.getValue(PREFIX_MODULE_INFO_CODE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEMESTER).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editPersonDescriptor.setSemester(ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPECTED_MIN_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editPersonDescriptor.setExpectedMinGrade("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseGrade(argMultimap.getValue(PREFIX_EXPECTED_MIN_GRADE).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPECTED_MAX_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            editPersonDescriptor.setExpectedMaxGrade("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseGrade(argMultimap.getValue(PREFIX_EXPECTED_MAX_GRADE).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LECTURE_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editPersonDescriptor.setLectureHour("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_LECTURE_HOUR).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TUTORIAL_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editPersonDescriptor.setTutorialHour("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_TUTORIAL_HOUR).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LAB_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editPersonDescriptor.setLabHour("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_LAB_HOUR).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PROJECT_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editPersonDescriptor.setProjectHour("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_PROJECT_HOUR).get()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PREPARATION_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editPersonDescriptor.setPreparationHour("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_PREPARATION_HOUR).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "monikernemo": 6,
      "alexchong711": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINISHED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODCODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Parses input arguments and creates a new {@code FindCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of {@code FindCommand}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * and returns a {@code FindCommand} object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODCODE, PREFIX_SEMESTER, PREFIX_GRADE, PREFIX_FINISHED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor findModuleDescriptor \u003d new FindModuleDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODCODE).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            findModuleDescriptor.setSubCode(argMultimap.getValue(PREFIX_MODCODE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEMESTER).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            findModuleDescriptor.setSemester(ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GRADE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            findModuleDescriptor.setGrade(ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FINISHED).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            findModuleDescriptor"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    .setFinished(ParserUtil.parseFinishedStatus(argMultimap.getValue(PREFIX_FINISHED).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return new FindCommand(findModuleDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "lshwayne96": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradTrakParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.CheckLimitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.logic.commands.DisplaymodCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.logic.commands.DisplayreqCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.RecCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "import seedu.address.logic.commands.SetCourseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetCurrentSemesterCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetSemLimitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class GradTrakParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        case SetCourseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "            return new SetCourseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case SetSemLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return new SetLimitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case SetCurrentSemesterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return new SetCurrentSemesterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        case RecCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return new RecCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case CheckLimitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return new CheckLimitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        case DisplaymodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            return new DisplaymodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case DisplayreqCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new DisplayreqCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 4,
      "crumpledpaper": 4,
      "-": 91,
      "monikernemo": 5,
      "alexchong711": 12,
      "lshwayne96": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String FINISHED_STATUS_TRUE \u003d \"y\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Parses a {@code String moduleInfoCode} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws ParseException if the given {@code moduleInfoCode} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static ModuleInfoCode moduleInfoCode(String moduleInfoCode) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(moduleInfoCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String trimmedName \u003d moduleInfoCode.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!ModuleInfoCode.isValidModuleInfoCode(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new ParseException(ModuleInfoCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new ModuleInfoCode(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "     * Parses a {@code String courseName} into a {@code CourseName}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "     * @throws ParseException if the given {@code courseName} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "    public static CourseName parseCourseName(String courseName) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        String trimmedCourseName \u003d courseName.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        if (!CourseName.isValidCourseName(trimmedCourseName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "            throw new ParseException(CourseName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        return new CourseName(trimmedCourseName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses a {@code String semester} into a {@code Semester}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @throws ParseException if the given {@code semester} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static Semester parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String trimmedSemester \u003d semester.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Semester.isValidSemesterForTakingModules(trimmedSemester)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new ParseException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return Semester.valueOf(trimmedSemester);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses a {@code String grade} into an {@code Grade}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static Grade parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String trimmedGrade \u003d grade.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return Grade.getGrade(trimmedGrade);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses a {@code String hour} into an {@code Hour}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @throws ParseException if the given {@code Hour} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static Hour parseHour(String hour) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String trimmedHour \u003d hour.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Hour.isValidHour(trimmedHour)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new ParseException(Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new Hour(trimmedHour);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses a {@code String cap} into an {@code CapAverage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @throws ParseException if the given {@code CapAverage} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static CapAverage parseCap(String cap) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(cap);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String trimmedCap \u003d cap.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!CapAverage.isValidCapAverage(trimmedCap)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new ParseException(CapAverage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new CapAverage(Double.parseDouble(trimmedCap));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Parses a {@code finishedStatus} string into a boolean."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param finishedStatus Any string."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if the string is \"y\" (case-insensitive), false otherwise."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static boolean parseFinishedStatus(String finishedStatus) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireNonNull(finishedStatus);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return finishedStatus.trim().toLowerCase().equals(FINISHED_STATUS_TRUE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Converts a boolean to a String representing the corresponding finished status."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param isFinished The finished status."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return \"y\" if isFinished, \"n\" otherwise."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static String booleanToFinishedStatus(boolean isFinished) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return \"n\"; // can be any string other than \"y\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crumpledpaper": 9,
      "-": 97,
      "monikernemo": 12,
      "alexchong711": 38,
      "lshwayne96": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCourseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "import seedu.address.logic.commands.SetCourseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": " * Parses input arguments and creates a new SetCourseCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "public class SetCourseCommandParser implements Parser\u003cSetCourseCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCourseCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "     * and returns an SetCourseCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "    public SetCourseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            CourseName courseName \u003d ParserUtil.parseCourseName(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new SetCourseCommand(courseName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCourseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crumpledpaper": 26,
      "monikernemo": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCurrentSemesterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetCurrentSemesterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Parses input arguments and creates a new SetLimitCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SetCurrentSemesterCommandParser implements Parser\u003cSetCurrentSemesterCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetLimitCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * and returns an SetLimitCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SetCurrentSemesterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String rawSemester \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Semester.isValidSemester(rawSemester)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    SetCurrentSemesterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        semester \u003d Semester.valueOf(rawSemester);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new SetCurrentSemesterCommand(semester);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetLimitCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_CAP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_LAB_HOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_CAP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_LAB_HOUR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_LECTURE_HOUR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PROJECT_HOUR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetSemLimitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetSemLimitCommand.EditSemLimitDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Parses input arguments and creates a new SetLimitCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SetLimitCommandParser implements Parser\u003cSetSemLimitCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetLimitCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * and returns an SetLimitCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SetSemLimitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_MIN_CAP, PREFIX_MAX_CAP, PREFIX_MIN_LECTURE_HOUR, PREFIX_MAX_LECTURE_HOUR,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_MIN_TUTORIAL_HOUR, PREFIX_MAX_TUTORIAL_HOUR, PREFIX_MIN_LAB_HOUR,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_MAX_LAB_HOUR, PREFIX_MIN_PROJECT_HOUR, PREFIX_MAX_PROJECT_HOUR,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        PREFIX_MIN_PREPARATION_HOUR, PREFIX_MAX_PREPARATION_HOUR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String rawSemester \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        boolean isValidSemester \u003d Semester.isValidSemesterForTakingModules(rawSemester);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!isValidSemester) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    SetSemLimitCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        int zeroBasedIndex \u003d Semester.valueOf(rawSemester).getIndex();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        index \u003d ParserUtil.parseIndex(String.valueOf(++zeroBasedIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditSemLimitDescriptor editSemLimitDescriptor \u003d new EditSemLimitDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MIN_CAP).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMinCap("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseCap(argMultimap.getValue(PREFIX_MIN_CAP).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_CAP).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMaxCap("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseCap(argMultimap.getValue(PREFIX_MAX_CAP).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MIN_LECTURE_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMinLectureHour("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MIN_LECTURE_HOUR).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_LECTURE_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMaxLectureHour("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MAX_LECTURE_HOUR).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MIN_TUTORIAL_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMinTutorialHour("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MIN_TUTORIAL_HOUR).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_TUTORIAL_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMaxTutorialHour("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MAX_TUTORIAL_HOUR).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MIN_LAB_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMinLabHour("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MIN_LAB_HOUR).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_LAB_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMaxLabHour("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MAX_LAB_HOUR).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MIN_PROJECT_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMinProjectHour("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MIN_PROJECT_HOUR).get()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_PROJECT_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMaxProjectHour("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MAX_PROJECT_HOUR).get()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MIN_PREPARATION_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMinPreparationHour("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MIN_PREPARATION_HOUR).get()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MAX_PREPARATION_HOUR).isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            editSemLimitDescriptor.setMaxPreparationHour("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    ParserUtil.parseHour(argMultimap.getValue(PREFIX_MAX_PREPARATION_HOUR).get()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!editSemLimitDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new ParseException(SetSemLimitCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new SetSemLimitCommand(index, editSemLimitDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Cap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents CAP (Cumulative Average Grade) of the user in the system"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class Cap {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            \"CAP should be 2 decimal places from 0 to 5\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private double cap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Constructs a {@code Cap}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param cap A valid cap value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Cap(String cap) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(cap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        checkArgument(isValidCap(cap), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.cap \u003d Double.parseDouble(cap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if a given string is a valid cap value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static boolean isValidCap(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                || (other instanceof Cap // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 cap \u003d\u003d ((Cap) other).cap); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 3,
      "alexchong711": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ClassForPrinting.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Class for printing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public interface ClassForPrinting {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    String getPrintable();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EligibleModulePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Tests if a module can be taken by a user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class EligibleModulePredicate implements Predicate\u003cModuleInfoCode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final GradTrak gradTrak;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public EligibleModulePredicate(GradTrak gradTrak) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.gradTrak \u003d gradTrak;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean test(ModuleInfoCode moduleInfoCode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (gradTrak.getNonFailedCodeList().contains(moduleInfoCode)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        //TODO: check prerequisites and preclusions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/GradTrak.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.SemesterLimitList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.UniqueModuleTakenList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Duplicates are not allowed (by .isSameModuleTaken comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class GradTrak implements ReadOnlyGradTrak {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final int NUM_SEMS \u003d 10;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Semester currentSemester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final SemesterLimitList semesterLimitList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final UniqueModuleTakenList modulesTaken;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modulesTaken \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        semesterLimitList \u003d new SemesterLimitList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public GradTrak() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        List\u003cSemLimit\u003e semList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int i \u003d 0; i \u003c NUM_SEMS; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semList.add(new SemLimit(new CapAverage(2.0), new CapAverage(5.0), new Hour(\"5.0\"), new Hour(\"9.0\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    new Hour(\"2.5\"), new Hour(\"5.0\"), new Hour(\"2.0\"), new Hour(\"5.0\"), new Hour(\"2.0\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    new Hour(\"5.0\"), new Hour(\"6.0\"), new Hour(\"10.0\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        setSemesterLimits(semList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        setCurrentSemester(Semester.Y1S1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Creates an GradTrak using the ModulesTaken in the {@code toBeCopied}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public GradTrak(ReadOnlyGradTrak toBeCopied) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Semester getCurrentSemester() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return currentSemester;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Replaces the contents of the moduleTaken list with {@code ModuleTaken}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code ModuleTaken} must not contain duplicate modulesTaken."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void setModulesTaken(List\u003cModuleTaken\u003e modulesTaken) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.modulesTaken.setPersons(modulesTaken);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Replaces the contents of the Semester Limit list with {@code semLimits}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSemesterLimits(List\u003cSemLimit\u003e semLimits) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semesterLimitList.setSemesterLimits(semLimits);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Resets the existing data of this {@code GradTrak} with {@code newData}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void resetData(ReadOnlyGradTrak newData) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        setModulesTaken(newData.getModulesTakenList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        setSemesterLimits(newData.getSemesterLimitList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        setCurrentSemester(newData.getCurrentSemester());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //// moduleTaken-level operations"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns true if a {@code ModuleTaken} in GradTrak has the same identity as the given {@code ModuleTaken}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean hasModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(moduleTaken);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return modulesTaken.contains(moduleTaken);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Adds a moduleTaken to GradTrak."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * The moduleTaken must not already exist in the GradTrak."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void addModuleTaken(ModuleTaken p) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modulesTaken.add(p);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Replaces the given moduleTaken {@code target} in the list with {@code editedModuleTaken}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * The moduleTaken identity of {@code editedModuleTaken} must not be the same as another"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * existing moduleTaken in the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setModuleTaken(ModuleTaken target, ModuleTaken editedModuleTaken) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(editedModuleTaken);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modulesTaken.setPerson(target, editedModuleTaken);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Replaces the given index of semester limit with {@code editedSemesterLimit}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSemesterLimit(int index, SemLimit editedSemesterLimit) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(editedSemesterLimit);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        semesterLimitList.setSemesterLimit(index, editedSemesterLimit);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Replaces the given index of semester limit with {@code editedSemesterLimit}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setCurrentSemester(Semester semester) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.currentSemester \u003d semester;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Removes {@code key} from this {@code GradTrak}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void removeModuleTaken(ModuleTaken key) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modulesTaken.remove(key);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns a {@code List} of {@code ModuleInfoCode} representing non-failed {@code ModuleTaken}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return a {@code List} of {@code ModuleInfoCode} representing non-failed {@code ModuleTaken}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public List\u003cModuleInfoCode\u003e getNonFailedCodeList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        List\u003cModuleInfoCode\u003e codeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        for (ModuleTaken moduleTaken : getModulesTakenList()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (!moduleTaken.isFailed(currentSemester)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                codeList.add(moduleTaken.getModuleInfoCode());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return codeList;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return modulesTaken.asUnmodifiableObservableList().size() + \" modulesTaken\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cModuleTaken\u003e getModulesTakenList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return modulesTaken.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ObservableList\u003cSemLimit\u003e getSemesterLimitList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return semesterLimitList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                || (other instanceof GradTrak // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 modulesTaken.equals(((GradTrak) other).modulesTaken));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return modulesTaken.hashCode();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "monikernemo": 35,
      "lshwayne96": 27,
      "alexchong711": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/LimitChecker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCredits;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Checks the CAP and Workload limits set by the user for every semester against the modules the user plans to take."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class LimitChecker implements ClassForPrinting {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final double DEFAULT_MODULE_CREDITS \u003d 4;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final int CAP_TABLE_COL_COUNT \u003d 4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final int WORKLOAD_TABLE_ROW_COUNT \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final int WORKLOAD_TABLE_COL_COUNT \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String checkedReport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns a generated html string that shows where their CAP and workload limits are violated."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param currentSemester the current semester when running the limit checker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param semLimits the current semester limits of the user when running the limit checker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param modulesTaken the current modules taken of the user when running the limit checker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param moduleInfoList the full list of ModuleInfo for checking the modules credits of each module"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public LimitChecker(Semester currentSemester, ObservableList\u003cSemLimit\u003e semLimits,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                    ObservableList\u003cModuleTaken\u003e modulesTaken, ModuleInfoList moduleInfoList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage currentCap \u003d new CapAverage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage cumulativeMinCap \u003d new CapAverage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage cumulativeMaxCap \u003d new CapAverage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage[][] minMaxCapAveragesPerSem \u003d new CapAverage[semLimits.size()][2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int i \u003d 0; i \u003c minMaxCapAveragesPerSem.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            for (int j \u003d 0; j \u003c minMaxCapAveragesPerSem[i].length; j++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                minMaxCapAveragesPerSem[i][j] \u003d new CapAverage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        double[][] semesterSums \u003d new double[semLimits.size()][5];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int mod \u003d 0; mod \u003c modulesTaken.size(); mod++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            ModuleInfoCredits modCredits \u003d new ModuleInfoCredits(DEFAULT_MODULE_CREDITS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            ModuleInfo moduleInfo \u003d moduleInfoList.getModule(String.valueOf(modulesTaken.get(mod).getModuleInfoCode()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (moduleInfo !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                modCredits \u003d new ModuleInfoCredits(moduleInfo.getCredits());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (modulesTaken.get(mod).getExpectedMinGrade().isCountedInCap()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                minMaxCapAveragesPerSem[modulesTaken.get(mod).getSemester().getIndex()][0].addWeightedGrade("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        modulesTaken.get(mod).getExpectedMinGrade().getGradePoint(), modCredits);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                cumulativeMinCap.addWeightedGrade("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        modulesTaken.get(mod).getExpectedMinGrade().getGradePoint(), modCredits);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (modulesTaken.get(mod).getExpectedMaxGrade().isCountedInCap()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                minMaxCapAveragesPerSem[modulesTaken.get(mod).getSemester().getIndex()][1].addWeightedGrade("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        modulesTaken.get(mod).getExpectedMaxGrade().getGradePoint(), modCredits);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                cumulativeMaxCap.addWeightedGrade("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        modulesTaken.get(mod).getExpectedMaxGrade().getGradePoint(), modCredits);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (modulesTaken.get(mod).isFinished(currentSemester)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    \u0026\u0026 modulesTaken.get(mod).getExpectedMinGrade().isCountedInCap()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                currentCap.addWeightedGrade(modulesTaken.get(mod).getExpectedMinGrade().getGradePoint(), modCredits);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semesterSums[modulesTaken.get(mod).getSemester().getIndex()][0] +\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    modulesTaken.get(mod).getLectureHour().getHour();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semesterSums[modulesTaken.get(mod).getSemester().getIndex()][1] +\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    modulesTaken.get(mod).getLectureHour().getHour();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semesterSums[modulesTaken.get(mod).getSemester().getIndex()][2] +\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    modulesTaken.get(mod).getLectureHour().getHour();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semesterSums[modulesTaken.get(mod).getSemester().getIndex()][3] +\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    modulesTaken.get(mod).getLectureHour().getHour();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semesterSums[modulesTaken.get(mod).getSemester().getIndex()][4] +\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    modulesTaken.get(mod).getLectureHour().getHour();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        double[] cumulativeMinCurrentMaxCap \u003d new double[3];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        cumulativeMinCurrentMaxCap[0] \u003d cumulativeMinCap.getCapLimit();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        cumulativeMinCurrentMaxCap[1] \u003d currentCap.getCapLimit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        cumulativeMinCurrentMaxCap[2] \u003d cumulativeMaxCap.getCapLimit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        double[][] capTable \u003d new double[semLimits.size()][CAP_TABLE_COL_COUNT];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int sem \u003d 0; sem \u003c semLimits.size(); sem++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            capTable[sem][0] \u003d semLimits.get(sem).getMinCap().getCapLimit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            capTable[sem][1] \u003d minMaxCapAveragesPerSem[sem][0].getCapLimit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            capTable[sem][2] \u003d minMaxCapAveragesPerSem[sem][1].getCapLimit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            capTable[sem][3] \u003d semLimits.get(sem).getMaxCap().getCapLimit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        double[][] workloadTable \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new double[semLimits.size() * WORKLOAD_TABLE_ROW_COUNT][WORKLOAD_TABLE_COL_COUNT];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int sem \u003d 0; sem \u003c semLimits.size(); sem++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            int rowIndexOffSet \u003d sem * WORKLOAD_TABLE_ROW_COUNT;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet][0] \u003d semLimits.get(sem).getMinLectureHour().getHour();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet][1] \u003d semesterSums[sem][0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet][2] \u003d semLimits.get(sem).getMaxLectureHour().getHour();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 1][0] \u003d semLimits.get(sem).getMinTutorialHour().getHour();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 1][1] \u003d semesterSums[sem][1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 1][2] \u003d semLimits.get(sem).getMaxTutorialHour().getHour();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 2][0] \u003d semLimits.get(sem).getMinLabHour().getHour();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 2][1] \u003d semesterSums[sem][2];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 2][2] \u003d semLimits.get(sem).getMaxLabHour().getHour();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 3][0] \u003d semLimits.get(sem).getMinProjectHour().getHour();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 3][1] \u003d semesterSums[sem][3];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 3][2] \u003d semLimits.get(sem).getMaxProjectHour().getHour();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 4][0] \u003d semLimits.get(sem).getMinPreparationHour().getHour();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 4][1] \u003d semesterSums[sem][4];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            workloadTable[rowIndexOffSet + 4][2] \u003d semLimits.get(sem).getMaxPreparationHour().getHour();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.checkedReport \u003d generateHtmlLimits(currentSemester, cumulativeMinCurrentMaxCap, capTable, workloadTable);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Puts the computed cap and workload limits together with the current module plan expectations"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * into a table for display"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param currentSemester the current semester set by the user"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param cumulativeMinCurrentMaxCap a table with the current CAP and the minimum and maximum expected CAP"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param capTable a table with the minimum and maximum CAP limits and the minimum and maximum expected CAP"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *                 for each semester"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param workloadTable a table with the minimum and maximum workload limits and the expected workload"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *                      for each semester"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @return a html string that shows where their CAP and workload limits are violated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static String generateHtmlLimits(Semester currentSemester, double[] cumulativeMinCurrentMaxCap,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                     double[][] capTable, double[][] workloadTable) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final StringBuilder htmlLimits \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cspan\u003eCurrent Semester: \" + currentSemester.toString() + \"\u003c/span\u003e\u003cbr\u003e\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctable border\u003d\u00271\u0027\u003e\\n\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003eMinimum CAP for graduation\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003eCAP as of current semester\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003eMaximum CAP for graduation\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctd\u003e\" + cumulativeMinCurrentMaxCap[0] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctd\u003e\" + cumulativeMinCurrentMaxCap[1] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctd\u003e\" + cumulativeMinCurrentMaxCap[2] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003c/table\u003e\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cbr\u003e\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctable border\u003d\u00271\u0027\u003e\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003e\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003eMinimum semester CAP limit\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003eMinimum expected semester CAP\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003eMaximum expected semester CAP\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cth\u003eMaximum semester CAP limit\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int sem \u003d 0; sem \u003c capTable.length; sem++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + Semester.getSemesterByZeroIndex(sem).toString() + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + capTable[sem][0] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + capTable[sem][1] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + capTable[sem][2] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + capTable[sem][3] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003c/table\u003e\\n\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        htmlLimits.append(\"\u003cbr\u003e\\n\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int sem \u003d 0; sem \u003c workloadTable.length / WORKLOAD_TABLE_ROW_COUNT; sem++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            int rowIndexOffSet \u003d sem * WORKLOAD_TABLE_ROW_COUNT;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctable border\u003d\u00271\u0027\u003e\\n\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003cth\u003e\" + Semester.getSemesterByZeroIndex(sem).toString() + \"\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003cth\u003eMinimum workload hours\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003cth\u003eCurrent workload hours\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003cth\u003eMaximum workload hours\u003c/th\u003e\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003eLecture hours\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet][0] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet][1] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet][2] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003eTutorial hours\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 1][0] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 1][1] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 1][2] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003eLab hours\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 2][0] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 2][1] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 2][2] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003eProject hours\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 3][0] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 3][1] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 3][2] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctr\u003e\\n\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003ePreparation hours\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 4][0] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 4][1] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003ctd\u003e\" + workloadTable[rowIndexOffSet + 4][2] + \"\u003c/td\u003e\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/tr\u003e\\n\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            htmlLimits.append(\"\u003c/table\u003e\\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return htmlLimits.toString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String getPrintable() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return checkedReport;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 232
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Predicate\u003cModuleTaken\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Replaces course data with the data in {@code Model}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void setCourse(CourseName courseName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Checks whether model has course with course name {@code course}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    boolean hasCourse(CourseName courseName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns the course data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Course getCourse();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the user prefs\u0027 GradTrak file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Path getGradTrakFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Sets the user prefs\u0027 GradTrak file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void setGradTrakFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Replaces GradTrak data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void setGradTrak(ReadOnlyGradTrak addressBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /** Returns the GradTrak */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ReadOnlyGradTrak getGradTrak();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /** Returns the current Semester */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    Semester getCurrentSemester();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if a moduleTaken with the same identity as {@code moduleTaken} exists in the GradTrak ."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    boolean hasModuleTaken(ModuleTaken moduleTaken);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Deletes the given moduleTaken."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * The moduleTaken must exist in the GradTrak ."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void deleteModuleTaken(ModuleTaken target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Adds the given moduleTaken."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code moduleTaken} must not already exist in the GradTrak ."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void addModuleTaken(ModuleTaken moduleTaken);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Replaces the given moduleTaken {@code target} with {@code editedModuleTaken}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code target} must exist in the GradTrak ."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * The moduleTaken identity of {@code editedModuleTaken} must not be the same as another"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * existing moduleTaken in the GradTrak ."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void setModuleTaken(ModuleTaken target, ModuleTaken editedModuleTaken);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Replaces the semester limit at the given index with {@code editedSemLimit}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    void setSemesterLimit(int index, SemLimit editedSemLimit);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Replaces the current semester with the given semester."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    void setCurrentSemester(Semester semester);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered moduleTaken list */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cModuleTaken\u003e getFilteredModulesTakenList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /** Returns an unmodifiable view of the SemLimit list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    ObservableList\u003cSemLimit\u003e getSemLimitList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Updates the filter of the filtered moduleTaken list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void updateFilteredModulesTakenList(Predicate\u003cModuleTaken\u003e predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns a printable LimitChecker with generated html string that indicates if the CAP and workload limits"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * set by the user for every semester have been violated based the modules taken in their plan."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    ClassForPrinting checkLimit(ModuleInfoList moduleInfoList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if the model has previous GradTrak states to restore."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    boolean canUndoGradTrak();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if the model has undone GradTrak states to restore."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    boolean canRedoGradTrak();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Restores the model\u0027s GradTrak to its previous state."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void undoGradTrak();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Restores the model\u0027s GradTrak to its previously undone state."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void redoGradTrak();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Saves the current GradTrak state for undo/redo."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void commitGradTrak();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Selected moduleTaken in the filtered moduleTaken list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * null if no moduleTaken is selected."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    ReadOnlyProperty\u003cClassForPrinting\u003e selectedModuleTakenProperty();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the selected moduleTaken in the filtered moduleTaken list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * null if no moduleTaken is selected."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    ClassForPrinting getSelectedClassForPrinting();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Sets the selected moduleTaken in the filtered moduleTaken list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    void setSelectedModuleTaken(ClassForPrinting classForPrinting);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an Observable list of all module information from storage"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return Observable list of ModuleInfo based on predicate set"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cModuleInfo\u003e getDisplayList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Updates the filtered list based on the predicate provided by user input"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void updateDisplayList(Predicate\u003cModuleInfo\u003e predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Updates the filtered list based on the predicate provided by user input"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return Observable list of ModuleInf"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    ReadOnlyProperty\u003cModuleInfo\u003e selectedModuleInfoProperty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Gets the list of module info to be searchable by module info code."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @return ModuleInfoList"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    ModuleInfoList getModuleInfoList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Updates the filtered list based on the predicate provided by user input"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return ModuleInfo"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    ModuleInfo getSelectedModuleInfo();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Updates the filtered list based on the predicate provided by user input"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param moduleInfo"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    void setSelectedModuleInfo(ModuleInfo moduleInfo);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns an unmodifiable view of the recommended module list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    ObservableList\u003cRecModule\u003e getRecModuleListSorted();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Updates the recommended module list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    void updateRecModuleList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an unmodifiable view of the filtered course requirement list"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cRequirementStatus\u003e getRequirementStatusList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns a copy of the user info."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    UserInfo getUserInfo();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an unmodifiable view of the moduleInfoCode list in GradTrak"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cModuleInfoCode\u003e getModuleInfoCodeList();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 19,
      "-": 110,
      "monikernemo": 69,
      "lshwayne96": 9,
      "alexchong711": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatusList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.CodeContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.exceptions.ModuleTakenNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModuleComparator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModulePredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents the in-memory model of the GradTrak data."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Course course;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final VersionedGradTrak versionedGradTrak;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final FilteredList\u003cModuleTaken\u003e filteredModulesTaken;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final SimpleObjectProperty\u003cClassForPrinting\u003e selectedModuleTaken \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //Model Information List for Model Manager to have Module Info List and list to be printed for displaymod"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ObservableList\u003cModuleInfo\u003e allModules;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final FilteredList\u003cModuleInfo\u003e displayList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final ModuleInfoList moduleInfoList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final SimpleObjectProperty\u003cModuleInfo\u003e selectedModuleInfo \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ObservableList\u003cCourse\u003e allCourses;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseList courseList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final RequirementStatusList requirementStatusList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final FilteredList\u003cRecModule\u003e recModuleList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final SortedList\u003cRecModule\u003e recModuleListSorted;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //TODO: Interaction with user Info"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final UserInfo userInfo;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Initializes a ModelManager with the given GradTrak and userPrefs."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModelManager(ReadOnlyGradTrak gradTrak, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        ModuleInfoList moduleInfoList, CourseList allCourses,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        UserInfo userInfo) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireAllNonNull(gradTrak, userPrefs, moduleInfoList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logger.fine(\"Initializing with Gradtrak: \" + gradTrak + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak \u003d new VersionedGradTrak(gradTrak);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        filteredModulesTaken \u003d new FilteredList\u003c\u003e(versionedGradTrak.getModulesTakenList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        filteredModulesTaken.addListener(this::ensureSelectedModuleTakenIsValid);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //Get an non Modifiable List of all modules and use a filtered list based on that to search for modules"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.allModules \u003d moduleInfoList.getObservableList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.displayList \u003d new FilteredList\u003c\u003e(this.allModules);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.moduleInfoList \u003d moduleInfoList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        updateDisplayList(new CodeContainsKeywordsPredicate(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // Initialise list of RecModule"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.recModuleList \u003d new FilteredList\u003c\u003e(getObservableRecModuleList(allModules));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.recModuleListSorted \u003d new SortedList\u003c\u003e(recModuleList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //Get a non-modifiable list of all courses"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.allCourses \u003d allCourses.getObservableList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseList \u003d allCourses;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //Get user info file that can be modified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.userInfo \u003d userInfo;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //TODO: interaction for setting course in user info"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //for now default course will be Computer Science Algorithms"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.course \u003d userInfo.getCourse();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.requirementStatusList \u003d new RequirementStatusList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusList.updateCourseRequirements(course,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                versionedGradTrak.getModulesTakenList()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .map(ModuleTaken::getModuleInfoCode)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .collect(Collectors.toList()), allModules);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this(new GradTrak(), new UserPrefs(), new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setCourse(CourseName courseName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        course \u003d courseList.getCourse(courseName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusList.updateCourseRequirements(course, getModuleInfoCodeList(), allModules);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInfo.setCourse(course);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean hasCourse(CourseName courseName) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        course \u003d courseList.getCourse(courseName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (course \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Course getCourse() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return course;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Path getGradTrakFilePath() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return userPrefs.getGradTrakFilePath();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setGradTrakFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userPrefs.setGradTrakFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradTrak \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setGradTrak(ReadOnlyGradTrak addressBook) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.resetData(addressBook);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ReadOnlyGradTrak getGradTrak() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return versionedGradTrak;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Semester getCurrentSemester() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return versionedGradTrak.getCurrentSemester();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean hasModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(moduleTaken);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return versionedGradTrak.hasModuleTaken(moduleTaken);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void deleteModuleTaken(ModuleTaken target) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.removeModuleTaken(target);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void addModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.addModuleTaken(moduleTaken);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        updateFilteredModulesTakenList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setModuleTaken(ModuleTaken target, ModuleTaken editedModuleTaken) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(target, editedModuleTaken);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.setModuleTaken(target, editedModuleTaken);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSemesterLimit(int index, SemLimit editedSemLimit) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireAllNonNull(index, editedSemLimit);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.setSemesterLimit(index, editedSemLimit);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setCurrentSemester(Semester semester) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireAllNonNull(semester);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.setCurrentSemester(semester);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered ModuleTaken List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ModuleTaken} backed by the internal list of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code versionedGradTrak}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cModuleTaken\u003e getFilteredModulesTakenList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return filteredModulesTaken;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code SemLimit} backed by the internal list of"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ObservableList\u003cSemLimit\u003e getSemLimitList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return versionedGradTrak.getSemesterLimitList();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void updateFilteredModulesTakenList(Predicate\u003cModuleTaken\u003e predicate) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        filteredModulesTaken.setPredicate(predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns a LimitChecker with the generated html string"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * that shows where their CAP and workload limits are violated."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ClassForPrinting checkLimit(ModuleInfoList moduleInfoList) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new LimitChecker(getCurrentSemester(), getSemLimitList(), getFilteredModulesTakenList(), moduleInfoList);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean canUndoGradTrak() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return versionedGradTrak.canUndo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean canRedoGradTrak() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return versionedGradTrak.canRedo();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void undoGradTrak() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.undo();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void redoGradTrak() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.redo();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void commitGradTrak() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        versionedGradTrak.commit();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected moduleTaken \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ReadOnlyProperty\u003cClassForPrinting\u003e selectedModuleTakenProperty() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return selectedModuleTaken;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ClassForPrinting getSelectedClassForPrinting() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return selectedModuleTaken.getValue();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSelectedModuleTaken(ClassForPrinting classForPrinting) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (classForPrinting !\u003d null \u0026\u0026 classForPrinting instanceof ModuleTaken"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 !filteredModulesTaken.contains(classForPrinting)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new ModuleTakenNotFoundException();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        selectedModuleTaken.setValue(classForPrinting);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module Info List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cModuleInfo\u003e getDisplayList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.displayList;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void updateDisplayList(Predicate\u003cModuleInfo\u003e predicate) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        displayList.setPredicate(predicate);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ReadOnlyProperty\u003cModuleInfo\u003e selectedModuleInfoProperty() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return selectedModuleInfo;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ModuleInfoList getModuleInfoList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return moduleInfoList;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfo getSelectedModuleInfo() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return selectedModuleInfo.getValue();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void setSelectedModuleInfo(ModuleInfo moduleInfo) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (moduleInfo !\u003d null \u0026\u0026 !displayList.contains(moduleInfo)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            //temp solution TODO: HERE!!!"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new ModuleTakenNotFoundException();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        selectedModuleInfo.setValue(moduleInfo);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Module recommendation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public ObservableList\u003cRecModule\u003e getRecModuleListSorted() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return recModuleListSorted;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void updateRecModuleList() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        recModuleList.setPredicate(new RecModulePredicate(course, versionedGradTrak));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        recModuleListSorted.setComparator(new RecModuleComparator());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Generates a List of {@code RecModule} from a List of {@code ModuleInfo}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * for initialisation in {@code ModelManager}."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoList The List of {@code ModuleInfo}."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return A List of {@code RecModule}."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private static ObservableList\u003cRecModule\u003e getObservableRecModuleList(ObservableList\u003cModuleInfo\u003e moduleInfoList) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ArrayList\u003cRecModule\u003e recModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        for (ModuleInfo moduleInfo : moduleInfoList) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            recModuleList.add(new RecModule(moduleInfo.getModuleInfoCode(), moduleInfo.getModuleInfoTitle()));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return FXCollections.observableArrayList(recModuleList);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Ensures {@code selectedModuleTaken} is a valid moduleTaken in {@code filteredModulesTaken}."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private void ensureSelectedModuleTakenIsValid(ListChangeListener.Change\u003c? extends ModuleTaken\u003e change) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            if (selectedModuleTaken.getValue() \u003d\u003d null || !(selectedModuleTaken.getValue() instanceof ModuleTaken)) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                // null is always a valid selected moduleTaken, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            boolean wasSelectedModuleTakenReplaced \u003d change.wasReplaced()"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedModuleTaken.getValue());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (wasSelectedModuleTakenReplaced) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                // Update selectedModuleTaken to its new value."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedModuleTaken.getValue());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                selectedModuleTaken.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean wasSelectedPersonRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    .anyMatch(removedPerson"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        -\u003e ((ModuleTaken) selectedModuleTaken.getValue()).isSameModuleTaken(removedPerson));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            if (wasSelectedPersonRemoved) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                // Select the moduleTaken that came before it in the list,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                // or clear the selection if there is no such moduleTaken."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                selectedModuleTaken.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Display completed requirement \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cRequirementStatus\u003e getRequirementStatusList() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusList.updateModuleInfoCodes("
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                versionedGradTrak.getModulesTakenList()"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .map(ModuleTaken::getModuleInfoCode)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.requirementStatusList.getRequirementStatusList();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public UserInfo getUserInfo() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return userInfo;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cModuleInfoCode\u003e getModuleInfoCodeList() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return FXCollections.observableArrayList("
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                versionedGradTrak.getModulesTakenList()"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .map(ModuleTaken::getModuleInfoCode)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return versionedGradTrak.equals(other.versionedGradTrak)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 filteredModulesTaken.equals(other.filteredModulesTaken)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedModuleTaken.get(), other.selectedModuleTaken.get())"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 recModuleList.equals(other.recModuleList)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 course.equals(other.course)"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 requirementStatusList.equals(other.requirementStatusList)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.userInfo.equals(other.userInfo);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 16,
      "-": 191,
      "monikernemo": 164,
      "lshwayne96": 39,
      "alexchong711": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PlanPreference.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents preference of a user"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class PlanPreference {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 3,
      "alexchong711": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyGradTrak.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Unmodifiable view of an Graduation Tracker/GradTrak"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public interface ReadOnlyGradTrak extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    ObservableList\u003cModuleTaken\u003e getModulesTakenList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns an unmodifiable view of the sem limit list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    ObservableList\u003cSemLimit\u003e getSemesterLimitList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns the current semester."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Semester getCurrentSemester();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "monikernemo": 4,
      "alexchong711": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Path getGradTrakFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "monikernemo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/SemLimit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents a SemLimit in GradTrak."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SemLimit {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final CapAverage minCap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final CapAverage maxCap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour minLectureHour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour maxLectureHour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour minTutorialHour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour maxTutorialHour;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour minLabHour;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour maxLabHour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour minProjectHour;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour maxProjectHour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour minPreparationHour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour maxPreparationHour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimit(CapAverage minCap, CapAverage maxCap, Hour minLectureHour, Hour maxLectureHour,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    Hour minTutorialHour, Hour maxTutorialHour, Hour minLabHour, Hour maxLabHour,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    Hour minProjectHour, Hour maxProjectHour, Hour minPreparationHour, Hour maxPreparationHour) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireAllNonNull(minCap, maxCap, minLectureHour, maxLectureHour, minTutorialHour, maxTutorialHour,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                minLabHour, maxLabHour, minProjectHour, maxProjectHour, maxPreparationHour);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minCap \u003d minCap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxCap \u003d maxCap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minLectureHour \u003d minLectureHour;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxLectureHour \u003d maxLectureHour;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minTutorialHour \u003d minTutorialHour;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxTutorialHour \u003d maxTutorialHour;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minLabHour \u003d minLabHour;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxLabHour \u003d maxLabHour;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minProjectHour \u003d minProjectHour;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxProjectHour \u003d maxProjectHour;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minPreparationHour \u003d minPreparationHour;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxPreparationHour \u003d maxPreparationHour;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CapAverage getMinCap() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return minCap;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CapAverage getMaxCap() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return maxCap;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMinLectureHour() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return minLectureHour;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMaxLectureHour() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return maxLectureHour;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMinTutorialHour() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return minTutorialHour;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMaxTutorialHour() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return maxTutorialHour;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMinLabHour() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return minLabHour;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMaxLabHour() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return maxLabHour;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMinProjectHour() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return minProjectHour;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMaxProjectHour() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return maxProjectHour;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMinPreparationHour() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return minPreparationHour;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMaxPreparationHour() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return maxPreparationHour;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if both SemLimit have the same identity and data fields."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!(other instanceof SemLimit)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit otherSemLimit \u003d (SemLimit) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return otherSemLimit.getMinCap().equals(getMinCap())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMaxCap().equals(getMaxCap())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMinLectureHour().equals(getMinLectureHour())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMaxLectureHour().equals(getMaxLectureHour())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMinTutorialHour().equals(getMinTutorialHour())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMaxTutorialHour().equals(getMaxTutorialHour())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMinLabHour().equals(getMinLabHour())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMaxLabHour().equals(getMaxLabHour())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMinProjectHour().equals(getMinProjectHour())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMaxProjectHour().equals(getMaxProjectHour())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMinPreparationHour().equals(getMinPreparationHour())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherSemLimit.getMaxPreparationHour().equals(getMaxPreparationHour());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return Objects.hash(minCap, maxCap, minLectureHour, maxLectureHour);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        builder.append(\" Min CAP: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMinCap())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Max CAP: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMaxCap())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Min Lecture Hour: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMinLectureHour())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Max Lecture Hour: \")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMaxLectureHour())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Min Tutorial Hour: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMinTutorialHour())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Max Tutorial Hour: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMaxTutorialHour())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Min Lab Hour: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMinLabHour())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Max Lab Hour: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMaxLabHour())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Min Project Hour: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMinProjectHour())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Max Project Hour: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMaxProjectHour())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Min Preparation Hour: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMinPreparationHour())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Max Preparation Hour: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getMaxPreparationHour());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.util.SampleCourse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents User\u0027s information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class UserInfo implements Observable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Course course;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Semester currentSemester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private SemLimit semLimit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Creates a UserInfo with default values"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public UserInfo() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        course \u003d SampleCourse.COMPUTER_SCIENCE_ALGORITHMS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        currentSemester \u003d Semester.valueOf(\"Y1S1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        semLimit \u003d new SemLimit(new CapAverage(0.0), new CapAverage(0.0),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new Hour(\"0\"), new Hour(\"0\"), new Hour(\"0\"), new Hour(\"0\"), new Hour(\"0\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new Hour(\"0\"), new Hour(\"0\"), new Hour(\"0\"), new Hour(\"0\"), new Hour(\"0\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs UserInfo class with given course, current semester, and semester limit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public UserInfo(Course course, Semester currentSemester, SemLimit semLimit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(course, currentSemester, semLimit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.course \u003d course;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.semLimit \u003d semLimit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setCourse(Course course) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.course \u003d course;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setCurrentSemester(Semester currentSemester) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setSemLimit(SemLimit semLimit) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.semLimit \u003d semLimit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Course getCourse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return course;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Semester getCurrentSemester() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return currentSemester;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public SemLimit getSemLimit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return semLimit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Notifies listeners that the address book has been modified."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private void indicateModified() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(obj instanceof UserInfo)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UserInfo other \u003d (UserInfo) obj;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.course.equals(other.course)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.currentSemester.equals(other.currentSemester)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.semLimit.equals(other.semLimit);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "monikernemo": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Path gradTrakFilePath \u003d Paths.get(\"src\", \"main\", \"resources\", \"gradtrak.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        setGradTrakFilePath(newUserPrefs.getGradTrakFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Path getGradTrakFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return gradTrakFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setGradTrakFilePath(Path gradTrakFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(gradTrakFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.gradTrakFilePath \u003d gradTrakFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 gradTrakFilePath.equals(o.gradTrakFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return Objects.hash(guiSettings, gradTrakFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + gradTrakFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "monikernemo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedGradTrak.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * {@code GradTrak} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class VersionedGradTrak extends GradTrak {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cReadOnlyGradTrak\u003e gradTrakStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public VersionedGradTrak(ReadOnlyGradTrak initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        gradTrakStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        gradTrakStateList.add(new GradTrak(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Saves a copy of the current {@code GradTrak} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        gradTrakStateList.add(new GradTrak(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        gradTrakStateList.subList(currentStatePointer + 1, gradTrakStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Restores the GradTrak to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        resetData(gradTrakStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Restores the GradTrak to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        resetData(gradTrakStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if {@code undo()} has GradTrak states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if {@code redo()} has GradTrak states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return currentStatePointer \u003c gradTrakStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(other instanceof VersionedGradTrak)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak otherVersionedAddressBook \u003d (VersionedGradTrak) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 gradTrakStateList.equals(otherVersionedAddressBook.gradTrakStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "monikernemo": 15,
      "alexchong711": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CompositeRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents a composite Course Requirement that is connected by logical connectors."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class CompositeRequirement implements CourseRequirement {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //TODO: Refine implementation of Course Requirement to store more than 2 modules"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Represents logical connectors of CompositeRequirement"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public enum LogicalConnector {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        AND, OR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String courseReqName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String courseReqDesc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseRequirement first;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseRequirement second;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final LogicalConnector connector;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseReqType courseReqType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code CompositeRequirement}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param first first requirement to check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param second second requirement to check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param connector logical connector to combine (either AND or OR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CompositeRequirement(CourseRequirement first, CourseRequirement second,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                LogicalConnector connector, CourseReqType courseReqType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(first, second, connector, courseReqType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqName \u003d first.getCourseReqName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        switch(connector) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case AND:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.courseReqDesc \u003d first.getCourseReqDesc() + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + LogicalConnector.AND + \" \" + second.getCourseReqDesc();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case OR:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.courseReqDesc \u003d first.getCourseReqDesc() + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + LogicalConnector.OR + \" \" + second.getCourseReqDesc();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.connector \u003d connector;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqType \u003d courseReqType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Private constructor for a {@code CompositeRequirement}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * allows to set name and courseReq desc;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param first first requirement to check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param second second requirement to check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param connector logical connector to combine (either AND or OR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private CompositeRequirement(String courseReqName, String courseReqDesc,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                 CourseRequirement first, CourseRequirement second,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                 LogicalConnector connector, CourseReqType courseReqType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(first, second, connector, courseReqType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqName \u003d courseReqName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqDesc \u003d courseReqDesc;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.connector \u003d connector;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqType \u003d courseReqType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseReqType getType() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseReqType;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getCourseReqName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseReqName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getCourseReqDesc() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseReqDesc;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        switch(connector) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case AND:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return first.isFulfilled(moduleInfoCodes) \u0026\u0026 second.isFulfilled(moduleInfoCodes);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case OR:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return first.isFulfilled(moduleInfoCodes) || second.isFulfilled(moduleInfoCodes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean canFulfill(ModuleInfoCode moduleInfoCode) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        switch(connector) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case AND:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return first.canFulfill(moduleInfoCode) \u0026\u0026 second.canFulfill(moduleInfoCode);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case OR:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return first.canFulfill(moduleInfoCode) || second.canFulfill(moduleInfoCode);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public double getFulfilledPercentage(List\u003cModuleInfoCode\u003e moduleInfoCode) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (isFulfilled(moduleInfoCode)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        switch(connector) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case OR:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Math.max(first.getFulfilledPercentage(moduleInfoCode),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    second.getFulfilledPercentage(moduleInfoCode));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case AND:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            //TODO: \"AND\" does not reveal the true rate of completion."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            // Perhaps use some method to get aggregate min to Satisfy"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return (first.getFulfilledPercentage(moduleInfoCode) + second.getFulfilledPercentage(moduleInfoCode)) / 2.0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public List\u003cString\u003e getUnfulfilled(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cString\u003e unfulfilledRegexes \u003d first.getUnfulfilled(moduleInfoCodes);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        unfulfilledRegexes.addAll(second.getUnfulfilled(moduleInfoCodes));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return unfulfilledRegexes;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement and(CourseRequirement other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        switch (connector) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case AND:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new CompositeRequirement(courseReqName, courseReqDesc + \" \" + connector + \" \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + other.getCourseReqDesc(), this, other, connector, courseReqType);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case OR:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new CompositeRequirement(courseReqName, \"(\" + courseReqDesc + \") \" + connector + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + other.getCourseReqDesc(), this, other, connector, courseReqType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement or(CourseRequirement other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        switch (connector) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case OR:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new CompositeRequirement(courseReqName, courseReqDesc + \" \" + connector + \" \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + other.getCourseReqDesc(), this, other, connector, courseReqType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case AND:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new CompositeRequirement(courseReqName, \"(\" + courseReqDesc + \") \" + connector + \" \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + other.getCourseReqDesc(), this, other, connector, courseReqType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement getFirst() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return first;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement getSecond() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return second;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public LogicalConnector getLogicalConnector() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return connector;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseReqType getCourseReqType() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseReqType;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(obj instanceof CompositeRequirement)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CompositeRequirement other \u003d (CompositeRequirement) obj;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return ((this.first.equals(other.first) \u0026\u0026 this.second.equals(other.second))"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                || (this.first.equals(other.second) \u0026\u0026 this.second.equals(other.first)))"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.courseReqType.equals(other.courseReqType)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.connector.equals(other.connector);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 188,
      "lshwayne96": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/Condition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.regex.PatternSyntaxException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents Condition of a PrimitiveRequirement"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class Condition {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String INVALID_REGEXES \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"At least one of the regular expressions is invalid!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String INVALID_MIN_TO_SATISFY \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"Minimum number of modules to satisfy aspect cannot be less than 1!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Pattern pattern;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final int minToSatisfy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code Condition}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param minToSatisfy minimum number of modules that matches pattern to satisfy condition"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param pattern a regex to check whether ModuleInfoCode matches"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Condition(int minToSatisfy, String pattern) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(minToSatisfy, pattern);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        checkArgument(isValidMinToSatisfy(minToSatisfy), INVALID_MIN_TO_SATISFY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        checkArgument(isValidRegex(pattern), INVALID_REGEXES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minToSatisfy \u003d minToSatisfy;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d Pattern.compile(pattern);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Alternate constructor that only takes in a pattern string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * minToSatisfy is immediately set to 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param pattern a regex to check whether ModuleInfoCode matches"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Condition(String pattern) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        checkArgument(isValidRegex(pattern), INVALID_REGEXES);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d Pattern.compile(pattern);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minToSatisfy \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if given number is larger than 0."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static boolean isValidMinToSatisfy(int test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true pattern passed is valid Pattern."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static boolean isValidRegex(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            Pattern.compile(test);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } catch (PatternSyntaxException exception) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if there are at least minToSatisfy number of modulesInfoCodes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * that matches pattern"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCodes a list of module codes to check whether condition is satisfied"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return true if condition satisfied, false otherwise"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isSatisfied(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return moduleInfoCodes.stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .map(ModuleInfoCode::toString)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .filter(str-\u003e pattern.matcher(str).matches())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .count() \u003e\u003d minToSatisfy;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if the module code of module matches at least one of the regex in regex list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCode a module code to check against regex list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return true if at least module code of module matches at least one of the regex in regex list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean canSatisfy(ModuleInfoCode moduleInfoCode) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return pattern.matcher(moduleInfoCode.toString()).matches();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns percentage, in range of [0, 1.0] of completion for this condition"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCodes a list of module codes to check completion percentage"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return a double in range of [0,1.0] to see percentage of completion"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public int getNumCompleted(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return Math.toIntExact(Math.min(moduleInfoCodes.stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .map(ModuleInfoCode::toString)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .filter(str-\u003e pattern.matcher(str).matches())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .count(), minToSatisfy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public int getMinToSatisfy() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return minToSatisfy;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(obj instanceof Condition)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Condition other \u003d (Condition) obj;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.pattern.toString().equals(other.pattern.toString())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.minToSatisfy \u003d\u003d other.minToSatisfy;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Pattern getPattern() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return pattern;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 115,
      "lshwayne96": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/Course.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " *  Represents course of the user that is enrolled in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class Course {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //TODO: Remove some of the classes such as Course Description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String MESSAGE_REQ_COMPLETED \u003d \"All course requirements have been completed\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseName courseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseDescription courseDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cCourseRequirement\u003e courseRequirements;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Course(CourseName courseName, CourseDescription courseDescription,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                  CourseRequirement... courseRequirements) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(courseName, courseDescription, courseRequirements);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseDescription \u003d courseDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseRequirements \u003d Arrays.asList(courseRequirements);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseName getCourseName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseDescription getCourseDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseDescription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public List\u003cCourseRequirement\u003e getCourseRequirements() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseRequirements;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crumpledpaper"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns a {@code List} of {@code CourseReqType} satisfied by the given {@code ModuleInfoCode}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCode The given {@code ModuleInfoCode}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return A {@code List} of {@code CourseReqType} satisfied by the given {@code ModuleInfoCode}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public List\u003cCourseReqType\u003e getCourseReqTypeOf(ModuleInfoCode moduleInfoCode) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        List\u003cCourseReqType\u003e reqTypeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        for (CourseRequirement courseReq : courseRequirements) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (courseReq.canFulfill(moduleInfoCode) \u0026\u0026 !reqTypeList.contains(courseReq.getType())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                reqTypeList.add(courseReq.getType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Collections.sort(reqTypeList); // sort according to enum ordering"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return reqTypeList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Checks if the given {@code ModuleInfoCode} contributes to the given {@code CourseReqType} based on"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * the given {@code List} of non-failed {@code ModuleInfoCode}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param reqType The {@code CourseReqType} to be checked against."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param nonFailedCodeList The {@code List} of non-failed {@code ModuleInfoCode} to be checked against."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCode The {@code ModuleInfoCode} to be checked."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if the given {@code ModuleInfoCode} contributes to the given {@code CourseReqType} based on"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * the given {@code List} of non-failed {@code ModuleInfoCode}, false otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isCodeContributing(CourseReqType reqType, List\u003cModuleInfoCode\u003e nonFailedCodeList,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                                  ModuleInfoCode moduleInfoCode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        for (CourseRequirement courseReq : courseRequirements) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (!courseReq.getType().equals(reqType)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            List\u003cString\u003e unfulfilledRegexList \u003d courseReq.getUnfulfilled(nonFailedCodeList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (unfulfilledRegexList.stream().anyMatch(regex -\u003e moduleInfoCode.toString().matches(regex))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(obj instanceof Course)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Course other \u003d (Course) obj;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //TODO: Will implement this properly in the future"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.courseName.equals(other.courseName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crumpledpaper": 1,
      "monikernemo": 47,
      "alexchong711": 3,
      "lshwayne96": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents description of a course"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class CourseDescription {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"Must consist of at least 1 word and cannot begin with whitespace\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String courseDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseDescription(String courseDescription) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        checkArgument(isValidCourseDescription(courseDescription), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseDescription \u003d courseDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static boolean isValidCourseDescription(String test) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object another) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this \u003d\u003d another) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (another instanceof CourseDescription) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return this.courseDescription.equals(((CourseDescription) another).toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 38,
      "alexchong711": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.util.SampleCourse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Wraps all data at the Course List level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Duplicates are not allowed (by name)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class CourseList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cCourse\u003e courseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        courseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        courseList.add(SampleCourse.COMPUTER_SCIENCE_ALGORITHMS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /** Adds Course to the List of all the courses"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    * @param course"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void addCourse(Course course) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseList.add(course);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        System.out.println(\"new course added:\" + course.getCourseName().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns Course which has the same course name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param courseName"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return course"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Course getCourse(CourseName courseName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Course course \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (int i \u003d 0; i \u003c courseList.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (courseList.get(i).getCourseName().equals(courseName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                course \u003d courseList.get(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return course;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cCourse\u003e getObservableList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ObservableList\u003cCourse\u003e observableList \u003d FXCollections.observableArrayList(courseList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return observableList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an ObservableList of all Courses."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return an ObservableList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cCourse\u003e getObservableCodeList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ArrayList\u003cCourse\u003e codeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (Course course: courseList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            codeList.add(course);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return FXCollections.observableArrayList(codeList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns first course in List"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return the first course in courseList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Course getFirst() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseList.get(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents name of a course"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class CourseName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"Consists of characters and spaces only \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s][A-z ]*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String courseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseName(String courseName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(courseName);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        checkArgument(isValidCourseName(courseName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static boolean isValidCourseName(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } else if (obj instanceof CourseName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return this.courseName.equals(((CourseName) obj).courseName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 38,
      "alexchong711": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseReqType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents type of course requirement"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public enum CourseReqType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /* in decreasing order of priority */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    CORE(\"Core Requirement\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    BD(\"Breadth \u0026 Depth\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    IE(\"Industry Experience Requirement\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    FAC(\"Faculty Requirement\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    GE(\"General Education Requirement\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    UE(\"Unrestricted Elective\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final String printedType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    CourseReqType(String printedType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.printedType \u003d printedType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return printedType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 7,
      "lshwayne96": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/CourseRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * API of CourseRequirement"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public interface CourseRequirement {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns CourseReqType of a CourseRequirement"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return CourseReqType of CourseRequirement interface object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    CourseReqType getType();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns name of course requirement"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return name of course requirement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    String getCourseReqName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns description of course requirement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return description of course requirement"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    String getCourseReqDesc();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if list in modules satisfy the course requirement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCodes List of module codes to check whether modules satisfy the course requirement"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if module codes satisfy course requirement"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    boolean isFulfilled(List\u003cModuleInfoCode\u003e moduleInfoCodes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if module can be used to satisfy course requirement"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCode module code to check whether can fulfil course requirement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if module code can be used to satisfy course requirement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    boolean canFulfill(ModuleInfoCode moduleInfoCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an estimate of the percentage (against min number of modules to satisfy, in the range of [0,1])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * of the degree of completion of the course requirement."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCodes module codes to check degree of completion of course requirement"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return a double in the range of [0, 1]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    double getFulfilledPercentage(List\u003cModuleInfoCode\u003e moduleInfoCodes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns a formatted string of the aspects of course requirements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * unfulfilled by the list of module codes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param moduleInfoCodes module codes to check the aspects of course requirements unfulfilled"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return a formatted string in the form"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    List\u003cString\u003e getUnfulfilled(List\u003cModuleInfoCode\u003e moduleInfoCodes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns a composite CourseRequirement whose boolean methods returns"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * first.booleanMethod() \u0026\u0026 second.booleanMethod()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * for instance: first.And(second).canFulfill(moduleInfo)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * returns the same value as first.canFulfill(moduleInfo) \u0026\u0026 second.canFulfill(moduleInfo)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param other CourseRequirement to combine"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return new CourseRequirement whose boolean method returns first.booleanMethod() \u0026\u0026 second.booleanMethod()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    CourseRequirement and(CourseRequirement other);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns a composite CourseRequirement whose boolean methods returns"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * first.booleanMethod() || second.booleanMethod()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * for instance: first.Or(second).canFulfill(moduleInfo)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * is returns the same value as first.canFulfill(moduleInfo) || second.canFulfill(moduleInfo)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param other CourseRequirement to combine"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return new CourseRequirement whose boolean method returns first.booleanMethod() || second.booleanMethod()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    CourseRequirement or(CourseRequirement other);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 68,
      "lshwayne96": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/PrimitiveRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents a simple Course Requirement that is not composite or not connected by logical connectors."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class PrimitiveRequirement implements CourseRequirement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String courseReqName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String courseReqDesc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cCondition\u003e conditions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseReqType courseReqType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code  PrimitiveRequirement}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param courseReqName name of requirement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param courseReqDesc description of requirement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param conditions list of condition for which PrimitiveRequirement is satisfied"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *                   only if all conditions are satisfied"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public PrimitiveRequirement(String courseReqName, String courseReqDesc,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                   CourseReqType courseReqType, Condition... conditions) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(courseReqName, courseReqDesc, courseReqType, conditions);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(List.of(conditions));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqName \u003d courseReqName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqDesc \u003d courseReqDesc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.conditions \u003d List.of(conditions);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqType \u003d courseReqType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseReqType getType() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseReqType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getCourseReqName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseReqName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getCourseReqDesc() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseReqDesc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isFulfilled(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return conditions.stream().allMatch(condition -\u003e condition.isSatisfied(moduleInfoCodes));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean canFulfill(ModuleInfoCode moduleInfoCode) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return conditions.stream().anyMatch(condition -\u003e condition.canSatisfy(moduleInfoCode));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public double getFulfilledPercentage(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return conditions.stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .mapToInt(condition -\u003e condition.getNumCompleted(moduleInfoCodes))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .sum() / (double) conditions.stream().mapToInt(condition -\u003e condition.getMinToSatisfy()).sum();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public List\u003cString\u003e getUnfulfilled(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return conditions.stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .filter(condition -\u003e !condition.isSatisfied(moduleInfoCodes))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .map(condition -\u003e condition.getPattern().toString())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement and(CourseRequirement other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new CompositeRequirement(this, other, CompositeRequirement.LogicalConnector"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .AND, this.courseReqType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement or(CourseRequirement other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new CompositeRequirement(this, other, CompositeRequirement.LogicalConnector"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .OR, this.courseReqType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public List\u003cCondition\u003e getConditions() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return conditions;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(obj instanceof PrimitiveRequirement)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        PrimitiveRequirement other \u003d (PrimitiveRequirement) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.courseReqName.equals(other.courseReqName)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.courseReqType.equals(other.courseReqType)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.courseReqDesc.equals(other.courseReqDesc)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.conditions.equals(other.conditions);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 105,
      "lshwayne96": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/RequirementStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Wrapper class of CourseRequirement to store a snapshot of the completion of requirement"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * at the specific time frame when this class is created"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class RequirementStatus {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private List\u003cModuleInfoCode\u003e moduleInfoCodes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private ObservableList\u003cModuleInfo\u003e allModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final CourseRequirement courseRequirement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private double percentageFulfilled;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private boolean isFulfilled;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private List\u003cString\u003e unsatisfiedRegex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public RequirementStatus(CourseRequirement courseRequirement,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                             List\u003cModuleInfoCode\u003e moduleInfoCodes,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                             ObservableList\u003cModuleInfo\u003e allModules) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.allModules \u003d allModules;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseRequirement \u003d courseRequirement;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.updateModuleInfoCodes(moduleInfoCodes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Updates moduleInfoCodes of this class"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void updateModuleInfoCodes(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.moduleInfoCodes \u003d moduleInfoCodes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.isFulfilled \u003d courseRequirement.isFulfilled(moduleInfoCodes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.percentageFulfilled \u003d courseRequirement.getFulfilledPercentage(moduleInfoCodes);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        unsatisfiedRegex.addAll(courseRequirement.getUnfulfilled(moduleInfoCodes));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement getCourseRequirement() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseRequirement;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public double getPercentageFulfilled() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return percentageFulfilled;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public List\u003cModuleInfoCode\u003e getModuleInfoCodeList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return allModules.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .map(moduleInfo -\u003e moduleInfo.getModuleInfoCode())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .filter(moduleInfoCode -\u003e unsatisfiedRegex.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .anyMatch(regex -\u003e moduleInfoCode.toString().matches(regex)))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public List\u003cModuleInfoCode\u003e getTruncatedCodeList(int truncatedSize) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return getModuleInfoCodeList().subList(0, truncatedSize);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean isFulfilled() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return isFulfilled;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(other instanceof RequirementStatus)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        RequirementStatus another \u003d (RequirementStatus) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.courseRequirement.equals(another.courseRequirement)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.allModules.equals(another.allModules)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 this.moduleInfoCodes.equals(another.moduleInfoCodes);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/course/RequirementStatusList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A list of requirement status"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class RequirementStatusList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cRequirementStatus\u003e requirementStatusList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public RequirementStatusList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Updates with new Course Requirements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void updateCourseRequirements(Course course, List\u003cModuleInfoCode\u003e moduleInfoCodes,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                         ObservableList\u003cModuleInfo\u003e allModules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusList.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusList.addAll(course.getCourseRequirements()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .map(courseRequirement -\u003e new RequirementStatus(courseRequirement, moduleInfoCodes, allModules))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Update moduleInfoCodes of each Requirement Status"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void updateModuleInfoCodes(List\u003cModuleInfoCode\u003e moduleInfoCodes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusList.forEach(requirementStatus -\u003e requirementStatus.updateModuleInfoCodes(moduleInfoCodes));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns a unmodifiable copy of requirement status list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cRequirementStatus\u003e getRequirementStatusList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return FXCollections.unmodifiableObservableList(FXCollections.observableArrayList(requirementStatusList));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(other instanceof RequirementStatusList)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        RequirementStatusList another \u003d (RequirementStatusList) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return another.requirementStatusList.equals(this.requirementStatusList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/CodeContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Tests that a {@code ModuleInfo}\u0027s {@code code} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class CodeContainsKeywordsPredicate implements Predicate\u003cModuleInfo\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final String SPLITTER_REGEX \u003d \"\\\\+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final String COMBINATION_REGEX \u003d \".*?\\\\+.*?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final String MODULECODE_REGEX \u003d \".*?[a-zA-Z]{2,3}\\\\d{4}[a-zA-Z]{0,3}.*?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final List\u003cString\u003e defaultKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public CodeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            defaultKeywords.add(\"CS1010\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            defaultKeywords.add(\"CS2103T\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.keywords \u003d defaultKeywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String[] splitPredicate(String keyword) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return keyword.split(SPLITTER_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Checks if a combination of words is found in the search target"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param keywordList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return result boolean to see if all the words matches"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean combinationSearch(String[] keywordList, ModuleInfo module) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        for (int i \u003d 0; i \u003c keywordList.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (!StringUtil.containsWordIgnoreCase(module.getTitleString(), keywordList[i])) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (i \u003e\u003d keywordList.length - 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                result \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean test(ModuleInfo module) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                .anyMatch(keyword -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    if (keyword.matches(COMBINATION_REGEX)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        return combinationSearch(splitPredicate(keyword), module);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    } else if (keyword.matches(MODULECODE_REGEX)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        //System.out.println(\"hereeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        return StringUtil.containsWordIgnoreCase(module.getCodeString(), keyword);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    } else if (!keyword.matches(MODULECODE_REGEX)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        return StringUtil.containsWordIgnoreCase(module.getTitleString(), keyword);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof CodeContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 keywords.equals(((CodeContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents Module Information about a particular module available in NUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfo {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoCode code;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoTitle title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoCredits credits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoDescription description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoWorkload workload;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private String preclusions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoDepartment department;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoPrerequisites prerequisites;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfo(String code, String title, double credits, String description, String workLoad,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                      String preclusions, String department, String prerequisites) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.code \u003d new ModuleInfoCode(code);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.title \u003d new ModuleInfoTitle(title);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.credits \u003d new ModuleInfoCredits(credits);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.description \u003d new ModuleInfoDescription(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.workload \u003d new ModuleInfoWorkload(workLoad);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.preclusions \u003d preclusions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.department \u003d new ModuleInfoDepartment(department);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.prerequisites \u003d new ModuleInfoPrerequisites(code, prerequisites);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        //System.out.println(\"Module:\" + code + \" has been created\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.prerequisites.generatePrerequisiteTree();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        //System.out.println(\"generated Tree for: \" + code);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Object String Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getCodeString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.code.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getTitleString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.title.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getCredits() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.credits.getCredits();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getCreditString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.credits.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getDescriptionString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.description.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getWorkloadString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.workload.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getPreclusionsString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.preclusions;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getDepartmentString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.department.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getPrerequisitesString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.prerequisites.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Object methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoCode getModuleInfoCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoTitle getModuleInfoTitle() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoDescription getModuleInfoDescription() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoCredits getModuleInfoCredits() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.credits;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoDepartment getModuleInfoDepartment() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.department;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoWorkload getModuleInfoWorkload() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.workload;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoPrerequisites getModuleInfoPrerequisite() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.prerequisites;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * This defines a stronger notion of equality between two ModuleInfo."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (!(other instanceof ModuleInfo)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ModuleInfo otherModuleInfo \u003d (ModuleInfo) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return otherModuleInfo.getModuleInfoCode().equals(getModuleInfoCode())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 otherModuleInfo.getModuleInfoTitle().equals(getModuleInfoTitle())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 otherModuleInfo.getModuleInfoCredits().equals(getModuleInfoCredits())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 otherModuleInfo.getModuleInfoDescription().equals(getModuleInfoDescription())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 otherModuleInfo.getModuleInfoDepartment().equals(getModuleInfoDepartment())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 otherModuleInfo.getPreclusionsString().equals(getPreclusionsString())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 otherModuleInfo.getPrerequisitesString().equals(getPrerequisitesString())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 otherModuleInfo.getModuleInfoWorkload().equals(getModuleInfoWorkload());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return Objects.hash(code, title, description, department, preclusions, prerequisites, workload);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoCode.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents a moduleInfo\u0027s code"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleInfoCode(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoCode {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \"Module codes should start with at least 2 alphabets, followed by 4 numbers and (if) 0 to 3 letter suffix\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoCode(String moduleInfoCode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        requireNonNull(moduleInfoCode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        checkArgument(isValidModuleInfoCode(moduleInfoCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        value \u003d moduleInfoCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static boolean isValidModuleInfoCode(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns the level of the module represented by this {@code ModuleInfoCode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return The first numerical digit of this {@code ModuleInfoCode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public int getLevel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        int codeNumber \u003d Integer.parseInt(value.replaceAll(\"[^0-9]\", \"\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return codeNumber / 1000;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof ModuleInfoCode// instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 value.equals(((ModuleInfoCode) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 42,
      "lshwayne96": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoCredits.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents a moduleInfo\u0027s credit"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleInfoCredits(double)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoCredits {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \"Module credits is at least 0, at most 40\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final Double credits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoCredits(double moduleInfoCredits) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        checkArgument(isValidModuleInfoCredits(moduleInfoCredits), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        credits \u003d moduleInfoCredits;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static boolean isValidModuleInfoCredits(double test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return (test \u003c\u003d 40 \u0026\u0026 test \u003e\u003d 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return credits.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getCredits() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof ModuleInfoCredits// instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 credits \u003d\u003d ((ModuleInfoCredits) other).credits); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return credits.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoDepartment.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents a moduleInfo\u0027s department"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleInfoDepartment(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoDepartment {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \"Must consist of only characters and white spaces and cannot begin with whitespace.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s1-9][\\\\p{Graph} ]{0,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final String department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoDepartment(String moduleDepartment) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        requireNonNull(moduleDepartment);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        checkArgument(isValidModuleInfoDepartment(moduleDepartment), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        department \u003d moduleDepartment;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static boolean isValidModuleInfoDepartment(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof ModuleInfoDepartment// instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 department.equals(((ModuleInfoDepartment) other).department)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return department.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents a moduleInfo\u0027s description"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Validity wiil not be checked due to variance of descriptions {@link #isValidModuleInfoDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \"Must consist of at least 1 word and cannot start with whitespace\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoDescription(String moduleDescription) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        requireNonNull(moduleDescription);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        //checkArgument(isValidModuleInfoDescription(moduleDescription), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        description \u003d moduleDescription;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static boolean isValidModuleInfoDescription(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof ModuleInfoDescription// instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 description.equals(((ModuleInfoDescription) other).description)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Wraps all data at the Module Info List level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Duplicates are not allowed (by comparison)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final List\u003cModuleInfo\u003e moduleInfoList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleInfoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoList() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Adds Module to the List of all the modules"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void addModuleInfo(ModuleInfo module) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.moduleInfoList.add(module);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        //System.out.println(\"new module added:\" + module.getCodeString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Returns Module which has the same module code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return ModuleInfo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfo getModule(String code) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ModuleInfo module \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleInfoList.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (moduleInfoList.get(i).getCodeString().equals(code)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                module \u003d moduleInfoList.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Creates a PreRequisite Tree for each ModuleInfo Class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return boolean isGenerated"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean generatePrerequisites() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleInfoList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            ModuleInfo module \u003d moduleInfoList.get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return isGenerated;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ObservableList\u003cModuleInfo\u003e getObservableList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ObservableList\u003cModuleInfo\u003e observableList \u003d FXCollections.observableArrayList(moduleInfoList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return observableList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoPrerequisites.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.util.ModuleTree;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.util.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents a moduleInfo\u0027s Prerequisites"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoPrerequisites {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String ENDOFLINE_REGEX \u003d \".*?or\\\\b|.*?and\\\\b\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MODULECODE_REGEX \u003d \"[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}|equivalent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String NEXTPARENT_REGEX \u003d \"or\\\\s[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}|and\\\\s[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String PREREQUISITE_REGEX \u003d \".*?\\\\b[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}\\\\b.*?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String SPLITTER_REGEX \u003d \"\\\\[|\\\\]|[()]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String OPERATION_REGEX \u003d \"or|/|,|and|plus|\u0026\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String CLEANER_REGEX \u003d \"[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}|\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                               + \"[\\\\p{Punct}\\\\p{Alpha}]{1,4}\\\\s[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}|\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                               + \"[()]|\\\\[|\\\\]\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                               + \"|plus\\\\s\\\\[\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                               + \"|and\\\\s\\\\[|or\\\\s\\\\[\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                               + \"|or\\\\s\\\\(|/[A-Z]{2,3}\\\\d{4}[A-Z]{0,3}|and\\\\s\\\\(\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                               + \"|or equivalent|plus\\\\s\\\\(\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String OR_REGEX \u003d \"OR\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String AND_REGEX \u003d \"AND\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String NOREQUIREMENT_MESSAGE \u003d \"No prerequisites needed\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleTree tree;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private String prerequisitesString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoPrerequisites(String code, String prereq) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.tree \u003d new ModuleTree(code);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.prerequisitesString \u003d prereq;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return prerequisitesString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleTree getModuleTree() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return this.tree;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * generates PreRequisite Tree for this particular module"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void generatePrerequisiteTree() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (!prerequisitesString.equals(NOREQUIREMENT_MESSAGE) \u0026\u0026 prerequisitesString.matches(PREREQUISITE_REGEX)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String[] prerequisiteArray \u003d prerequisiteSplitter(prerequisitesString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            Node tempHead \u003d treeGenerator(prerequisiteArray);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (tempHead.getValue().equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                tempHead \u003d tempHead.getChildList().get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.tree.addTree(tempHead);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Splits the prerequisite into an array that can be made into a Tree"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String[] prerequisiteSplitter(String prerequisitesString) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String temp \u003d prerequisitesStringCleaner(prerequisitesString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String[] array \u003d temp.split(SPLITTER_REGEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        for (int i \u003d 0; i \u003c array.length; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            array[i] \u003d array[i].trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (array[i].matches(PREREQUISITE_REGEX) || array[i].matches(OPERATION_REGEX)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                list.add(array[i]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String[] test \u003d list.toArray(new String[list.size()]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Removes any non-module Regex or non-operation regex"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param prerequisitesString"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String prerequisitesStringCleaner(String prerequisitesString) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Pattern regex \u003d Pattern.compile(CLEANER_REGEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Matcher matcher \u003d regex.matcher(prerequisitesString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String prereqString \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String temp \u003d matcher.group().trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            prereqString \u003d prereqString + \" \" + temp;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return prereqString;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Creates a full Tree without the main head of the prerequisite Tree"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param array"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public Node treeGenerator(String[] array) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Node currNode;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Node nextNode;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Node headNode \u003d new Node(false, false, \" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Node prevNode \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        while (i \u003c array.length) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String currPrereq \u003d array[i].trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (currPrereq.matches(NEXTPARENT_REGEX)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                currNode \u003d createMinorTree(currPrereq);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (prevNode \u003d\u003d null \u0026\u0026 i + 1 \u003e\u003d array.length) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    Pattern pattern \u003d Pattern.compile(MODULECODE_REGEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    Matcher moduleMatcher \u003d pattern.matcher(currPrereq);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    while (moduleMatcher.find()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        String code \u003d moduleMatcher.group();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        Node temp \u003d new Node(false, true, code);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        headNode.addChild(temp);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    if (prevNode.equals(headNode)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        currNode.addChild(headNode);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        headNode \u003d currNode;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        prevNode \u003d headNode;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        currNode.addChild(prevNode);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        headNode.addChild(currNode);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        prevNode \u003d currNode;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (currPrereq.matches(PREREQUISITE_REGEX) \u0026\u0026 !currPrereq.matches(NEXTPARENT_REGEX)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                currNode \u003d createMinorTree(currPrereq);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (array.length - i \u003e\u003d 2 \u0026\u0026 array[i + 1].matches(OPERATION_REGEX)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    String nextnode \u003d array[i + 1].trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    Node tempHead \u003d new Node (false, false, \" \");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    if (\"and\".equals(nextnode) || \"plus\".equals(nextnode)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        tempHead \u003d new Node(false, false, AND_REGEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        tempHead.addChild(currNode);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    if (\"or\".equals(nextnode) || \"/\".equals(nextnode) || \",\".equals(nextnode)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        tempHead \u003d new Node(false, false, OR_REGEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        tempHead.addChild(currNode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    nextnode \u003d array[i + 1];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    nextNode \u003d createMinorTree(nextnode);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    tempHead.addChild(nextNode);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    if (headNode.isDummy()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        headNode \u003d tempHead;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    } else if (headNode.getValue().equals(tempHead.getValue())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        for (Node child : tempHead.getChildList()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                            headNode.addChild(child);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        tempHead.addChild(headNode);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        headNode \u003d tempHead;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    prevNode \u003d headNode;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                } else if (i + 1 \u003c array.length \u0026\u0026 array[i].matches(ENDOFLINE_REGEX)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    nextNode \u003d createMinorTree(array[i + 1]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    currNode.addChild(nextNode);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    prevNode \u003d currNode;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    if (i + 1 \u003e\u003d array.length) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        headNode.addChild(currNode);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                } else if (i + 1 \u003e\u003d array.length) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    headNode.addChild(currNode);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    prevNode \u003d currNode;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    prevNode \u003d currNode;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (\"and\".equals(currPrereq) || \"or\".equals(currPrereq)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (\"and\".equals(currPrereq)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    currNode \u003d new Node(false, false, AND_REGEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    currNode \u003d new Node(false, false, OR_REGEX);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (headNode.isDummy() || !currNode.getValue().equals(headNode.getValue())) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    if (!headNode.isDummy()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        currNode.addChild(headNode);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    headNode \u003d currNode;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                if (prevNode !\u003d null \u0026\u0026 !prevNode.hasParent()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    currNode.addChild(prevNode);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return headNode;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Creates a branch of the main prerequisite Tree"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param sequence"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public Node createMinorTree(String sequence) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Node pesudoHead \u003d new Node(false, false, \"\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Pattern regexOperation \u003d Pattern.compile(OPERATION_REGEX);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Matcher matcher \u003d regexOperation.matcher(sequence);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String operation \u003d matcher.group();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (\"or\".equals(operation) || \",\".equals(operation) || \"/\".equals(operation)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                pesudoHead \u003d new Node(false, false, OR_REGEX);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                pesudoHead \u003d new Node(false, false, AND_REGEX);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        Pattern regexCode \u003d Pattern.compile(MODULECODE_REGEX);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        matcher \u003d regexCode.matcher(sequence);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String code \u003d matcher.group();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            Node temp \u003d new Node(false, true, code);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            pesudoHead.addChild(temp);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return pesudoHead;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoTitle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents a moduleInfo\u0027s title"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleInfoTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoTitle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \"Must consist of at least 1 word and cannot start with whitespace\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoTitle(String moduleTitle) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        requireNonNull(moduleTitle);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        checkArgument(isValidModuleInfoTitle(moduleTitle), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        title \u003d moduleTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static boolean isValidModuleInfoTitle(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof ModuleInfoTitle// instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 title.equals(((ModuleInfoTitle) other).title)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduleinfo/ModuleInfoWorkload.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.model.moduleinfo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Represents a moduleInfo\u0027s Workload"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleInfoWorkload(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoWorkload {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \"Module Workload has 5 fields of Integers\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MESSAGE_NOWORKLOAD \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \"No work load information provided\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String VALIDATION_INTEGER_REGEX \u003d \"\\\\d\\\\.?\\\\d?-\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"\\\\d\\\\.?\\\\d?-\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"\\\\d\\\\.?\\\\d?-\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"\\\\d\\\\.?\\\\d?-\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            + \"\\\\d\\\\.?\\\\d?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final String workload;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final double lecture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final double tutorial;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final double lab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final double project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final double preparation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoWorkload(String moduleInfoWorkload) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.workload \u003d moduleInfoWorkload;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (!isValidModuleInfoWorkload(moduleInfoWorkload)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.lecture \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.tutorial \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.lab \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.project \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            this.preparation \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String[] attribute \u003d splitWorkload(moduleInfoWorkload);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.lecture \u003d Double.valueOf(attribute[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.tutorial \u003d Double.valueOf(attribute[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.lab \u003d Double.valueOf(attribute[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.project \u003d Double.valueOf(attribute[3]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.preparation \u003d Double.valueOf(attribute[4]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static boolean isValidModuleInfoWorkload(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return test.matches(VALIDATION_INTEGER_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return workload;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getLecture() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return lecture;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getTutorial() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return tutorial;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getLab() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return lab;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getProject() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getPreparation() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return preparation;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public double getTotal() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return lecture + tutorial + lab + project + preparation;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     *  Splits the moduleinfo workload into 5 attribute and returns a string array"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param moduleInfoWorkload"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return String[] attributes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String[] splitWorkload(String moduleInfoWorkload) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String[] attributes \u003d moduleInfoWorkload.split(\"-\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return attributes;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                || (other instanceof ModuleInfoWorkload// instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 lecture \u003d\u003d ((ModuleInfoWorkload) other).lecture"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 tutorial \u003d\u003d ((ModuleInfoWorkload) other).tutorial"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 lab \u003d\u003d ((ModuleInfoWorkload) other).lab"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 project \u003d\u003d ((ModuleInfoWorkload) other).project"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 preparation \u003d\u003d ((ModuleInfoWorkload) other).preparation); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return Objects.hash(lecture, tutorial, lab, project, preparation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 98,
      "lshwayne96": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/CapAverage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCredits;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents the average cap based on the weights of all the counted caps in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class CapAverage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final double SINGLE_CREDIT \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            \"Cap limit should from 0.00 to 5.00 to 2 decimal places\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(([0-4](\\\\.[0-9]([0-9])?)?)|(5(\\\\.00?)?))\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private ArrayList\u003cWeightedGrade\u003e weightedGrades;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Constructs a {@code CapAverage}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CapAverage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.weightedGrades \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Constructs a {@code CapAverage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public CapAverage(double capAverage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.weightedGrades \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        addWeightedGrade(capAverage, new ModuleInfoCredits(SINGLE_CREDIT));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns if this {@code CapAverage} is no more than another CapAverage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean isWithin(CapAverage limit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.getCapLimit() \u003c\u003d limit.getCapLimit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Adds a cap into the list of caps to be averaged"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param gradeCap The grade point to be added to the list of caps"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param credits Amount of module credits to weigh the cap in the average"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void addWeightedGrade(double gradeCap, ModuleInfoCredits credits) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        WeightedGrade toAdd \u003d new WeightedGrade(gradeCap, credits);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        weightedGrades.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return String.valueOf(getCapLimit());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if a given string is a valid cap average."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static boolean isValidCapAverage(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Computes the average CAP of the list of WeightedGrades"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @return the average CAP"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public double getCapLimit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (weightedGrades.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        double sumCredits \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int i \u003d 0; i \u003c weightedGrades.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            double score \u003d weightedGrades.get(i).getScore();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            double credit \u003d weightedGrades.get(i).getModuleInfoCredits().getCredits();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            sum +\u003d score * credit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            sumCredits +\u003d credit;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return roundCap(sum / sumCredits);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns the rounded CAP to 2 decimal places."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param unroundedCap A raw CAP with any number of decimal places"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @return a rounded cap to 2 decimal places"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public double roundCap(double unroundedCap) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        DecimalFormat twoDecimalPlaces \u003d new DecimalFormat(\"##.00\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String twoDecimalPlacesString \u003d twoDecimalPlaces.format(unroundedCap);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return Double.parseDouble(twoDecimalPlacesString);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                || (other instanceof CapAverage // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 getCapLimit() \u003d\u003d ((CapAverage) other).getCapLimit()); // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return weightedGrades.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/FindModulePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Tests that a {@code ModuleTaken} matches all description given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class FindModulePredicate implements Predicate\u003cModuleTaken\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final FindModuleDescriptor findModuleDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final Semester currentSemester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModulePredicate(FindModuleDescriptor findModuleDescriptor, Semester currentSemester) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireAllNonNull(findModuleDescriptor, currentSemester);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.findModuleDescriptor \u003d findModuleDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean test(ModuleTaken module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModuleInfoCode moduleCode \u003d module.getModuleInfoCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Optional\u003cString\u003e subCode \u003d findModuleDescriptor.getSubCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Optional\u003cSemester\u003e semester \u003d findModuleDescriptor.getSemester();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Optional\u003cGrade\u003e grade \u003d findModuleDescriptor.getGrade();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Optional\u003cBoolean\u003e isFinished \u003d findModuleDescriptor.isFinished();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (subCode.isPresent()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 !moduleCode.toString().toLowerCase().contains(subCode.get())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (semester.isPresent()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 !module.getSemester().equals(semester.get())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (grade.isPresent()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 !grade.get().isWithin(module.getGradeRange())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (isFinished.isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 (module.isFinished(currentSemester) !\u003d isFinished.get())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        logger.fine(moduleCode.toString() + \" found\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                || (other instanceof FindModulePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 findModuleDescriptor.equals(((FindModulePredicate) other).findModuleDescriptor)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 currentSemester.equals(((FindModulePredicate) other).currentSemester)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 5,
      "lshwayne96": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/Grade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents grade of a module taken"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public enum Grade {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    A_PLUS(5, true, true, \"A+\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    A(5, true, true, \"A\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    A_MINUS(4.5, true, true, \"A-\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    B_PLUS(4, true, true, \"B+\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    B(3.5, true, true, \"B\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    B_MINUS(3, true, true, \"B-\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    C_PLUS(2.5, true, true, \"C+\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    C(2, true, true, \"C\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    D_PLUS(1.5, true, true, \"D+\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    D(1, true, true, \"D\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    F(0, false, true, \"F\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    CS(0, true, false, \"CS\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    CU(0, false, false, \"CU\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    EXE(0, true, false, \"EXE\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    IC(0, false, false, \"IC\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    S(0, true, false, \"S\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    U(0, false, false, \"U\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    W(0, false, false, \"W\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Grade must be from A+ to F. or S/U\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final double gradePoint;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final boolean isPass;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final boolean isCounted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String printedGrade;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Grade(double gradePoint, boolean isPass, boolean isCounted, String printedGrade) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.gradePoint \u003d gradePoint;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.isPass \u003d isPass;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.isCounted \u003d isCounted;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.printedGrade \u003d printedGrade;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public double getGradePoint() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.gradePoint;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean isPassingGrade() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.isPass;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean isCountedInCap() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this.isCounted;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static Grade getGrade(String grade) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        switch (grade) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"A_PLUS\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return A_PLUS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return A;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"A_MINUS\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return A_MINUS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"B_PLUS\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return B_PLUS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return B;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"B_MINUS\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return B_MINUS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"C_PLUS\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return C_PLUS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return C;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"D_PLUS\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return D_PLUS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return D;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return F;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"CS\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return CS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"CU\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return CU;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"W\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return W;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        case \"IC\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return IC;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"EXE\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return EXE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns if a given string is a valid grade."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static boolean isValidGrade(String test) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        switch (test) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"A_PLUS\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"A_MINUS\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"B_PLUS\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"B_MINUS\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"C_PLUS\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"D_PLUS\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"CS\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"CU\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"W\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"IC\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"EXE\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.printedGrade;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns true if this grade is no greater than another grade, false otherwise."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isLowerOrEqualTo(Grade limit) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        boolean onlyOnePassing \u003d isPassingGrade() !\u003d limit.isPassingGrade();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (onlyOnePassing) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return limit.isPassingGrade();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        boolean onlyOneAplus \u003d (this \u003d\u003d A_PLUS) !\u003d (limit \u003d\u003d A_PLUS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (onlyOneAplus) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return limit \u003d\u003d A_PLUS;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.gradePoint \u003c\u003d limit.gradePoint;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Checks if this grade is within the given grade range."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param range The grade range to be checked against."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if this grade is within this grade range, false otherwise."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isWithin(GradeRange range) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return isLowerOrEqualTo(range.getMax()) \u0026\u0026 range.getMin().isLowerOrEqualTo(this);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 62,
      "lshwayne96": 18,
      "alexchong711": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/GradeRange.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Represents expected grade range of a module taken"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class GradeRange {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final Grade min;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final Grade max;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public GradeRange(Grade min, Grade max) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.min \u003d min;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.max \u003d max;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Grade getMin() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return min;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Grade getMax() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return max;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns true if the min gradepoint is no more than max gradepoint"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean checkMinNotMoreThanMax() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return min.isLowerOrEqualTo(max);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns true if both grade ranges have the same data fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (!(other instanceof GradeRange)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        GradeRange otherGradeRange \u003d (GradeRange) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return otherGradeRange.getMin().equals(getMin())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 otherGradeRange.getMax().equals(getMax());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return Objects.hash(min, max);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        builder.append(\" Min Grade: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .append(getMin())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .append(\" Max Grade: \")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .append(getMax());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "lshwayne96": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/Hour.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents the number of workload hours in a module taken."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidHour(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class Hour {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            \"Hour should be a non-negative number to .5 degree of accuracy\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,3}(\\\\.[05])?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public final Double hour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Constructs a {@code Hour}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param hour A valid hour number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour(String hour) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        checkArgument(isValidHour(hour), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.hour \u003d Double.parseDouble(hour);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if a given string is a valid hour number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static boolean isValidHour(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns if this number of hours is no more than another number of hours."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param limit the limit of another Hour to compare to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @return a boolean indicating if it is within the limit of the other Hour"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean isWithin(Hour limit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.hour \u003c\u003d limit.getHour();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return hour.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public double getHour() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return hour;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                || (other instanceof Hour // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 hour.equals(((Hour) other).hour)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return hour.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/HourRange.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents expected hour range for a SemLimit"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class HourRange {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour min;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour max;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMin() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return min;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getMax() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return max;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setMin(Hour min) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.min \u003d min;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setMax(Hour max) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.max \u003d max;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if the min hour limit is no more than max hour limit"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean checkMinNotMoreThanMax() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return min.isWithin(max);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/ModuleTaken.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ClassForPrinting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents a ModuleTaken in GradTrak."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class ModuleTaken implements ClassForPrinting {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final ModuleInfoCode moduleInfoCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final GradeRange gradeRange;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Workload workload;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Every field must be present and not null. workload information is filled based on module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ModuleTaken(ModuleInfoCode moduleInfoCode, Semester semester, Grade expectedMinGrade, Grade expectedMaxGrade,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                       Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireAllNonNull(moduleInfoCode, semester, expectedMinGrade, expectedMaxGrade, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.moduleInfoCode \u003d moduleInfoCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.gradeRange \u003d new GradeRange(expectedMinGrade, expectedMaxGrade);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.workload \u003d new Workload();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public ModuleTaken(ModuleInfoCode moduleInfoCode, Semester semester, Grade expectedMinGrade, Grade expectedMaxGrade,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                       Workload workload, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireAllNonNull(moduleInfoCode, semester, expectedMinGrade, expectedMaxGrade, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.moduleInfoCode \u003d moduleInfoCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.gradeRange \u003d new GradeRange(expectedMinGrade, expectedMaxGrade);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.workload \u003d workload;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setWorkload(Workload workload) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.workload \u003d workload;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public ModuleInfoCode getModuleInfoCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return moduleInfoCode;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    GradeRange getGradeRange() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return gradeRange;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Grade getExpectedMinGrade() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return gradeRange.getMin();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Grade getExpectedMaxGrade() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return gradeRange.getMax();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Hour getLectureHour() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return workload.getLectureHour();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getTutorialHour() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return workload.getTutorialHour();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getLabHour() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return workload.getLabHour();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getProjectHour() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return workload.getProjectHour();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getPreparationHour() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return workload.getPreparationHour();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Checks if this {@code ModuleTaken} has been finished given the current {@code Semester}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param currentSemester The current {@code Semester}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if the {@code ModuleTaken} has been finished, false otherwise."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isFinished(Semester currentSemester) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return semester.compareTo(currentSemester) \u003c 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Checks if this {@code ModuleTaken} has been passed (must be finished) given the current {@code Semester}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param currentSemester The current {@code Semester}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if this {@code ModuleTaken} has been passed, false otherwise."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isPassed(Semester currentSemester) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return isFinished(currentSemester) \u0026\u0026 getExpectedMaxGrade().isPassingGrade();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Checks if this {@code ModuleTaken} has been failed (must be finished) given the current {@code Semester}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param currentSemester The current {@code Semester}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return true if this {@code ModuleTaken} has been failed, false otherwise."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean isFailed(Semester currentSemester) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return isFinished(currentSemester) \u0026\u0026 !getExpectedMaxGrade().isPassingGrade();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean isSameModuleTaken(ModuleTaken otherModuleTaken) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (otherModuleTaken \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return otherModuleTaken !\u003d null"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getModuleInfoCode().equals(getModuleInfoCode())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 (otherModuleTaken.getSemester().equals(getSemester()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(other instanceof ModuleTaken)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken otherModuleTaken \u003d (ModuleTaken) other;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return otherModuleTaken.getModuleInfoCode().equals(getModuleInfoCode())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getSemester().equals(getSemester())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getExpectedMinGrade().equals(getExpectedMinGrade())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getExpectedMaxGrade().equals(getExpectedMaxGrade())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getLectureHour().equals(getLectureHour())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getTutorialHour().equals(getTutorialHour())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getLabHour().equals(getLabHour())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getProjectHour().equals(getProjectHour())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getPreparationHour().equals(getPreparationHour())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 otherModuleTaken.getTags().equals(getTags());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return Objects.hash(moduleInfoCode, semester, gradeRange, workload, tags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        builder.append(getModuleInfoCode())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Semester: \\n\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getSemester())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Expected Min Grade: \\n\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getExpectedMinGrade())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Expected Max Grade: \\n\")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getExpectedMaxGrade())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Lecture Hour: \\n\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .append(getLectureHour())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Tutorial Hour: \\n\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getTutorialHour())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Lab Hour: \\n\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getLabHour())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Project Hour: \\n\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getProjectHour())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Preparation Hour: \\n\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getPreparationHour())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\"\\n Tags: \\n\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String getPrintable() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 14,
      "-": 76,
      "alexchong711": 74,
      "lshwayne96": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Tests that a {@code ModuleTaken}\u0027s {@code ModuleInfoCode} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cModuleTaken\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean test(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .containsWordIgnoreCase(moduleTaken.getModuleInfoCode().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 5,
      "-": 26,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents semester of a module taken"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public enum Semester {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y1S1(0, 1, 1, \"Y1S1\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y1S2(1, 1, 2, \"Y1S2\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y2S1(2, 2, 1, \"Y2S1\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y2S2(3, 2, 2, \"Y2S2\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y3S1(4, 3, 1, \"Y3S1\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y3S2(5, 3, 2, \"Y3S2\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y4S1(6, 4, 1, \"Y4S1\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y4S2(7, 4, 2, \"Y4S2\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y5S1(8, 5, 1, \"Y5S1\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Y5S2(9, 5, 2, \"Y5S2\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    GRAD(10, 6, 1, \"GRAD\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Semester is Y{1-5}S{1-2}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final int year;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final int semesterOfYear;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String printedSemester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    Semester(int index, int year, int semesterOfYear, String printedSemester) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semesterOfYear \u003d semesterOfYear;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.printedSemester \u003d printedSemester;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.year;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int getSemesterOfYear() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.semesterOfYear;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static Semester getSemester(String semester) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        switch (semester) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y1S1\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y1S1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y1S2\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y1S2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y2S1\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y2S1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y2S2\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y2S2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y3S1\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y3S1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y3S2\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y3S2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y4S1\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y4S1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y4S2\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y4S2;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y5S1\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y5S1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y5S2\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y5S2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"GRAD\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return GRAD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static Semester getSemesterByZeroIndex(int zeroIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        switch (zeroIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y1S1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y1S2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y2S1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y2S2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y3S1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y3S2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y4S1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y4S2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y5S1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Y5S2;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return GRAD;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns if a given string is a valid semester for taking modules such that the user has not graduated."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static boolean isValidSemesterForTakingModules(String test) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        switch (test) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y1S1\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y1S2\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y2S1\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y2S2\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y3S1\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y3S2\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y4S1\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y4S2\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y5S1\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y5S2\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns if a given string is a valid semester."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static boolean isValidSemester(String test) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        switch (test) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y1S1\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y1S2\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y2S1\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y2S2\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y3S1\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y3S2\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y4S1\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y4S2\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y5S1\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"Y5S2\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        case \"GRAD\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return printedSemester;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 3,
      "alexchong711": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/SemesterLimitList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * A list of size 10 containing the semester limits set by the user from Y1S1 to Y5S2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SemesterLimitList implements Iterable\u003cSemLimit\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final ObservableList\u003cSemLimit\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final ObservableList\u003cSemLimit\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Adds a SemLimit to the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void add(SemLimit toAdd) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Replaces the original semLimit in the list with {@code editedSemLimit}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param index the index of the semester to set the limit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param editedSemesterLimit the full SemLimit to replace the original semLimits of the given semester"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSemesterLimit(int index, SemLimit editedSemesterLimit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireAllNonNull(index, editedSemesterLimit);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        internalList.set(index, editedSemesterLimit);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSemesterLimits(SemesterLimitList replacement) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Replaces the contents of this list with {@code semLimit}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @param semesterLimits the list of SemLimits to replace with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void setSemesterLimits(List\u003cSemLimit\u003e semesterLimits) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireAllNonNull(semesterLimits);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        internalList.setAll(semesterLimits);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ObservableList\u003cSemLimit\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Iterator\u003cSemLimit\u003e iterator() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                || (other instanceof SemesterLimitList // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        \u0026\u0026 internalList.equals(((SemesterLimitList) other).internalList));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/UniqueModuleTakenList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.exceptions.DuplicateModuleTakenException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.exceptions.ModuleTakenNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A moduleTaken is considered unique by comparing using {@code ModuleTaken#isSameModuleTaken(ModuleTaken)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * As such, adding and updating of persons uses ModuleTaken#isSameModuleTaken(ModuleTaken) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * that the moduleTaken being added or updated is unique in terms of identity in the UniqueModuleTakenList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * However, the removal of a moduleTaken uses ModuleTaken#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * as to ensure that the moduleTaken with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * @see ModuleTaken#isSameModuleTaken(ModuleTaken)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class UniqueModuleTakenList implements Iterable\u003cModuleTaken\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ObservableList\u003cModuleTaken\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ObservableList\u003cModuleTaken\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if the list contains an equivalent moduleTaken as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean contains(ModuleTaken toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModuleTaken);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Adds a moduleTaken to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * The moduleTaken must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void add(ModuleTaken toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new DuplicateModuleTakenException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Replaces the moduleTaken {@code target} in the list with {@code editedModuleTaken}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * The moduleTaken identity of {@code editedModuleTaken} must not be the same as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * another existing moduleTaken in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setPerson(ModuleTaken target, ModuleTaken editedModuleTaken) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(target, editedModuleTaken);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new ModuleTakenNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!target.isSameModuleTaken(editedModuleTaken) \u0026\u0026 contains(editedModuleTaken)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new DuplicateModuleTakenException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        internalList.set(index, editedModuleTaken);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Removes the equivalent moduleTaken from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * The moduleTaken must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void remove(ModuleTaken toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new ModuleTakenNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setPersons(UniqueModuleTakenList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Replaces the contents of this list with {@code moduleTakens}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code moduleTakens} must not contain duplicate moduleTakens."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void setPersons(List\u003cModuleTaken\u003e moduleTakens) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireAllNonNull(moduleTakens);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!personsAreUnique(moduleTakens)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new DuplicateModuleTakenException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        internalList.setAll(moduleTakens);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ObservableList\u003cModuleTaken\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Iterator\u003cModuleTaken\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                || (other instanceof UniqueModuleTakenList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueModuleTakenList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if {@code moduleTakens} contains only unique moduleTakens."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private boolean personsAreUnique(List\u003cModuleTaken\u003e moduleTakens) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleTakens.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c moduleTakens.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                if (moduleTakens.get(i).isSameModuleTaken(moduleTakens.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 49,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/WeightedGrade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCredits;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents the combination of the grade attained for the module weighted by the amount of credits"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class WeightedGrade {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public final double score;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public final ModuleInfoCredits credits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WeightedGrade(double score, ModuleInfoCredits credits) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Object String Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String getGradeString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return String.valueOf(this.score);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String getModuleInfoCreditString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.credits.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Object methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public double getScore() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ModuleInfoCredits getModuleInfoCredits() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this.credits;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns true if both WeightedGrades have the same identity and data fields."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!(other instanceof WeightedGrade)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        WeightedGrade otherWeightedGrade \u003d (WeightedGrade) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return otherWeightedGrade.getScore() \u003d\u003d getScore()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherWeightedGrade.getModuleInfoCredits().equals(getModuleInfoCredits());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return Objects.hash(score, credits);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/Workload.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoWorkload;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Represents the expected Workload of module selected as defined by the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class Workload {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour lectureHour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour tutorialHour;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour labHour;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour projectHour;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Hour preparationHour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * For constructing a Workload based on converted information from ModuleInfoWorkload"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Workload(ModuleInfoWorkload moduleInfoWorkload) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.lectureHour \u003d new Hour(String.valueOf(moduleInfoWorkload.getLecture()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.tutorialHour \u003d new Hour(String.valueOf(moduleInfoWorkload.getTutorial()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.labHour \u003d new Hour(String.valueOf(moduleInfoWorkload.getLab()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.projectHour \u003d new Hour(String.valueOf(moduleInfoWorkload.getProject()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.preparationHour \u003d new Hour(String.valueOf(moduleInfoWorkload.getPreparation()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * For populating the Module Taken with a default workload when the information is not provided."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Workload() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.lectureHour \u003d new Hour(\"0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.tutorialHour \u003d new Hour(\"0\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.labHour \u003d new Hour(\"0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.projectHour \u003d new Hour(\"0\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.preparationHour \u003d new Hour(\"0\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Workload(Hour lectureHour, Hour tutorialHour,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                  Hour labHour, Hour projectHour,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                  Hour preparationHour) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        requireAllNonNull(lectureHour, tutorialHour, labHour,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                projectHour, preparationHour);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.lectureHour \u003d lectureHour;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.tutorialHour \u003d tutorialHour;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.labHour \u003d labHour;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.projectHour \u003d projectHour;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.preparationHour \u003d preparationHour;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getLectureHour() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return lectureHour;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getTutorialHour() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return tutorialHour;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getLabHour() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return labHour;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getProjectHour() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return projectHour;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Hour getPreparationHour() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return preparationHour;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!(other instanceof Workload)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Workload otherWorkload \u003d (Workload) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherWorkload.getLectureHour().equals(getLectureHour())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherWorkload.getTutorialHour().equals(getTutorialHour())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherWorkload.getLabHour().equals(getLabHour())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherWorkload.getProjectHour().equals(getProjectHour())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                \u0026\u0026 otherWorkload.getPreparationHour().equals(getPreparationHour());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return Objects.hash(lectureHour, tutorialHour, labHour,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                projectHour, preparationHour);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        builder.append(\" Lecture hours expected: \\n\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getLectureHour())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Tutorial hours expected: \\n\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getTutorialHour())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Lab hours expected: \\n\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getLabHour())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Project hours expected: \\n\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getProjectHour())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(\" Preparation hours expected: \\n\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .append(getPreparationHour());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/exceptions/DuplicateModuleTakenException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Signals that the operation will result in duplicate ModulesTaken (ModulesTaken are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * duplicates if they have the same ModuleInfoCode)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class DuplicateModuleTakenException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public DuplicateModuleTakenException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        super(\"Operation would result in duplicate modules taken\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/moduletaken/exceptions/ModuleTakenNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Signals that the operation is unable to find the specified moduleTaken."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ModuleTakenNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recmodule/RecModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.model.recmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.course.CourseReqType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoTitle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * A class for storing a {@code ModuleInfoCode} and its corresponding {@code ModuleInfoTitle}, {@code CourseReqType}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class RecModule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final ModuleInfoCode moduleInfoCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final ModuleInfoTitle moduleInfoTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private CourseReqType courseReqType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public RecModule(ModuleInfoCode code, ModuleInfoTitle title) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireAllNonNull(code, title);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.moduleInfoCode \u003d code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.moduleInfoTitle \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public ModuleInfoCode getModuleInfoCode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return moduleInfoCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public ModuleInfoTitle getModuleInfoTitle() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return moduleInfoTitle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Optional\u003cCourseReqType\u003e getCourseReqType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return Optional.ofNullable(courseReqType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void setCourseReqType(CourseReqType type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        courseReqType \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (object \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (!(object instanceof RecModule)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule other \u003d (RecModule) object;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return moduleInfoCode.equals(other.moduleInfoCode)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 moduleInfoTitle.equals(other.moduleInfoTitle)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u0026\u0026 getCourseReqType().equals(other.getCourseReqType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recmodule/RecModuleComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.model.recmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.course.CourseReqType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Compares two {@code RecModule} based on {@code CourseReqType} and {@code ModuleInfoCode}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class RecModuleComparator implements Comparator\u003cRecModule\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public int compare(RecModule first, RecModule second) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // req type satisfied by first and second should be present at time of comparison"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assert first.getCourseReqType().isPresent() \u0026\u0026 second.getCourseReqType().isPresent();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different req type -\u003e compare priority of req type"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        CourseReqType firstReqType \u003d first.getCourseReqType().get();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        CourseReqType secondReqType \u003d second.getCourseReqType().get();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (!firstReqType.equals(secondReqType)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return firstReqType.compareTo(secondReqType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same req type -\u003e compare module level"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        int firstLevel \u003d first.getModuleInfoCode().getLevel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        int secondLevel \u003d second.getModuleInfoCode().getLevel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (firstLevel !\u003d secondLevel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return (firstLevel - secondLevel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same module level -\u003e compare lexicographically"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return first.getModuleInfoCode().toString().compareTo(second.getModuleInfoCode().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recmodule/RecModulePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.model.recmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.EligibleModulePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.course.CourseReqType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Tests if a module can be recommended to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class RecModulePredicate implements Predicate\u003cRecModule\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final Course course;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final GradTrak gradTrak;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public RecModulePredicate(Course course, GradTrak gradTrak) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireAllNonNull(course, gradTrak);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.course \u003d course;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.gradTrak \u003d gradTrak;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean test(RecModule recModule) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModuleInfoCode moduleInfoCode \u003d recModule.getModuleInfoCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        List\u003cModuleInfoCode\u003e nonFailedCodeList \u003d gradTrak.getNonFailedCodeList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        /* ineligible module */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (!(new EligibleModulePredicate(gradTrak).test(moduleInfoCode))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        /* eligible module */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        List\u003cCourseReqType\u003e reqTypeList \u003d course.getCourseReqTypeOf(moduleInfoCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        for (CourseReqType reqType : reqTypeList) { // starting from most important requirement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (course.isCodeContributing(reqType, nonFailedCodeList, moduleInfoCode)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                recModule.setCourseReqType(reqType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                logger.fine(moduleInfoCode.toString() + \" fulfills \" + reqType.name());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleCourse.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.COMPUTER_SCIENCE_FOUNDATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.COMPUTER_SYSTEM_TEAM_PROJECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.FOCUS_AREA_AI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.FOCUS_AREA_ALGORITHMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.FOCUS_AREA_SOFTWARE_ENG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.INDUSTRIAL_SYSTEM_EXPERIENCE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.IT_PROFESSIONALISM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.MATH_REQUIREMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.SCIENCE_REQUIREMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.TOTAL_MODULE_COUNT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.UNIVERSITY_LEVEL_REQUIREMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents default implementation of Course Classes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class SampleCourse {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Course COMPUTER_SCIENCE_ALGORITHMS \u003d new Course("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        new CourseName(\"Computer Science Algorithms\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        new CourseDescription(\"Computer Science Major with Focus Area in Algorithms\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            UNIVERSITY_LEVEL_REQUIREMENT, COMPUTER_SCIENCE_FOUNDATION, FOCUS_AREA_ALGORITHMS,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            INDUSTRIAL_SYSTEM_EXPERIENCE, COMPUTER_SYSTEM_TEAM_PROJECT, IT_PROFESSIONALISM,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            MATH_REQUIREMENT, SCIENCE_REQUIREMENT, TOTAL_MODULE_COUNT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Course COMPUTER_SCIENCE_SOFTWARE_ENG \u003d new Course("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new CourseName(\"Computer Science Software Engineering\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new CourseDescription(\"Computer Science Major with Focus Area in Software Engineering\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            UNIVERSITY_LEVEL_REQUIREMENT, COMPUTER_SCIENCE_FOUNDATION, FOCUS_AREA_SOFTWARE_ENG,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            INDUSTRIAL_SYSTEM_EXPERIENCE, COMPUTER_SYSTEM_TEAM_PROJECT, IT_PROFESSIONALISM,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            MATH_REQUIREMENT, SCIENCE_REQUIREMENT, TOTAL_MODULE_COUNT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Course COMPUTER_SCIENCE_AI \u003d new Course("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new CourseName(\"Computer Science Artificial Intelligence\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new CourseDescription(\"Computer Science Major with Focus Area in Artificial Intelligence\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            UNIVERSITY_LEVEL_REQUIREMENT, COMPUTER_SCIENCE_FOUNDATION, FOCUS_AREA_AI,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            INDUSTRIAL_SYSTEM_EXPERIENCE, COMPUTER_SYSTEM_TEAM_PROJECT, IT_PROFESSIONALISM,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            MATH_REQUIREMENT, SCIENCE_REQUIREMENT, TOTAL_MODULE_COUNT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/*    public static void main(String args[]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        List\u003cJsonAdaptedCourse\u003e courseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        courseList.add(new JsonAdaptedCourse(COMPUTER_SCIENCE_ALGORITHMS));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        courseList.add(new JsonAdaptedCourse(COMPUTER_SCIENCE_AI));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        courseList.add(new JsonAdaptedCourse(COMPUTER_SCIENCE_SOFTWARE_ENG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        JsonCourseStorage courseManager \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            new JsonCourseStorage(\"/json/course.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            courseManager.saveCourse(courseList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    Paths.get(\"src\", \"main\", \"resources\", \"json\", \"course.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "*/"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 39,
      "lshwayne96": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleCourseRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.BD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.CORE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.FAC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.GE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.IE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.UE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CompositeRequirement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Condition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseRequirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.PrimitiveRequirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents default Course Requirements in class"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class SampleCourseRequirement {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //University Level Requirement"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String GEH_PATTERN \u003d \"GEH1[0-9]{3}[A-Z]?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String GEQ_PATTERN \u003d \"GEQ1000[A-Z]?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String GER_PATTERN \u003d \"GER1000[A-Z]?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String GES_PATTERN \u003d \"GES1[0-9]{3}[A-Z]?\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String GET_PATTERN \u003d \"GET1[0-9]{3}[A-Z]?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition GEH_CONDITION \u003d new Condition(1, GEH_PATTERN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition GEQ_CONDITION \u003d new Condition(1, GEQ_PATTERN);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition GER_CONDITION \u003d new Condition(1, GER_PATTERN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition GES_CONDITION \u003d new Condition(1, GES_PATTERN);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition GET_CONDITION \u003d new Condition(1, GET_PATTERN);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final CourseRequirement UNIVERSITY_LEVEL_REQUIREMENT \u003d new PrimitiveRequirement("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"University Level Requirements\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete 1 module each with prefix GES, GET, GEQ, GEH, GER\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            GE, GEH_CONDITION, GEQ_CONDITION, GER_CONDITION, GES_CONDITION, GET_CONDITION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //IT Professionalism"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String[] ITP_REGEXES \u003d {\"IS1103X?\", \"CS2101\", \"ES2660\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition[] ITP_CONDITIONS \u003d Stream.of(ITP_REGEXES)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .map(Condition::new).toArray(Condition[]::new);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final CourseRequirement IT_PROFESSIONALISM \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            new PrimitiveRequirement(\"IT Professionalism\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete IS1103/X, CS2101 and ES2660\", CORE, ITP_CONDITIONS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //Computer Science Foundation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String[] CSF_REGEXES \u003d {\"(CS1010)|(CS1101S)\", \"CS1231\", \"CS2030\", \"CS2040\", \"CS2100\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"CS2030\", \"CS2040\", \"CS2100\", \"CS2103T\", \"CS2105\", \"CS2106\", \"CS3230\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition[] CSF_CONDITIONS \u003d Stream.of(CSF_REGEXES)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .map(Condition::new).toArray(Condition[]::new);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final CourseRequirement COMPUTER_SCIENCE_FOUNDATION \u003d new PrimitiveRequirement("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"Computer Science Foundation\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"Complete all of CS1010/CS1101S, CS1231, CS2030, CS2040, CS2100, CS2103T, CS2105, CS2106, CS3230\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CORE, CSF_CONDITIONS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    //Electives, Focus Area"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String ALGORITHMS_PRIMARY \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"(CS3230)|(CS3236)|(CS4231)|(CS4232)|(CS4234)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String ALGORITHMS_PRIMARY_LEVEL_4 \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"(CS4231)|(CS4232)|(CS4234)\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String ALGORITHMS_ELECTIVE \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3233)|(CS4257)|(CS4268)|(CS5230)|(CS5234)|(CS5236)|(CS5237)|(CS5238)|(CS5330)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String AI_PRIMARY \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3243)|(CS3244)|(CS4243)|(CS4244)|(CS4246)|(CS4248)\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String AI_PRIMARY_LEVEL_4 \u003d \"(CS4243)|(CS4244)|(CS4246)|(CS4248)\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String AI_ELECTIVE \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS4216)|(CS4220)|(CS5209)|(CS5215)|(CS5228)|(CS5242)|(CS5247)|(CS5340)|(CS5339)\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String SOFTWARE_ENG_PRIMARY \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"(CS2103T?)|(CS3213)|(CS3219)|(CS4211)|(CS4218)|(CS4239)\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String SOFTWARE_ENG_PRIMARY_LEVEL_4 \u003d \"(CS4211)|(CS4218)|(CS4239)\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String SOFTWARE_ENG_ELECTIVE \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3216)|(CS3217)|(CS3226)|(CS3234)|(CS4217)|(CS5219)|(CS5232)|(CS5272)\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String COMPUTER_GRAPHICS_PRIMARY \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3241)|(CS3242)|(CS3247)|(CS4247)|(CS4350)\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String COMPUTER_GRAPHICS_PRIMARY_LEVEL_4 \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"(CS3247)|(CS4247)|(CS4350)\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String COMPUTER_GRAPHICS_ELECTIVE \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3218)|(CS3240)|(CS3249)|(CS3343)|(CS4240)|(CS4243)|(CS4249)|(CS4344)|(CS4345)|\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        + \"(CS4351)|(CS5237)|(CS5240)|(CS5343)|(CS5346)\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String COMPUTER_SECURITY_PRIMARY \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS2107)|(CS3235)|(CS4236)|(CS4238)|(CS4239)\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String COMPUTER_SECURITY_LEVEL_4 \u003d \"(CS4236)|(CS4238)|(CS4239)\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String COMPUTER_SECURITY_ELECTIVE \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3221)|(CS4257)|(CS5231)|(CS5250)|(CS5321)|(CS5332)|(IFS4101)|(IFS4102)\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DATABASE_SYSTEM_PRIMARY \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS2102)|(CS3223)|(CS4221)|(CS4224)|(CS4225)\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DATABASE_SYSTEM_LEVEL_4 \u003d \"(CS4221)|(CS4224)|(CS4225)\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DATABASE_SYSTEM_ELECTIVE \u003d \"(CS4220)|(CS5226)|(CS5228)|(CS5322)\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MULTIMEDIA_PRIMARY \u003d \"(CS2108)|(CS3245)|(CS4242)|(CS4248)|(CS4347)\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MULTIMEDIA_ELECTIVES \u003d \"(CS5246)|(CS5241)|(CS6242)\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String NETWORK_PRIMARY \u003d \"(CS2105)|(CS3103)|(CS4222)|(CS4226)|(CS4231)\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String NETWORK_PRIMARY_LEVEL_4 \u003d \"(CS4222)|(CS4226)|(CS4231)\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String NETWORK_ELECTIVE \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS4344)|(CS5223)|(CS5224)|(CS5229)|(CS5248)|(CS5321)\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String PARALLEL_PRIMARY \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3210)|(CS3211)|(CS4231)|(CS4223)\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String PARALLEL_PRIMARY_LEVEL_4 \u003d \"(CS4231)|(CS4223)\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String PARALLEL_ELECTIVE \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS4237)|(CS4271)|(CS4345)|(CS5207)|(CS5222)|(CS5223)|(CS5224)|(CS5239)|(CS5250)\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String PROGRAMMING_LANGUAGES_PRIMARY \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS2104)|(CS3211)|(CS4215)|(CS4212)\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String PROGRAMMING_LANGUAGES_ELECTIVE \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \"(CS3234)|(CS4216)|(CS5232)|(CS5214)|(CS5125)|(CS5218)\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String ALL_FOCUS_AREA \u003d ALGORITHMS_PRIMARY + \"|\" + ALGORITHMS_ELECTIVE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + \"|\" + AI_PRIMARY + \"|\" + AI_ELECTIVE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + \"|\" + SOFTWARE_ENG_PRIMARY + \"|\" + SOFTWARE_ENG_ELECTIVE"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + \"|\" + COMPUTER_GRAPHICS_PRIMARY + \"|\" + COMPUTER_GRAPHICS_ELECTIVE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + \"|\" + COMPUTER_SECURITY_PRIMARY + \"|\" + COMPUTER_SECURITY_ELECTIVE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + \"|\" + DATABASE_SYSTEM_PRIMARY + \"|\" + DATABASE_SYSTEM_ELECTIVE"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + \"|\" + PARALLEL_PRIMARY + \"|\" + PARALLEL_ELECTIVE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    + \"|\" + NETWORK_PRIMARY + \"|\" + NETWORK_ELECTIVE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String ALL_FOCUS_AREA_LEVEL_4 \u003d \"CS[4][0-9]{3}\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition ALGORITHMS_PASS_3_PRIMARY \u003d new Condition(3, ALGORITHMS_PRIMARY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition ALGORITHMS_PASS_1_LEVEL4_PRIMARY \u003d new Condition(ALGORITHMS_PRIMARY_LEVEL_4);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition AI_PASS_3_PRIMARY \u003d new Condition(3, AI_PRIMARY);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition AI_PASS_1_LEVEL4_PRIMARY \u003d new Condition(1, AI_PRIMARY_LEVEL_4);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition SE_PASS_3_PRIMARY \u003d new Condition(3, SOFTWARE_ENG_PRIMARY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition SE_PASS_1_LEVEL4_PRIMARY \u003d new Condition(SOFTWARE_ENG_PRIMARY_LEVEL_4);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition AT_LEAST_3_MODS_LEVEL4_ABOVE \u003d new Condition(3, ALL_FOCUS_AREA_LEVEL_4);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition AT_LEAST_6_MODS_FROM_ALL_FOCUS_AREA \u003d new Condition(6, ALL_FOCUS_AREA);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final CourseRequirement FOCUS_AREA_ALGORITHMS \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            new PrimitiveRequirement(\"Focus Area: Algorithms\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete 6 modules from any Focus Area, with at least 3 from Level 4 and \\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + \"3 Area Primary from Algorithms with at least 1 from Level 4 \", BD, ALGORITHMS_PASS_3_PRIMARY,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            ALGORITHMS_PASS_1_LEVEL4_PRIMARY, AT_LEAST_3_MODS_LEVEL4_ABOVE, AT_LEAST_6_MODS_FROM_ALL_FOCUS_AREA);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final CourseRequirement FOCUS_AREA_AI \u003d new PrimitiveRequirement("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Focus Area: Artificial Intelligence\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete 6 modules from any Focus Area, with at least 3 from Level 4 and \\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    + \"3 Area Primary from AI with at least 1 from Level 4 \", BD, AI_PASS_3_PRIMARY,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            AI_PASS_1_LEVEL4_PRIMARY, AT_LEAST_3_MODS_LEVEL4_ABOVE, AT_LEAST_6_MODS_FROM_ALL_FOCUS_AREA);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final CourseRequirement FOCUS_AREA_SOFTWARE_ENG \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            new PrimitiveRequirement(\"Focus Area: Software Engineering\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete 6 modules from any Focus Area, with at least 3 from Level 4 and \\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    + \"3 Area Primary from Software Engineering with at least 1 from Level 4 \", BD, SE_PASS_3_PRIMARY,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SE_PASS_1_LEVEL4_PRIMARY, AT_LEAST_3_MODS_LEVEL4_ABOVE, AT_LEAST_6_MODS_FROM_ALL_FOCUS_AREA);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String[] MATH_REGEXES \u003d {\"MA1521\", \"ST2334\", \"MA1101R\"};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition[] MATH_CONDITIONS \u003d Stream.of(MATH_REGEXES)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            .map(Condition::new).toArray(Condition[]::new);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final CourseRequirement MATH_REQUIREMENT \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            new PrimitiveRequirement(\"Mathematics\", \"Complete MA1521, MA1101R and ST2334\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    CORE, MATH_CONDITIONS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String SCIENCE_REGEX \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"^(?!(MA1521)|(ST2334)|(MA1101R))((MA|ST|PC|LSM|CM|FST)[1-9][0-9]{3}[A-Z]?)$\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition SCIENCE_CONDITION \u003d new Condition(SCIENCE_REGEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final CourseRequirement SCIENCE_REQUIREMENT \u003d new PrimitiveRequirement("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Sciences\", \"Complete 1 Science module other than MA1521, MA1101R, ST2334\","
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                FAC, SCIENCE_CONDITION);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    //Computer Systems Team Project"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition CONDITION_CS3203 \u003d new Condition(\"CS3203\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition CONDITION_CS3216_CS3217 \u003d new Condition(2, \"CS3216|CS3217\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition CONDITION_CS3281_CS3282 \u003d new Condition(2, \"CS3281|CS3282\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final CourseRequirement COMPUTER_SYSTEM_TEAM_PROJECT \u003d new CompositeRequirement("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new CompositeRequirement("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    new PrimitiveRequirement(\"Computer Systems Team Project\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                            \"(Complete CS3203)\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                            BD, CONDITION_CS3203),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    new PrimitiveRequirement(\"Complete CS3216 and CS3217\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    \"Complete CS3216 and CS3217\", BD, CONDITION_CS3216_CS3217),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    CompositeRequirement.LogicalConnector.OR, BD),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new PrimitiveRequirement(\"Complete CS3281 and CS3282\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete CS3281 and CS3282\", BD, CONDITION_CS3281_CS3282),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            CompositeRequirement.LogicalConnector.OR, BD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    //Industry Experience Requirement"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition CP3880 \u003d new Condition(\"CP3880\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition CP3200 \u003d new Condition(\"CP3200\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition CP3202_CP3107 \u003d new Condition(\"CP3202|CP3107\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition IS4010 \u003d new Condition(\"IS4010\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final CourseRequirement INDUSTRIAL_SYSTEM_EXPERIENCE \u003d new PrimitiveRequirement("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"Industrial Experience Requirement\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete 1 6-month Internship through ATAP\", IE, CP3880)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            .or(new PrimitiveRequirement(\"Complete 2 3-month Internships\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \"Complete CP3200 and CP3202\", IE, CP3200, CP3202_CP3107))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .or(new PrimitiveRequirement(\"Complete IS4010\", \"Complete IS4010\", IE, IS4010));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    //Unrestricted Electives"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final Condition COMPLETE_40_MODULES \u003d new Condition(40, \".*\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final CourseRequirement TOTAL_MODULE_COUNT \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            new PrimitiveRequirement(\"Unrestricted Electives\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \"Complete at least 40 modules to graduate\", UE, COMPLETE_40_MODULES);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 119,
      "lshwayne96": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Contains utility methods for populating {@code GradTrak} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final int NUM_SEMS \u003d 10;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static ModuleTaken[] getSampleModulesTaken() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new ModuleTaken[] {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleTaken(new ModuleInfoCode(\"CS2103T\"), Semester.valueOf(\"Y1S1\"), Grade.valueOf(\"C\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Grade.valueOf(\"A\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleTaken(new ModuleInfoCode(\"CS2101\"), Semester.valueOf(\"Y1S1\"), Grade.valueOf(\"C\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Grade.valueOf(\"A\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleTaken(new ModuleInfoCode(\"CS1010\"), Semester.valueOf(\"Y2S1\"), Grade.valueOf(\"C\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Grade.valueOf(\"A\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleTaken(new ModuleInfoCode(\"LSM1301\"), Semester.valueOf(\"Y2S2\"), Grade.valueOf(\"C\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Grade.valueOf(\"A\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleTaken(new ModuleInfoCode(\"GER1000\"), Semester.valueOf(\"Y2S1\"), Grade.valueOf(\"C\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Grade.valueOf(\"A\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleTaken(new ModuleInfoCode(\"MA1521\"), Semester.valueOf(\"Y2S2\"), Grade.valueOf(\"C\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Grade.valueOf(\"A\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static List\u003cSemLimit\u003e getSampleSemesterLimits() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        List\u003cSemLimit\u003e semList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (int i \u003d 0; i \u003c NUM_SEMS; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semList.add(new SemLimit(new CapAverage(2.0), new CapAverage(5.0), new Hour(\"5.0\"), new Hour(\"9.0\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    new Hour(\"2.5\"), new Hour(\"5.0\"), new Hour(\"2.0\"), new Hour(\"5.0\"), new Hour(\"2.0\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                    new Hour(\"5.0\"), new Hour(\"6.0\"), new Hour(\"10.0\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return semList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static ReadOnlyGradTrak getSampleGradTrak() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak sampleAb \u003d new GradTrak();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (ModuleTaken sampleModuleTaken : getSampleModulesTaken()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            sampleAb.addModuleTaken(sampleModuleTaken);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        sampleAb.setSemesterLimits(getSampleSemesterLimits());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        sampleAb.setCurrentSemester(Semester.Y1S1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "monikernemo": 19,
      "alexchong711": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/GradTrakStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents a storage for {@link GradTrak}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public interface GradTrakStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Path getGradTrakFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns GradTrak data as a {@link ReadOnlyGradTrak}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cReadOnlyGradTrak\u003e readGradTrak() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @see #getGradTrakFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cReadOnlyGradTrak\u003e readGradTrak(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Saves the given {@link ReadOnlyGradTrak} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void saveGradTrak(ReadOnlyGradTrak addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @see #saveGradTrak(ReadOnlyGradTrak)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void saveGradTrak(ReadOnlyGradTrak addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModuleTaken.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Workload;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Jackson-friendly version of {@link ModuleTaken}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "class JsonAdaptedModuleTaken {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"ModuleTaken\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String moduleInfoCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String expectedMinGrade;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String expectedMaxGrade;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String lectureHour;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String tutorialHour;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String labHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String projectHour;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final String preparationHour;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonAdaptedModuleTaken} with the given moduleTaken details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedModuleTaken(@JsonProperty(\"moduleInfoCode\") String moduleInfoCode,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                  @JsonProperty(\"semester\") String semester,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                  @JsonProperty(\"expectedMinGrade\") String expectedMinGrade,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                  @JsonProperty(\"expectedMaxGrade\") String expectedMaxGrade,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                  @JsonProperty(\"lectureHour\") String lectureHour,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                  @JsonProperty(\"tutorialHour\") String tutorialHour,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                  @JsonProperty(\"labHour\") String labHour,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                  @JsonProperty(\"projectHour\") String projectHour,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                  @JsonProperty(\"preparationHour\") String preparationHour,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.moduleInfoCode \u003d moduleInfoCode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.expectedMinGrade \u003d expectedMinGrade;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.expectedMaxGrade \u003d expectedMaxGrade;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.lectureHour \u003d lectureHour;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.tutorialHour \u003d tutorialHour;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.labHour \u003d labHour;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.projectHour \u003d projectHour;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.preparationHour \u003d preparationHour;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts a given {@code ModuleTaken} into this class for Jackson use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedModuleTaken(ModuleTaken source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        moduleInfoCode \u003d source.getModuleInfoCode().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        semester \u003d source.getSemester().name();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedMinGrade \u003d source.getExpectedMinGrade().name();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedMaxGrade \u003d source.getExpectedMaxGrade().name();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        lectureHour \u003d source.getLectureHour().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        tutorialHour \u003d source.getTutorialHour().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        labHour \u003d source.getLabHour().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        projectHour \u003d source.getProjectHour().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        preparationHour \u003d source.getPreparationHour().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted moduleTaken object into the model\u0027s {@code ModuleTaken} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted moduleTaken."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTaken toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (moduleInfoCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleInfoCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!ModuleInfoCode.isValidModuleInfoCode(moduleInfoCode)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(ModuleInfoCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final ModuleInfoCode modelName \u003d new ModuleInfoCode(moduleInfoCode);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (semester \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    Semester.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Semester.isValidSemesterForTakingModules(semester)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final Semester modelSemester \u003d Semester.valueOf(semester);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (expectedMinGrade \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Grade.isValidGrade(expectedMinGrade)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final Grade modelExpectedMinGrade \u003d Grade.getGrade(expectedMinGrade);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (expectedMaxGrade \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Grade.isValidGrade(expectedMaxGrade)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final Grade modelExpectedMaxGrade \u003d Grade.getGrade(expectedMaxGrade);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (lectureHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Hour.isValidHour(lectureHour)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final Hour modelLectureHour \u003d new Hour(lectureHour);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (tutorialHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Hour.isValidHour(tutorialHour)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final Hour modelTutorialHour \u003d new Hour(tutorialHour);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (labHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Hour.isValidHour(labHour)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final Hour modelLabHour \u003d new Hour(labHour);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (projectHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Hour.isValidHour(projectHour)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final Hour modelProjectHour \u003d new Hour(projectHour);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (preparationHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        if (!Hour.isValidHour(preparationHour)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new IllegalValueException(Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final Hour modelPreparationHour \u003d new Hour(preparationHour);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final Workload modelWorkload \u003d new Workload(modelLectureHour, modelTutorialHour, modelLabHour,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                modelProjectHour, modelPreparationHour);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new ModuleTaken(modelName, modelSemester, modelExpectedMinGrade,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                modelExpectedMaxGrade, modelWorkload, modelTags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "monikernemo": 31,
      "alexchong711": 86,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSemLimit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Jackson-friendly version of {@link SemLimit}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonAdaptedSemLimit {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SemLimit\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String minGrade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String maxGrade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String minLectureHour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String maxLectureHour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String minTutorialHour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String maxTutorialHour;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String minLabHour;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String maxLabHour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String minProjectHour;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String maxProjectHour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String minPreparationHour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String maxPreparationHour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonAdaptedSemLimit} with the given details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedSemLimit(@JsonProperty(\"minGrade\") String minGrade,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"maxGrade\") String maxGrade,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"minLectureHour\") String minLectureHour,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"maxLectureHour\") String maxLectureHour,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"minTutorialHour\") String minTutorialHour,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"maxTutorialHour\") String maxTutorialHour,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"minLabHour\") String minLabHour,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"maxLabHour\") String maxLabHour,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"minProjectHour\") String minProjectHour,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"maxProjectHour\") String maxProjectHour,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"minPreparationHour\") String minPreparationHour,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"maxPreparationHour\") String maxPreparationHour) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minGrade \u003d minGrade;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxGrade \u003d maxGrade;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minLectureHour \u003d minLectureHour;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxLectureHour \u003d maxLectureHour;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minTutorialHour \u003d minTutorialHour;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxTutorialHour \u003d maxTutorialHour;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minLabHour \u003d minLabHour;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxLabHour \u003d maxLabHour;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minProjectHour \u003d minProjectHour;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxProjectHour \u003d maxProjectHour;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minPreparationHour \u003d minPreparationHour;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxPreparationHour \u003d maxPreparationHour;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts a give {@code SemLimit} into this class for Jackson use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedSemLimit(SemLimit semLimit) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.minGrade \u003d semLimit.getMinCap().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.maxGrade \u003d semLimit.getMaxCap().toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minLectureHour \u003d semLimit.getMinLectureHour().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxLectureHour \u003d semLimit.getMaxLectureHour().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minTutorialHour \u003d semLimit.getMinTutorialHour().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxTutorialHour \u003d semLimit.getMaxTutorialHour().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minLabHour \u003d semLimit.getMinLabHour().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxLabHour \u003d semLimit.getMaxLabHour().toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minProjectHour \u003d semLimit.getMinProjectHour().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxProjectHour \u003d semLimit.getMaxProjectHour().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minPreparationHour \u003d semLimit.getMinPreparationHour().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.maxPreparationHour \u003d semLimit.getMaxPreparationHour().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getMinGrade() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return minGrade;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public String getMaxGrade() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return maxGrade;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted SemLimit object into model\u0027s {@code SemLimit} object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there are any data constraints violated in adapted SemLimit"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public SemLimit toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (minGrade \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"minGrade\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (maxGrade \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"maxGrade\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (minLectureHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \"minLectureHour\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (maxLectureHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \"maxLectureHour\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (minTutorialHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"minTutorialHour\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (maxTutorialHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"maxTutorialHour\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (minLabHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"minLabHour\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (maxLabHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"maxLabHour\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (minProjectHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"minProjectHour\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (maxProjectHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"maxProjectHour\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (minPreparationHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"minPreparationHour\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (maxPreparationHour \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"maxPreparationHour\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return new SemLimit(new CapAverage(0.0), new CapAverage(0.0), new Hour(minLectureHour),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new Hour(maxLectureHour), new Hour(minTutorialHour), new Hour(maxTutorialHour),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new Hour(minLabHour), new Hour(maxLabHour), new Hour(minProjectHour),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new Hour(maxProjectHour), new Hour(minPreparationHour), new Hour(maxPreparationHour));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 12,
      "monikernemo": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSemesterLimits.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCredits;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Class to extract information form JSON file and convert it into SemLimit Objects"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class JsonAdaptedSemesterLimits {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double minCap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double maxCap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double minLectureHour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double maxLectureHour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double minTutorialHour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double maxTutorialHour;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double minLabHour;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double maxLabHour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double minProjectHour;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double maxProjectHour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double minPreparationHour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final double maxPreparationHour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Constructs a {@code JsonAdaptedSemesterLimits} with the given SemLimit details from JSON file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public JsonAdaptedSemesterLimits(@JsonProperty(\"MinCap\") double minCap,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MaxCap\") double maxCap,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MinLectureHour\") double minLectureHour,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MaxLectureHour\") double maxLectureHour,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MinTutorialHour\") double minTutorialHour,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MaxTutorialHour\") double maxTutorialHour,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MinLabHour\") double minLabHour,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MaxLabHour\") double maxLabHour,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MinProjectHour\") double minProjectHour,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MaxProjectHour\") double maxProjectHour,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MinPreparationHour\") double minPreparationHour,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                 @JsonProperty(\"MaxPreparationHour\") double maxPreparationHour) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minCap \u003d minCap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxCap \u003d maxCap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minLectureHour \u003d minLectureHour;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxLectureHour \u003d maxLectureHour;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minTutorialHour \u003d minTutorialHour;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxTutorialHour \u003d maxTutorialHour;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minLabHour \u003d minLabHour;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxLabHour \u003d maxLabHour;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minProjectHour \u003d minProjectHour;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxProjectHour \u003d maxProjectHour;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minPreparationHour \u003d minPreparationHour;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxPreparationHour \u003d maxPreparationHour;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Converts a given {@code SemLimit} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public JsonAdaptedSemesterLimits(SemLimit source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minCap \u003d source.getMinCap().getCapLimit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxCap \u003d source.getMaxCap().getCapLimit();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minLectureHour \u003d source.getMinLectureHour().getHour();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxLectureHour \u003d source.getMaxLectureHour().getHour();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minTutorialHour \u003d source.getMinTutorialHour().getHour();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxTutorialHour \u003d source.getMaxTutorialHour().getHour();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minLabHour \u003d source.getMinLabHour().getHour();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxLabHour \u003d source.getMaxLabHour().getHour();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minProjectHour \u003d source.getMinProjectHour().getHour();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxProjectHour \u003d source.getMaxProjectHour().getHour();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minPreparationHour \u003d source.getMinPreparationHour().getHour();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxPreparationHour \u003d source.getMaxPreparationHour().getHour();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Converts this Jackson-friendly adapted SemLimit object into the model\u0027s {@code SemLimit} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted SemLimit."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimit toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage minCap \u003d new CapAverage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minCap.addWeightedGrade(this.minCap, new ModuleInfoCredits(CapAverage.SINGLE_CREDIT));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        CapAverage maxCap \u003d new CapAverage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxCap.addWeightedGrade(this.maxCap, new ModuleInfoCredits(CapAverage.SINGLE_CREDIT));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour minLectureHour \u003d new Hour(String.valueOf(this.minLectureHour));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour maxLectureHour \u003d new Hour(String.valueOf(this.maxLectureHour));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour minTutorialHour \u003d new Hour(String.valueOf(this.minTutorialHour));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour maxTutorialHour \u003d new Hour(String.valueOf(this.maxTutorialHour));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour minLabHour \u003d new Hour(String.valueOf(this.minLabHour));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour maxLabHour \u003d new Hour(String.valueOf(this.maxLabHour));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour minProjectHour \u003d new Hour(String.valueOf(this.minProjectHour));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour maxProjectHour \u003d new Hour(String.valueOf(this.maxProjectHour));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour minPreparationHour \u003d new Hour(String.valueOf(this.minPreparationHour));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Hour maxPreparationHour \u003d new Hour(String.valueOf(this.maxPreparationHour));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new SemLimit(minCap, maxCap, minLectureHour, maxLectureHour, minTutorialHour, maxTutorialHour,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                minLabHour, maxLabHour, minProjectHour, maxProjectHour, minPreparationHour, maxPreparationHour);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedUserInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.coursestorage.JsonAdaptedCourse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A class to access UserInfo stored in hard disk as a Json File"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonAdaptedUserInfo {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"UserInfo\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final JsonAdaptedCourse course;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String currentSemester;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final JsonAdaptedSemesterLimits semLimit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonAdaptedUserInfo} with given details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedUserInfo(@JsonProperty(\"course\") JsonAdaptedCourse course,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                               @JsonProperty(\"currentSemester\") String currentSemester,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                               @JsonProperty(\"semLimit\") JsonAdaptedSemesterLimits semLimit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.course \u003d course;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.currentSemester \u003d currentSemester;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.semLimit \u003d semLimit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts a {@code UserInfo} into this class for Jackson use"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedUserInfo(UserInfo userInfo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.course \u003d new JsonAdaptedCourse(userInfo.getCourse());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.currentSemester \u003d userInfo.getCurrentSemester().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semLimit \u003d new JsonAdaptedSemesterLimits(userInfo.getSemLimit());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted object into model\u0027s {@code UserInfo} object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there are any data constraints violated in adapted UserInfo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public UserInfo toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (course \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"course\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (currentSemester \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, \"currentSemester\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (semLimit \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException((String.format(MISSING_FIELD_MESSAGE_FORMAT, \"semLimit\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final Course modelCourse \u003d course.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final Semester modelSemester \u003d Semester.valueOf(currentSemester);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final SemLimit modelSemLimit \u003d semLimit.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new UserInfo(modelCourse, modelSemester, modelSemLimit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 68,
      "alexchong711": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonGradTrakStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A class to access GradTrak data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonGradTrakStorage implements GradTrakStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonGradTrakStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonGradTrakStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Path getGradTrakFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cReadOnlyGradTrak\u003e readGradTrak() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return readGradTrak(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Similar to {@link #readGradTrak()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cReadOnlyGradTrak\u003e readGradTrak(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cJsonSerializableGradTrak\u003e jsonGradTrak \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                filePath, JsonSerializableGradTrak.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!jsonGradTrak.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.of(jsonGradTrak.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void saveGradTrak(ReadOnlyGradTrak addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        saveGradTrak(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Similar to {@link #saveGradTrak(ReadOnlyGradTrak)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void saveGradTrak(ReadOnlyGradTrak gradTrak, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(gradTrak);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGradTrak(gradTrak), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "monikernemo": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableGradTrak.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * An Immutable GradTrak that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "@JsonRootName(value \u003d \"gradtrak\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "class JsonSerializableGradTrak {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULES_TAKEN \u003d \"ModulesTaken list contains duplicate moduleTaken(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cJsonAdaptedModuleTaken\u003e modulesTaken \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final List\u003cJsonAdaptedSemesterLimits\u003e semesterLimitList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final int currentSemesterIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonSerializableGradTrak} with the given modulesTaken."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public JsonSerializableGradTrak(@JsonProperty(\"modulesTaken\") List\u003cJsonAdaptedModuleTaken\u003e modulesTaken,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                            @JsonProperty(\"semesterLimitList\") List\u003cJsonAdaptedSemesterLimits\u003e semesterLimitList,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                            @JsonProperty(\"currentSemesterIndex\") int currentSemesterIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.modulesTaken.addAll(modulesTaken);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.semesterLimitList.addAll(semesterLimitList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.currentSemesterIndex \u003d currentSemesterIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts a given {@code ReadOnlyGradTrak} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableGradTrak}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonSerializableGradTrak(ReadOnlyGradTrak source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modulesTaken.addAll(source.getModulesTakenList()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .stream().map(JsonAdaptedModuleTaken::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        semesterLimitList.addAll(source.getSemesterLimitList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .stream().map(JsonAdaptedSemesterLimits::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        currentSemesterIndex \u003d source.getCurrentSemester().getIndex();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this address book into the model\u0027s {@code GradTrak} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public GradTrak toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak gradTrak \u003d new GradTrak();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        gradTrak.setCurrentSemester(Semester.getSemesterByZeroIndex(currentSemesterIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (JsonAdaptedModuleTaken jsonAdaptedModuleTaken : modulesTaken) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            ModuleTaken moduleTaken \u003d jsonAdaptedModuleTaken.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (gradTrak.hasModuleTaken(moduleTaken)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULES_TAKEN);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            gradTrak.addModuleTaken(moduleTaken);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        List\u003cSemLimit\u003e semList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (JsonAdaptedSemesterLimits jsonAdaptedSemesterLimits : semesterLimitList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semList.add(jsonAdaptedSemesterLimits.toModelType());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        gradTrak.setSemesterLimits(semList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new GradTrak(gradTrak);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 60,
      "alexchong711": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public interface Storage extends GradTrakStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Path getGradTrakFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cReadOnlyGradTrak\u003e readGradTrak() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void saveGradTrak(ReadOnlyGradTrak addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "monikernemo": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Manages storage of GradTrak data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private GradTrakStorage gradTrakStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public StorageManager(GradTrakStorage gradTrakStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.gradTrakStorage \u003d gradTrakStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GradTrak methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Path getGradTrakFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return gradTrakStorage.getGradTrakFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cReadOnlyGradTrak\u003e readGradTrak() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return readGradTrak(gradTrakStorage.getGradTrakFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cReadOnlyGradTrak\u003e readGradTrak(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return gradTrakStorage.readGradTrak(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void saveGradTrak(ReadOnlyGradTrak addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        saveGradTrak(addressBook, gradTrakStorage.getGradTrakFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void saveGradTrak(ReadOnlyGradTrak addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        gradTrakStorage.saveGradTrak(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "monikernemo": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserInfoStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents a storage for {@link UserInfo}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public interface UserInfoStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns FilePath of UserInfo file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Path getUserInfoFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an optional CourseList of some of the courses in nus"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return An optional courseList of moduleInfo of all available modules"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cUserInfo\u003e readUserInfoFile(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cUserInfo\u003e readUserInfoFile()throws DataConversionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Saves the given {@link UserInfo} at default filePath"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param userInfo"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void saveUserInfo(UserInfo userInfo) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Saves the given {@link UserInfo} to the storage at {@link Path}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param userInfo cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    void saveUserInfo(UserInfo userInfo, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserInfoStorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Manages storage of user info in local storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class UserInfoStorageManager implements UserInfoStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UserInfoStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Path filePath \u003d Paths.get(\"userinfo.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public UserInfoStorageManager(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public UserInfoStorageManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Path getUserInfoFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cUserInfo\u003e readUserInfoFile(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cJsonAdaptedUserInfo\u003e jsonUserInfo \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                JsonAdaptedUserInfo.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!jsonUserInfo.isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.of(jsonUserInfo.get().toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cUserInfo\u003e readUserInfoFile() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return readUserInfoFile(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void saveUserInfo(UserInfo userInfo) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        saveUserInfo(userInfo, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void saveUserInfo(UserInfo userInfo, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(userInfo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedUserInfo(userInfo), filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "monikernemo": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/CourseManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Manages storage of All the course data in local storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class CourseManager implements CourseStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CourseManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private static final String inputStreamPath \u003d \"/json/course.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private CourseStorage courseStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseManager() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseStorage \u003d new JsonCourseStorage(inputStreamPath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getCourseInputStreamPath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return inputStreamPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cCourseList\u003e readCourseFile(String inputStreamPath) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + inputStreamPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseStorage.readCourseFile(inputStreamPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cCourseList\u003e readCourseFile() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseStorage.readCourseFile(courseStorage.getCourseInputStreamPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 39,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/CourseStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Represents a storage for {@link Course}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public interface CourseStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the file path of the data file containing all course Information and listings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    String getCourseInputStreamPath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an optional CourseList of some of the courses in nus"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param inputStreamPath"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @return An optional courseList of moduleInfo of all available modules"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cCourseList\u003e readCourseFile(String inputStreamPath) throws DataConversionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cCourseList\u003e readCourseFile()throws DataConversionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/JsonAdaptedCompositeRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CompositeRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseReqType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseRequirement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.PrimitiveRequirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Jackson-friendly version of {@link CompositeRequirement}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonAdaptedCompositeRequirement implements JsonAdaptedCourseRequirement {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CompositeRequirement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final JsonAdaptedCourseRequirement first;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final JsonAdaptedCourseRequirement second;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String logicalConnector;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String courseReqType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonAdaptedCompositeRequirement} with given Composite Requirement details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedCompositeRequirement(@JsonProperty(\"first\") JsonAdaptedCourseRequirement first,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                           @JsonProperty(\"second\") JsonAdaptedCourseRequirement second,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                           @JsonProperty(\"LogicalConnector\") String logicalConnector,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                           @JsonProperty(\"courseReqType\") String courseReqType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.logicalConnector \u003d logicalConnector;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqType \u003d courseReqType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts a {@code CompositeRequirement} into this class for Jackson use"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedCompositeRequirement(CompositeRequirement requirement) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (requirement.getFirst() instanceof CompositeRequirement) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.first \u003d new JsonAdaptedCompositeRequirement((CompositeRequirement) requirement.getFirst());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.first \u003d new JsonAdaptedPrimitiveRequirement((PrimitiveRequirement) requirement.getFirst());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (requirement.getSecond() instanceof CompositeRequirement) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.second \u003d new JsonAdaptedCompositeRequirement((CompositeRequirement) requirement.getSecond());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.second \u003d new JsonAdaptedPrimitiveRequirement((PrimitiveRequirement) requirement.getSecond());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.logicalConnector \u003d requirement.getLogicalConnector().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.courseReqType \u003d requirement.getCourseReqType().name();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted course object into the model\u0027s {@code CourseRequirement} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Composite Requirement."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (first \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"first requirement\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (second \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"second requirement\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (logicalConnector \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Logical Connector\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (courseReqType \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Course Requirement Type\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new CompositeRequirement(first.toModelType(), second.toModelType(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                CompositeRequirement.LogicalConnector.valueOf(logicalConnector),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                CourseReqType.valueOf(courseReqType));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 87,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/JsonAdaptedCondition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Condition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Jackson-friendly version of {@link Condition}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonAdaptedCondition {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Condition\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String minToSatisfy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String pattern;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonAdaptedCondition} given condition details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param minToSatisfy minimum number of regexes matches to satisfy condition"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param pattern regular expression to be matched"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedCondition(@JsonProperty(\"minToSatisfy\") String minToSatisfy,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                @JsonProperty(\"pattern\") String pattern) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minToSatisfy \u003d minToSatisfy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d pattern;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts a give {@code Condition} into this class for Jackson use"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param condition a condition object to be converted into JsonAdaptedCondition"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedCondition(Condition condition) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minToSatisfy \u003d String.valueOf(condition.getMinToSatisfy());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d condition.getPattern().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted condition object into the model\u0027s {@code Condition} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted condition."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Condition toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (minToSatisfy \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"minToSatisfy\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (pattern \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        Pattern.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            final int minToSatisfy \u003d Integer.parseInt(this.minToSatisfy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new Condition(minToSatisfy, pattern);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException(String.format(\"minToSatisfy not parseable as integer\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/JsonAdaptedCourse.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CompositeRequirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseRequirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.PrimitiveRequirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Jackson-friendly version of {@link Course}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonAdaptedCourse {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Course\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cJsonAdaptedCourseRequirement\u003e requirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonAdaptedCourse} with the given Course details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedCourse(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                             @JsonProperty(\"description\") String courseDescription,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedCourseRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.description \u003d courseDescription;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (requirements !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.requirements.addAll(requirements);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts a given {@code Course} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedCourse(Course course) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        name \u003d course.getCourseName().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        description \u003d course.getCourseDescription().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cCourseRequirement\u003e requirements \u003d course.getCourseRequirements();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (CourseRequirement requirement : requirements) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (requirement instanceof PrimitiveRequirement) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                this.requirements.add(new JsonAdaptedPrimitiveRequirement("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        (PrimitiveRequirement) requirement));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                this.requirements.add(new JsonAdaptedCompositeRequirement("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        (CompositeRequirement) requirement));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted course object into the model\u0027s {@code Course} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted course."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Course toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, CourseName.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, CourseDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final CourseName courseName \u003d new CourseName(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final CourseDescription courseDescription \u003d new CourseDescription(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final List\u003cCourseRequirement\u003e requirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (JsonAdaptedCourseRequirement courseRequirement : this.requirements) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            requirements.add(courseRequirement.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new Course(courseName, courseDescription, requirements.toArray(new CourseRequirement[0]));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/JsonAdaptedCourseRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseRequirement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Jackson-friendly version of {@link CourseRequirement}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "@JsonTypeInfo("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        use \u003d JsonTypeInfo.Id.NAME,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        include \u003d JsonTypeInfo.As.PROPERTY,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        property \u003d \"type\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedPrimitiveRequirement.class,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                name \u003d \"PrimitiveReq\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @JsonSubTypes.Type(value \u003d JsonAdaptedCompositeRequirement.class,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                name \u003d \"CompositeReq\") }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public interface JsonAdaptedCourseRequirement {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted moduleTaken object into the model\u0027s {@code CourseRequirement}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * interface objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if unacceptable values of CourseRequirements are used"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    CourseRequirement toModelType() throws IllegalValueException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/JsonAdaptedPrimitiveRequirement.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Condition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseReqType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseRequirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.PrimitiveRequirement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A Jackson-friendly version of {@link PrimitiveRequirement}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonAdaptedPrimitiveRequirement implements JsonAdaptedCourseRequirement {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"PrimitiveRequirement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String requirementName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String requirementDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final String requirementType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cJsonAdaptedCondition\u003e conditions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Creates a {@code JsonAdaptedPrimitiveRequirement} with Primitive Requirement details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedPrimitiveRequirement(@JsonProperty(\"requirementName\") String requirementName,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                           @JsonProperty(\"requirementDescription\") String requirementDescription,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                           @JsonProperty(\"requirementType\") String requirementType,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                           @JsonProperty(\"conditions\") List\u003cJsonAdaptedCondition\u003e conditions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                           ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.requirementName \u003d requirementName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.requirementDescription \u003d requirementDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.conditions \u003d conditions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.requirementType \u003d requirementType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Creates a {@code JsonAdaptedPrimitiveRequirement} from a given Primitive Requirement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonAdaptedPrimitiveRequirement(PrimitiveRequirement primitiveRequirement) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.requirementName \u003d primitiveRequirement.getCourseReqName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.requirementDescription \u003d primitiveRequirement.getCourseReqDesc();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.conditions \u003d primitiveRequirement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .getConditions()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .map(JsonAdaptedCondition::new)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.requirementType \u003d primitiveRequirement.getType().name();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this Jackson-friendly adapted primitive requirement object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * into the model\u0027s {@code PrimitiveRequirement} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted moduleTaken."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseRequirement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this.requirementName \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, \"requirementName\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this.requirementDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"requirementDescription\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this.conditions \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"condition\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (this.requirementType \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"requirementType\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final List\u003cCondition\u003e modelConditions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (JsonAdaptedCondition condition: conditions) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            modelConditions.add(condition.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new PrimitiveRequirement(requirementName, requirementDescription,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseReqType.valueOf(requirementType), modelConditions.toArray(new Condition[0]));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 92,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/JsonCourseStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A class to access Course info data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonCourseStorage implements CourseStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCourseStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private String inputStreamPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonCourseStorage(String inputStreamPath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.inputStreamPath \u003d inputStreamPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getCourseInputStreamPath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return inputStreamPath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cCourseList\u003e readCourseFile(String inputStreamPath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(inputStreamPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cJsonSerializableCourseList\u003e jsonSerializableCourseList \u003d JsonUtil.readJsonFileFromInputStream("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                inputStreamPath, JsonSerializableCourseList.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!jsonSerializableCourseList.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.of(jsonSerializableCourseList.get().toModelType());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.info(\"Illegal values found in \" + inputStreamPath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cCourseList\u003e readCourseFile() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return readCourseFile(inputStreamPath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Temporary use will remove"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void saveCourse(List\u003cJsonAdaptedCourse\u003e courseList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(courseList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCourseList(courseList), filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/coursestorage/JsonSerializableCourseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.storage.coursestorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * An Immutable Course List that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "@JsonRootName(value \u003d \"courseList\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonSerializableCourseList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final List\u003cJsonAdaptedCourse\u003e courseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Constructs a {@code JsonSerializableCourseList} with the given Courses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonSerializableCourseList(@JsonProperty(\"courseList\") List\u003cJsonAdaptedCourse\u003e courseList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseList.addAll(courseList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Converts this CourseList into the model\u0027s {@code CourseList} object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public CourseList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseList courseList \u003d new CourseList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (JsonAdaptedCourse jsonAdaptedCourse : this.courseList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            Course course \u003d jsonAdaptedCourse.toModelType();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            courseList.addCourse(course);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/moduleinfostorage/JsonAdaptedModuleInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.storage.moduleinfostorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Class to extract information form JSON file and convert it into ModuleInfo Objects"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class JsonAdaptedModuleInfo {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module has a missing field %s!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final double credits;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String workload;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String preclusions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String department;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final String prerequisites;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Constructs a {@code JsonAdaptedModuleInfo} with the given Module details from JSON file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public JsonAdaptedModuleInfo(@JsonProperty(\"ModuleCode\") String code,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 @JsonProperty(\"ModuleTitle\") String title,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 @JsonProperty(\"Department\") String department,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 @JsonProperty(\"ModuleDescription\") String description,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 @JsonProperty(\"ModuleCredit\") double credits,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 @JsonProperty(\"Workload\") String workLoad,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 @JsonProperty(\"Preclusion\") String preclusions,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 @JsonProperty(\"Prerequisite\")String prerequisite) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (prerequisite \u003d\u003d null || prerequisite.equalsIgnoreCase(\"NIL\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.prerequisites \u003d \"No prerequisites needed\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.prerequisites \u003d prerequisite;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.description \u003d \"No work load information provided\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (workLoad \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.workload \u003d \"No work load information provided\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.workload \u003d workLoad;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (preclusions \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.preclusions \u003d \"No preclusions provided\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            this.preclusions \u003d preclusions;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Converts this Jackson-friendly adapted ModuleInfo object into the model\u0027s {@code ModuleInfo} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ModuleInfo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfo toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (code \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \" module code\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \" module title\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (department \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \" module department\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return new ModuleInfo(code, title, credits, description, workload, preclusions, department, prerequisites);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/moduleinfostorage/JsonModuleInfoStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.storage.moduleinfostorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.commons.util.JsonUtil.readJsonFileFromInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * A class to access Module info data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class JsonModuleInfoStorage implements ModuleInfoStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleInfoStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private String inputStreamPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public JsonModuleInfoStorage(String inputStreamPath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.inputStreamPath \u003d inputStreamPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getModuleInfoInputStreamPath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return inputStreamPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public Optional\u003cModuleInfoList\u003e readModuleInfoFile() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return readModuleInfoFile(this.inputStreamPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Similar to {@link #readModuleInfoFile()}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param inputStreamPath location of the data. Cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cModuleInfoList\u003e readModuleInfoFile(String inputStreamPath) throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requireNonNull(inputStreamPath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cJsonSerializableModuleInfoList\u003e moduleInfoListOptional \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                readJsonFileFromInputStream(inputStreamPath, JsonSerializableModuleInfoList.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!moduleInfoListOptional.isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return Optional.of(moduleInfoListOptional.get().toModelType());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.info(\"Illegal values found in \" + inputStreamPath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 41,
      "monikernemo": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/moduleinfostorage/JsonSerializableModuleInfoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.storage.moduleinfostorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * An Immutable Module Information List that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "@JsonRootName(value \u003d \"moduleinfolist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class JsonSerializableModuleInfoList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private final List\u003cJsonAdaptedModuleInfo\u003e moduleInfoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Constructs a {@code JsonSerializableModuleInfoList} with the given Module Information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public JsonSerializableModuleInfoList(@JsonProperty(\"ModuleList\") List\u003cJsonAdaptedModuleInfo\u003e moduleInfoList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.moduleInfoList.addAll(moduleInfoList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Converts this Module Info List into the model\u0027s {@code ModuleInfoList} object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ModuleInfoList moduleinfolist \u003d new ModuleInfoList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        for (JsonAdaptedModuleInfo jsonAdaptedModuleInfo : moduleInfoList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            ModuleInfo moduleInfo \u003d jsonAdaptedModuleInfo.toModelType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            moduleinfolist.addModuleInfo(moduleInfo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return moduleinfolist;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/moduleinfostorage/ModuleInfoManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.storage.moduleinfostorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Manages storage of All the module information data in local storage."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class ModuleInfoManager implements ModuleInfoStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModuleInfoManager.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private static final String inputStreamPath \u003d \"/json/AllModules.json\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ModuleInfoStorage moduleInfoStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public ModuleInfoManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.moduleInfoStorage \u003d new JsonModuleInfoStorage(inputStreamPath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cModuleInfoList\u003e readModuleInfoFile()throws DataConversionException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return readModuleInfoFile(moduleInfoStorage.getModuleInfoInputStreamPath());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Optional\u003cModuleInfoList\u003e readModuleInfoFile(String inputStreamPath) throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + inputStreamPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return moduleInfoStorage.readModuleInfoFile(inputStreamPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getModuleInfoInputStreamPath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return inputStreamPath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 30,
      "monikernemo": 9,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/moduleinfostorage/ModuleInfoStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.storage.moduleinfostorage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public interface ModuleInfoStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Returns the file path of the data file containing all module Information and listings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    String getModuleInfoInputStreamPath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Returns an arraylist of all the available modules in nus"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @param inputStreamPath"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return An ArrayList of moduleInfo of all available modules"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    Optional\u003cModuleInfoList\u003e readModuleInfoFile(String inputStreamPath) throws DataConversionException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    Optional\u003cModuleInfoList\u003e readModuleInfoFile()throws DataConversionException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 26,
      "monikernemo": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ClassForPrinting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cClassForPrinting\u003e selectedPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // Load moduleTaken page when selected moduleTaken changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            loadBrowerPanelPage(newValue);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Loads a class for printing into the browser panel page."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * If the class for printing is a ModuleTaken, it will print the details which includes the workload information"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * that is not shown in the person card."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * If the class is a LimitChecker, it will print the generated checked report."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private void loadBrowerPanelPage(ClassForPrinting classForPrinting) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        loadContent(classForPrinting.getPrintable());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Loads the given String to be printed on the BrowserPanel."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void loadContent(String toPrint) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().loadContent(\"\u003chtml\u003e\u003cspan style\u003d\u0027white-space: pre-line\u0027\u003e\" + toPrint"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                + \"\u003c/span\u003e\u003c/html\u003e\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "monikernemo": 1,
      "alexchong711": 11,
      "lshwayne96": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayModuleInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.TreeView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.util.ModuleTree;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.util.Node;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoWorkload;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * An UI component that displays information of a {@code ModuleInfo}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class DisplayModuleInfo extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final String FXML \u003d \"DisplayModuleInfo.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public final ModuleInfo moduleInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private HBox moduleinfopane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Label moduleinfocode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Label moduleinfotitle;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Label moduleinfodepartment;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Label moduleinfocredits;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Label moduleinfodescription;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private Label moduleinfoprerequisites;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private TreeView prerequisitetree;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private TableView workloadtable;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public DisplayModuleInfo(ModuleInfo module, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        this.moduleInfo \u003d module;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfocode.setText(moduleInfo.getCodeString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfotitle.setText(moduleInfo.getTitleString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfodepartment.setText(moduleInfo.getDepartmentString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfocredits.setText(moduleInfo.getCreditString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfodescription.setText(moduleInfo.getDescriptionString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        //moduleinfoprerequisites.setText(moduleInfo.getPrerequisitesString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        //moduleinfoworkload.setText(moduleInfo.getWorkloadString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        prerequisitetree.setRoot(generateTreeview());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        prerequisitetree.setShowRoot(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        generateWorkloadTableView();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Creates Table for ModuleInfo Workload"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void generateWorkloadTableView() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ObservableList\u003cModuleInfoWorkload\u003e list \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        list.add(moduleInfo.getModuleInfoWorkload());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        workloadtable.setItems(list);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        TableColumn\u003cModuleInfoWorkload, Double\u003e lecture \u003d new TableColumn(\"Lecture\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        lecture.setCellValueFactory(new PropertyValueFactory\u003cModuleInfoWorkload, Double\u003e(\"lecture\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        TableColumn\u003cModuleInfoWorkload, Double\u003e tutorial \u003d new TableColumn(\"Tutorial\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        tutorial.setCellValueFactory(new PropertyValueFactory\u003cModuleInfoWorkload, Double\u003e(\"tutorial\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        TableColumn\u003cModuleInfoWorkload, Double\u003e lab \u003d new TableColumn(\"Lab\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        lab.setCellValueFactory(new PropertyValueFactory\u003cModuleInfoWorkload, Double\u003e(\"lab\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        TableColumn\u003cModuleInfoWorkload, Double\u003e project \u003d new TableColumn(\"Project\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        project.setCellValueFactory(new PropertyValueFactory\u003cModuleInfoWorkload, Double\u003e(\"project\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        TableColumn\u003cModuleInfoWorkload, Double\u003e preparation \u003d new TableColumn(\"Preparation\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        preparation.setCellValueFactory(new PropertyValueFactory\u003cModuleInfoWorkload, Double\u003e(\"preparation\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        workloadtable.getColumns().addAll(lecture, tutorial, lab, project, preparation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Method to create a root node of a TreeView and generates a full prerequisite Tree"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @return root"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public TreeItem\u003cString\u003e generateTreeview() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        TreeItem\u003cString\u003e root \u003d new TreeItem\u003c\u003e(\"Root\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        root.setExpanded(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ModuleTree moduleTree \u003d moduleInfo.getModuleInfoPrerequisite().getModuleTree();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        TreeItem\u003cString\u003e codeNode \u003d new TreeItem\u003cString\u003e(moduleTree.getModuleCode());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        root.getChildren().add(codeNode);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (!moduleTree.getHead().getChildList().isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            Node pesudoHead \u003d moduleTree.getHead().getChildList().get(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            createMinorTree(pesudoHead, codeNode);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Create a sub-branch of the prerequisite Tree so that it can be recursively called"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param pesudoHead"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param currHead"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void createMinorTree(Node pesudoHead, TreeItem\u003cString\u003e currHead) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (pesudoHead.isModule()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String code \u003d pesudoHead.getValue();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            TreeItem\u003cString\u003e moduleitem \u003d new TreeItem\u003c\u003e(code);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            currHead.getChildren().add(moduleitem);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (!pesudoHead.isHead() \u0026\u0026 !pesudoHead.isModule()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            String operation \u003d pesudoHead.getValue();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (\"OR\".equals(operation)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                operation \u003d \"One of :\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (\"AND\".equals(operation)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                operation \u003d \"All of :\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            TreeItem\u003cString\u003e operator \u003d new TreeItem\u003c\u003e(operation);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            operator.setExpanded(true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            currHead.getChildren().add(operator);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            for (int i \u003d 0; i \u003c pesudoHead.getChildList().size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                Node curr \u003d pesudoHead.getChildList().get(i);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                createMinorTree(curr, operator);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        if (!(other instanceof DisplayModuleInfo)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        DisplayModuleInfo displayModuleInfo \u003d (DisplayModuleInfo) other;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        return id.getText().equals(displayModuleInfo.moduleinfocode.getText())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u0026\u0026 displayModuleInfo.equals(displayModuleInfo.moduleInfo);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayModuleInfoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Panel containing the list of ModuleInfo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class DisplayModuleInfoList extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private static final String FXML \u003d \"DisplayModuleInfoList.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayModuleInfoList.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private ListView\u003cModuleInfo\u003e moduleinfolistview;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public DisplayModuleInfoList(ObservableList\u003cModuleInfo\u003e moduleInfoList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 ObservableValue\u003cModuleInfo\u003e selectedModuleInfo,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                                 Consumer\u003cModuleInfo\u003e onSelectedModuleInfoChange) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfolistview.setItems(moduleInfoList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfolistview.setCellFactory(listView -\u003e new ModuleInfoListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        moduleinfolistview.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            logger.fine(\"Selection in ModuleInfo list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            onSelectedModuleInfoChange.accept(newValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        selectedModuleInfo.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            logger.fine(\"Selected ModuleInfo changed to: \" + newValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (Objects.equals(moduleinfolistview.getSelectionModel().getSelectedItems(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                moduleinfolistview.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                int index \u003d moduleinfolistview.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                moduleinfolistview.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                moduleinfolistview.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ModuleInfo} using a {@code ModuleInfoDisplay}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    class ModuleInfoListViewCell extends ListCell\u003cModuleInfo\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        protected void updateItem(ModuleInfo moduleinfo, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            super.updateItem(moduleinfo, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            if (empty || moduleinfo \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                setGraphic(new DisplayModuleInfo(moduleinfo, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 71,
      "monikernemo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayRecModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * UI component that displays information of a {@code RecModule}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class DisplayRecModule extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private static final String FXML \u003d \"DisplayRecModule.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public final RecModule recModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private HBox recPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private Label moduleInfoCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private Label moduleInfoTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private Label courseReqType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public DisplayRecModule(RecModule recModule, int id) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        requireNonNull(recModule);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assert recModule.getCourseReqType().isPresent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.recModule \u003d recModule;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        index.setText(id + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        moduleInfoCode.setText(recModule.getModuleInfoCode().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        moduleInfoTitle.setText(recModule.getModuleInfoTitle().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        courseReqType.setText(recModule.getCourseReqType().get().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (!(other instanceof DisplayModuleInfo)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        DisplayRecModule displayRecModule \u003d (DisplayRecModule) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return recModule.equals(displayRecModule.recModule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayRecModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * Panel containing the list of {@code RecModule}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class DisplayRecModuleList extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private static final String FXML \u003d \"DisplayRecModuleList.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ListView\u003cRecModule\u003e recModuleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public DisplayRecModuleList(ObservableList\u003cRecModule\u003e recModuleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        recModuleListView.setItems(recModuleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        recModuleListView.setCellFactory(listView -\u003e new RecModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code RecModule} using a {@code DisplayRecModule}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    class RecModuleListViewCell extends ListCell\u003cRecModule\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        protected void updateItem(RecModule recModule, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            super.updateItem(recModule, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            if (empty || recModule \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                setGraphic(new DisplayRecModule(recModule, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DisplayRequirementStatusList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Panel containing the list of CourseRequirements."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class DisplayRequirementStatusList extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String FXML \u003d \"DisplayRequirementStatusList.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DisplayRequirementStatusList.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private ListView\u003cRequirementStatus\u003e requirementStatusListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public DisplayRequirementStatusList(ObservableList\u003cRequirementStatus\u003e requirementStatusList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusListView.setItems(requirementStatusList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        requirementStatusListView.setCellFactory(listView -\u003e new RequirementStatusListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Custom {@code CourseRequirementListCell} that displays the graphics of a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code CourseRequirement} using a {@code CourseRequirementDisplay}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    class RequirementStatusListViewCell extends ListCell\u003cRequirementStatus\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        protected void updateItem(RequirementStatus requirementStatus, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            super.updateItem(requirementStatus, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (empty || requirementStatus \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                setGraphic(new RequirementStatusCard(requirementStatus, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private UiPart\u003cRegion\u003e commandPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private PanelHandler commandPanelHandler;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        commandPanelHandler \u003d new PanelHandler(logic);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        commandPanel \u003d new BrowserPanel(logic.selectedPersonProperty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        browserPlaceholder.getChildren().add(commandPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList(), logic.selectedPersonProperty(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                logic::setSelectedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath(), logic.getAddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * Changes the Panel being displayed at the BrowerPanel StackPane"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     * @param commandText"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public void changePanel(String commandText) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String[] cmdArray \u003d commandText.split(\" \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        String command \u003d cmdArray[0];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        if (!browserPlaceholder.getChildren().isEmpty()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            browserPlaceholder.getChildren().remove(0);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        commandPanelHandler.getCommandPanel(command).ifPresent(panel -\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                browserPlaceholder.getChildren().add(0, panel));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            changePanel(commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 19,
      "-": 198,
      "lshwayne96": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PanelHandler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.CheckLimitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.logic.commands.DisplaymodCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.logic.commands.DisplayreqCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.RecCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " * Handles which panels to display when the command changes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "public class PanelHandler {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    private HashMap\u003cString, Node\u003e panels \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    public PanelHandler(Logic logic) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        panels.put(DisplaymodCommand.COMMAND_WORD, new DisplayModuleInfoList(logic.getDisplayList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                logic.selectedModuleInfoProperty(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                logic::setSelectedModuleInfo).getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        panels.put(DisplayreqCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new DisplayRequirementStatusList(logic.getRequirementStatusList()).getRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        panels.put(RecCommand.COMMAND_WORD, new DisplayRecModuleList(logic.getRecModuleListSorted()).getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        panels.put(SelectCommand.COMMAND_WORD, new BrowserPanel(logic.selectedPersonProperty()).getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        panels.put(CheckLimitCommand.COMMAND_WORD, new BrowserPanel(logic.selectedPersonProperty()).getRoot());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public Optional\u003cNode\u003e getCommandPanel(String command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (command.equals(DisplayreqCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return Optional.of(new DisplayRequirementStatusList(logic.getRequirementStatusList()).getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return Optional.ofNullable(panels.get(command));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 20,
      "monikernemo": 10,
      "lshwayne96": 11,
      "alexchong711": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * An UI component that displays information of a {@code ModuleTaken}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on GradTrak level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public final ModuleTaken moduleTaken;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label moduleInfoCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label semester;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label expectedMaxGrade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label expectedMinGrade;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public PersonCard(ModuleTaken moduleTaken, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.moduleTaken \u003d moduleTaken;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        moduleInfoCode.setText(moduleTaken.getModuleInfoCode().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        semester.setText(moduleTaken.getSemester().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedMinGrade.setText(moduleTaken.getExpectedMinGrade().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedMaxGrade.setText(moduleTaken.getExpectedMaxGrade().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        moduleTaken.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 moduleTaken.equals(card.moduleTaken);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "monikernemo": 15,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ClassForPrinting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private ListView\u003cModuleTaken\u003e personListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public PersonListPanel(ObservableList\u003cModuleTaken\u003e moduleTakenList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                           ObservableValue\u003cClassForPrinting\u003e selectedPerson,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                           Consumer\u003cClassForPrinting\u003e onSelectedPersonChange) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        personListView.setItems(moduleTakenList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.fine(\"Selection in moduleTaken list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            onSelectedPersonChange.accept(newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        selectedPerson.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            logger.fine(\"Selected moduleTaken changed to: \" + newValue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected moduleTaken,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Objects.equals(personListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                int index \u003d personListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.scrollTo(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ModuleTaken} using a {@code PersonCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cModuleTaken\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        protected void updateItem(ModuleTaken moduleTaken, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            super.updateItem(moduleTaken, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            if (empty || moduleTaken \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                setGraphic(new PersonCard(moduleTaken, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "monikernemo": 12,
      "alexchong711": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RequirementStatusCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * An UI component that displays information of a {@code CourseRequirement}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class RequirementStatusCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String FXML \u003d \"RequirementStatusCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String IS_FULFILLED \u003d \"Requirement fulfilled\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String IS_NOT_FULFILLED \u003d \"Requirement not fulfilled\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String PERCENTAGE_DISPLAY \u003d \"Percentage Completed: %.2f\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public final RequirementStatus requirementStatus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label courseRequirementName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label courseRequirementDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label courseReqType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Label courseReqIsFulfilled;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private ProgressBar percentageFulfilledBar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private ProgressIndicator percentageFulfilledIndicator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public RequirementStatusCard(RequirementStatus requirementStatus,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                 int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.requirementStatus \u003d requirementStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseRequirementName.setText(requirementStatus.getCourseRequirement().getCourseReqName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseRequirementDescription.setText(requirementStatus.getCourseRequirement().getCourseReqDesc());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.courseReqType.setText(requirementStatus.getCourseRequirement().getType().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (requirementStatus.isFulfilled()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.courseReqIsFulfilled.setText(IS_FULFILLED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.courseReqIsFulfilled.setText(IS_NOT_FULFILLED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.percentageFulfilledBar.setProgress(requirementStatus.getPercentageFulfilled());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.percentageFulfilledIndicator.setProgress(requirementStatus.getPercentageFulfilled());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!(other instanceof RequirementStatusCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        RequirementStatusCard card \u003d (RequirementStatusCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return courseRequirementName.getText().equals(card.courseRequirementName.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 requirementStatus.equals(card.requirementStatus);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyGradTrak addressBook) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "monikernemo": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/gradtrak.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Shows an error alert dialog with {@code description} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "monikernemo": 2
    }
  },
  {
    "path": "src/main/resources/json/course.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"courseList\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Computer Science Algorithms\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"description\" : \"Computer Science Major with Focus Area in Algorithms\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requirements\" : [ {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"University Level Requirements\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 1 module each with prefix GES, GET, GEQ, GEH, GER\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"GE\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GEH1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"pattern\" : \"GEQ1000[A-Z]?\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"pattern\" : \"GER1000[A-Z]?\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GES1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GET1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Computer Science Foundation\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete all of CS1010/CS1101S, CS1231, CS2030, CS2040, CS2100, CS2103T, CS2105, CS2106, CS3230\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS1010)|(CS1101S)\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS1231\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2030\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2040\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2100\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2030\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2040\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2100\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2103T\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2105\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2106\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS3230\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Focus Area: Algorithms\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 6 modules from any Focus Area, with at least 3 from Level 4 and \\n3 Area Primary from Algorithms with at least 1 from Level 4 \","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"3\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS3230)|(CS3236)|(CS4231)|(CS4232)|(CS4234)\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS4231)|(CS4232)|(CS4234)\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"3\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS[4][0-9]{3}\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"6\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS3230)|(CS3236)|(CS4231)|(CS4232)|(CS4234)|(CS3233)|(CS4257)|(CS4268)|(CS5230)|(CS5234)|(CS5236)|(CS5237)|(CS5238)|(CS5330)|(CS3243)|(CS3244)|(CS4243)|(CS4244)|(CS4246)|(CS4248)|(CS4216)|(CS4220)|(CS5209)|(CS5215)|(CS5228)|(CS5242)|(CS5247)|(CS5340)|(CS5339)|(CS2103T?)|(CS3213)|(CS3219)|(CS4211)|(CS4218)|(CS4239)|(CS3216)|(CS3217)|(CS3226)|(CS3234)|(CS4217)|(CS5219)|(CS5232)|(CS5272)|(CS3241)|(CS3242)|(CS3247)|(CS4247)|(CS4350)|(CS3218)|(CS3240)|(CS3249)|(CS3343)|(CS4240)|(CS4243)|(CS4249)|(CS4344)|(CS4345)|(CS4351)|(CS5237)|(CS5240)|(CS5343)|(CS5346)|(CS2107)|(CS3235)|(CS4236)|(CS4238)|(CS4239)|(CS3221)|(CS4257)|(CS5231)|(CS5250)|(CS5321)|(CS5332)|(IFS4101)|(IFS4102)|(CS2102)|(CS3223)|(CS4221)|(CS4224)|(CS4225)|(CS4220)|(CS5226)|(CS5228)|(CS5322)|(CS3210)|(CS3211)|(CS4231)|(CS4223)|(CS4237)|(CS4271)|(CS4345)|(CS5207)|(CS5222)|(CS5223)|(CS5224)|(CS5239)|(CS5250)|(CS2105)|(CS3103)|(CS4222)|(CS4226)|(CS4231)|(CS4344)|(CS5223)|(CS5224)|(CS5229)|(CS5248)|(CS5321)\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \"first\" : {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first\" : {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Industrial Experience Requirement\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementDescription\" : \"Complete 1 6-month Internship through ATAP\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3880\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        \"second\" : {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementName\" : \"Complete 2 3-month Internships\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementDescription\" : \"Complete CP3200 and CP3202\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3200\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "          }, {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3202|CP3107\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \"courseReqType\" : \"IE\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \"second\" : {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementName\" : \"Complete IS4010\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementDescription\" : \"Complete IS4010\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        \"conditions\" : [ {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "          \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "          \"pattern\" : \"IS4010\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "      \"courseReqType\" : \"IE\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "      \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      \"first\" : {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first\" : {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Computer Systems Team Project\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementDescription\" : \"(Complete CS3203)\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CS3203\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \"second\" : {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Complete CS3216 and CS3217\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementDescription\" : \"Complete CS3216 and CS3217\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"2\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CS3216|CS3217\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \"courseReqType\" : \"BD\","
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      \"second\" : {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementName\" : \"Complete CS3281 and CS3282\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementDescription\" : \"Complete CS3281 and CS3282\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        \"conditions\" : [ {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "          \"minToSatisfy\" : \"2\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "          \"pattern\" : \"CS3281|CS3282\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "      \"courseReqType\" : \"BD\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "      \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"IT Professionalism\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete IS1103/X, CS2101 and ES2660\","
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"IS1103X?\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2101\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"ES2660\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Mathematics\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementDescription\" : \"Complete MA1521, MA1101R and ST2334\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"MA1521\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"ST2334\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"MA1101R\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Sciences\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 1 Science module other than MA1521, MA1101R, ST2334\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"FAC\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"^(?!(MA1521)|(ST2334)|(MA1101R))((MA|ST|PC|LSM|CM|FST)[1-9][0-9]{3}[A-Z]?)$\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Unrestricted Electives\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete at least 40 modules to graduate\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"UE\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"40\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \".*\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Computer Science Artificial Intelligence\","
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    \"description\" : \"Computer Science Major with Focus Area in Artificial Intelligence\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requirements\" : [ {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"University Level Requirements\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 1 module each with prefix GES, GET, GEQ, GEH, GER\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"GE\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GEH1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"pattern\" : \"GEQ1000[A-Z]?\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"pattern\" : \"GER1000[A-Z]?\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GES1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GET1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Computer Science Foundation\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete all of CS1010/CS1101S, CS1231, CS2030, CS2040, CS2100, CS2103T, CS2105, CS2106, CS3230\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS1010)|(CS1101S)\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS1231\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2030\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2040\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2100\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2030\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2040\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2100\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2103T\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2105\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2106\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS3230\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementName\" : \"Focus Area: Artificial Intelligence\","
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 6 modules from any Focus Area, with at least 3 from Level 4 and \\n3 Area Primary from AI with at least 1 from Level 4 \","
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"3\","
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS3243)|(CS3244)|(CS4243)|(CS4244)|(CS4246)|(CS4248)\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS4243)|(CS4244)|(CS4246)|(CS4248)\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"3\","
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS[4][0-9]{3}\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"6\","
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS3230)|(CS3236)|(CS4231)|(CS4232)|(CS4234)|(CS3233)|(CS4257)|(CS4268)|(CS5230)|(CS5234)|(CS5236)|(CS5237)|(CS5238)|(CS5330)|(CS3243)|(CS3244)|(CS4243)|(CS4244)|(CS4246)|(CS4248)|(CS4216)|(CS4220)|(CS5209)|(CS5215)|(CS5228)|(CS5242)|(CS5247)|(CS5340)|(CS5339)|(CS2103T?)|(CS3213)|(CS3219)|(CS4211)|(CS4218)|(CS4239)|(CS3216)|(CS3217)|(CS3226)|(CS3234)|(CS4217)|(CS5219)|(CS5232)|(CS5272)|(CS3241)|(CS3242)|(CS3247)|(CS4247)|(CS4350)|(CS3218)|(CS3240)|(CS3249)|(CS3343)|(CS4240)|(CS4243)|(CS4249)|(CS4344)|(CS4345)|(CS4351)|(CS5237)|(CS5240)|(CS5343)|(CS5346)|(CS2107)|(CS3235)|(CS4236)|(CS4238)|(CS4239)|(CS3221)|(CS4257)|(CS5231)|(CS5250)|(CS5321)|(CS5332)|(IFS4101)|(IFS4102)|(CS2102)|(CS3223)|(CS4221)|(CS4224)|(CS4225)|(CS4220)|(CS5226)|(CS5228)|(CS5322)|(CS3210)|(CS3211)|(CS4231)|(CS4223)|(CS4237)|(CS4271)|(CS4345)|(CS5207)|(CS5222)|(CS5223)|(CS5224)|(CS5239)|(CS5250)|(CS2105)|(CS3103)|(CS4222)|(CS4226)|(CS4231)|(CS4344)|(CS5223)|(CS5224)|(CS5229)|(CS5248)|(CS5321)\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "      \"first\" : {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first\" : {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Industrial Experience Requirement\","
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementDescription\" : \"Complete 1 6-month Internship through ATAP\","
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3880\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        \"second\" : {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementName\" : \"Complete 2 3-month Internships\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementDescription\" : \"Complete CP3200 and CP3202\","
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3200\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "          }, {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3202|CP3107\""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        \"courseReqType\" : \"IE\","
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "      \"second\" : {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementName\" : \"Complete IS4010\","
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementDescription\" : \"Complete IS4010\","
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        \"conditions\" : [ {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "          \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "          \"pattern\" : \"IS4010\""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "      \"courseReqType\" : \"IE\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "      \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "      \"first\" : {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first\" : {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Computer Systems Team Project\","
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementDescription\" : \"(Complete CS3203)\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CS3203\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        \"second\" : {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Complete CS3216 and CS3217\","
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementDescription\" : \"Complete CS3216 and CS3217\","
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"2\","
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CS3216|CS3217\""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        \"courseReqType\" : \"BD\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "      \"second\" : {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementName\" : \"Complete CS3281 and CS3282\","
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementDescription\" : \"Complete CS3281 and CS3282\","
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        \"conditions\" : [ {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "          \"minToSatisfy\" : \"2\","
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "          \"pattern\" : \"CS3281|CS3282\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "      \"courseReqType\" : \"BD\","
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "      \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"IT Professionalism\","
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete IS1103/X, CS2101 and ES2660\","
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"IS1103X?\""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2101\""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"ES2660\""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Mathematics\","
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementDescription\" : \"Complete MA1521, MA1101R and ST2334\","
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"MA1521\""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"ST2334\""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"MA1101R\""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Sciences\","
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 1 Science module other than MA1521, MA1101R, ST2334\","
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"FAC\","
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"^(?!(MA1521)|(ST2334)|(MA1101R))((MA|ST|PC|LSM|CM|FST)[1-9][0-9]{3}[A-Z]?)$\""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Unrestricted Electives\","
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete at least 40 modules to graduate\","
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"UE\","
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"40\","
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \".*\""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Computer Science Software Engineering\","
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    \"description\" : \"Computer Science Major with Focus Area in Software Engineering\","
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    \"requirements\" : [ {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"University Level Requirements\","
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 1 module each with prefix GES, GET, GEQ, GEH, GER\","
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"GE\","
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GEH1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"pattern\" : \"GEQ1000[A-Z]?\""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \"pattern\" : \"GER1000[A-Z]?\""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GES1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"GET1[0-9]{3}[A-Z]?\""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Computer Science Foundation\","
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete all of CS1010/CS1101S, CS1231, CS2030, CS2040, CS2100, CS2103T, CS2105, CS2106, CS3230\","
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS1010)|(CS1101S)\""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS1231\""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2030\""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2040\""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2100\""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2030\""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2040\""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2100\""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2103T\""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2105\""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2106\""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS3230\""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementName\" : \"Focus Area: Software Engineering\","
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 6 modules from any Focus Area, with at least 3 from Level 4 and \\n3 Area Primary from Software Engineering with at least 1 from Level 4 \","
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"3\","
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS2103T?)|(CS3213)|(CS3219)|(CS4211)|(CS4218)|(CS4239)\""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS4211)|(CS4218)|(CS4239)\""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"3\","
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS[4][0-9]{3}\""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"6\","
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"(CS3230)|(CS3236)|(CS4231)|(CS4232)|(CS4234)|(CS3233)|(CS4257)|(CS4268)|(CS5230)|(CS5234)|(CS5236)|(CS5237)|(CS5238)|(CS5330)|(CS3243)|(CS3244)|(CS4243)|(CS4244)|(CS4246)|(CS4248)|(CS4216)|(CS4220)|(CS5209)|(CS5215)|(CS5228)|(CS5242)|(CS5247)|(CS5340)|(CS5339)|(CS2103T?)|(CS3213)|(CS3219)|(CS4211)|(CS4218)|(CS4239)|(CS3216)|(CS3217)|(CS3226)|(CS3234)|(CS4217)|(CS5219)|(CS5232)|(CS5272)|(CS3241)|(CS3242)|(CS3247)|(CS4247)|(CS4350)|(CS3218)|(CS3240)|(CS3249)|(CS3343)|(CS4240)|(CS4243)|(CS4249)|(CS4344)|(CS4345)|(CS4351)|(CS5237)|(CS5240)|(CS5343)|(CS5346)|(CS2107)|(CS3235)|(CS4236)|(CS4238)|(CS4239)|(CS3221)|(CS4257)|(CS5231)|(CS5250)|(CS5321)|(CS5332)|(IFS4101)|(IFS4102)|(CS2102)|(CS3223)|(CS4221)|(CS4224)|(CS4225)|(CS4220)|(CS5226)|(CS5228)|(CS5322)|(CS3210)|(CS3211)|(CS4231)|(CS4223)|(CS4237)|(CS4271)|(CS4345)|(CS5207)|(CS5222)|(CS5223)|(CS5224)|(CS5239)|(CS5250)|(CS2105)|(CS3103)|(CS4222)|(CS4226)|(CS4231)|(CS4344)|(CS5223)|(CS5224)|(CS5229)|(CS5248)|(CS5321)\""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "      \"first\" : {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first\" : {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Industrial Experience Requirement\","
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementDescription\" : \"Complete 1 6-month Internship through ATAP\","
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3880\""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        \"second\" : {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementName\" : \"Complete 2 3-month Internships\","
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementDescription\" : \"Complete CP3200 and CP3202\","
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3200\""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "          }, {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CP3202|CP3107\""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        \"courseReqType\" : \"IE\","
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "      \"second\" : {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementName\" : \"Complete IS4010\","
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementDescription\" : \"Complete IS4010\","
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementType\" : \"IE\","
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        \"conditions\" : [ {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "          \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "          \"pattern\" : \"IS4010\""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "      \"courseReqType\" : \"IE\","
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "      \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "      \"first\" : {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"CompositeReq\","
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        \"first\" : {"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Computer Systems Team Project\","
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "          \"requirementDescription\" : \"(Complete CS3203)\","
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CS3203\""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        \"second\" : {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "          \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementName\" : \"Complete CS3216 and CS3217\","
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementDescription\" : \"Complete CS3216 and CS3217\","
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "          \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "          \"conditions\" : [ {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            \"minToSatisfy\" : \"2\","
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "            \"pattern\" : \"CS3216|CS3217\""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "          } ]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        },"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        \"courseReqType\" : \"BD\","
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "      \"second\" : {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementName\" : \"Complete CS3281 and CS3282\","
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementDescription\" : \"Complete CS3281 and CS3282\","
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        \"requirementType\" : \"BD\","
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        \"conditions\" : [ {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "          \"minToSatisfy\" : \"2\","
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "          \"pattern\" : \"CS3281|CS3282\""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        } ]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "      },"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "      \"courseReqType\" : \"BD\","
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "      \"logicalConnector\" : \"OR\""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"IT Professionalism\","
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete IS1103/X, CS2101 and ES2660\","
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"IS1103X?\""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"CS2101\""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"ES2660\""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Mathematics\","
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementDescription\" : \"Complete MA1521, MA1101R and ST2334\","
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"CORE\","
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"MA1521\""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"ST2334\""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"MA1101R\""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Sciences\","
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete 1 Science module other than MA1521, MA1101R, ST2334\","
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"FAC\","
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"1\","
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \"^(?!(MA1521)|(ST2334)|(MA1101R))((MA|ST|PC|LSM|CM|FST)[1-9][0-9]{3}[A-Z]?)$\""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "      \"type\" : \"PrimitiveReq\","
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementName\" : \"Unrestricted Electives\","
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "      \"requirementDescription\" : \"Complete at least 40 modules to graduate\","
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "      \"requirementType\" : \"UE\","
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "      \"conditions\" : [ {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "        \"minToSatisfy\" : \"40\","
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pattern\" : \".*\""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 610,
      "lshwayne96": 35
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".tree-view {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".tree-view .tree-cell {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".table-view .column-header-background .label {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".table-view .table-row-cell {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".table-view .table-row-cell:empty {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".table-view .table-row-cell .table-cell {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ".table-view .table-row-cell:empty .table-cell {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    -fx-border-width: 0px;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 50,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/DisplayModuleInfo.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003cHBox id \u003d\"moduleinfopane\" fx:id\u003d\"moduleinfopane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"150\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleinfocode\" text \u003d\"\\$moduleinfocode\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleinfotitle\" text\u003d\"\\$moduleinfotitle\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cInsets top \u003d \"5\" bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"deparmentText\" text\u003d\"Department:\" styleClass\u003d\"cell_medium_label\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleinfodepartment\" text\u003d\"\\$moduleinfodepartment\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cInsets top \u003d \"5\" bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"creditsText\" text\u003d\"Credits:\" styleClass\u003d\"cell_medium_label\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleinfocredits\" text\u003d\"\\$moduleinfocredits\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cInsets top \u003d \"5\" bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleinfodescription\" text\u003d\"\\$moduleinfodescription\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cInsets top \u003d \"8\" bottom\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        \u003cInsets left \u003d \"5\" right\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cLabel fx:id\u003d\"moduleinfoprerequisites\" text\u003d\"Prerequisite: \" styleClass\u003d\"cell_medium_label\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cTreeView fx:id\u003d\"prerequisitetree\" editable\u003d\"false\" prefHeight\u003d\"150\" styleClass\u003d\"tree-view\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003cHBox spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                        \u003cInsets left\u003d\"8\" right\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cLabel fx:id\u003d\"workloadText\" text\u003d\"Work Load: \" styleClass\u003d\"cell_medium_label\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                    \u003cTableView fx:id\u003d\"workloadtable\" editable\u003d\"false\" prefWidth\u003d\"308\" prefHeight\u003d\"20\" styleClass\u003d\"table-view\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 66
    }
  },
  {
    "path": "src/main/resources/view/DisplayModuleInfoList.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleinfolistview\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 11
    }
  },
  {
    "path": "src/main/resources/view/DisplayRecModule.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003cHBox id\u003d\"recPane\" fx:id\u003d\"recPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"70\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleInfoCode\" text\u003d\"\\$moduleInfoCode\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleInfoTitle\" text\u003d\"\\$moduleInfoTitle\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \u003cLabel fx:id\u003d\"courseReqType\" text\u003d\"\\$courseReqType\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 35
    }
  },
  {
    "path": "src/main/resources/view/DisplayRecModuleList.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    \u003cListView fx:id\u003d\"recModuleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 8
    }
  },
  {
    "path": "src/main/resources/view/DisplayRequirementStatusList.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \u003cListView fx:id\u003d\"requirementStatusListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "         title\u003d\"GradTrak\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \u003cImage url\u003d\"@/images/gradtrak.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "          \u003cVBox fx:id\u003d\"moduleTakenList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "monikernemo": 3
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \u003cLabel fx:id\u003d\"moduleInfoCode\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "      \u003cLabel fx:id\u003d\"semester\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$semester\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "      \u003cLabel fx:id\u003d\"expectedMinGrade\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expectedMinGrade\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "      \u003cLabel fx:id\u003d\"expectedMaxGrade\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expectedMaxGrade\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "monikernemo": 4
    }
  },
  {
    "path": "src/main/resources/view/RequirementStatusCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003cLabel fx:id\u003d\"courseRequirementName\" text\u003d\"\\$courseRequirementName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cLabel fx:id\u003d\"courseRequirementDescription\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$courseRequirementDescription\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cLabel fx:id\u003d\"courseReqType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$courseReqType\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cLabel fx:id\u003d\"courseReqIsFulfilled\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$courseReqIsFulfilled\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"percentageFulfilledBar\" prefWidth\u003d\"500.0\" progress\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003cProgressIndicator fx:id\u003d\"percentageFulfilledIndicator\" prefWidth\u003d\"500.0\" progress\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    \u003cInsets top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \u003c/ProgressIndicator\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 47
    }
  },
  {
    "path": "src/test/data/JsonGradTrakStorageTest/invalidAndValidModulesTaken.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "  \"modulesTaken\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\": \"CS2103T\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\": \"Y1S1\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\": \"F\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"expectedMaxGrade\": \"A\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"2\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"tags\": [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\": \"CS213\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\": \"Y2S22\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\": \"F\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"expectedMaxGrade\": \"A\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"f\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"tags\": [ ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "monikernemo": 9,
      "alexchong711": 4
    }
  },
  {
    "path": "src/test/data/JsonGradTrakStorageTest/ivalidModuleTaken.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "  \"modulesTaken\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\": \"CS213\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"expectedMaxGrade\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"d\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "monikernemo": 4,
      "alexchong711": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradTrakTest/duplicateModulesTaken.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "  \"modulesTaken\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\": \"CS2103T\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y3S2\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"D\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"A\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"2\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"1\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"1\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\": \"CS2103T\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"semester\" : \"Y3S2\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"expectedMinGrade\" : \"C\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"expectedMaxGrade\" : \"B\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"3\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"1\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"2\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  \"semesterLimitList\" : [ {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  \"currentSemesterIndex\" : 0"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "monikernemo": 6,
      "alexchong711": 146
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradTrakTest/invalidModulesTaken.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "  \"modulesTaken\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"expectedMinGrade\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"f\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  \"semesterLimitList\" : [ {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  \"currentSemesterIndex\" : 0"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "monikernemo": 4,
      "alexchong711": 135
    }
  },
  {
    "path": "src/test/data/JsonSerializableGradTrakTest/typicalModulesTaken.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "  \"modulesTaken\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\" : \"CS2103T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y1S2\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"F\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"A\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"0\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"0\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\" : \"CS2101\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y3S2\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"D\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"A\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"0\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"0\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\" : \"CS1010S\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y5S2\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"D\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"A\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"0\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"0\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\" : \"CS1010X\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y4S2\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"F\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"A\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"0\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"0\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\" : \"MA1521\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y3S1\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"C\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"A\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"0\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"0\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\" : \"LSM1301\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y4S2\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"D\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"A\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"0\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"0\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"moduleInfoCode\" : \"GER1000\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"semester\" : \"Y4S1\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMinGrade\" : \"C\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    \"expectedMaxGrade\" : \"B\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"lectureHour\" : \"0\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"tutorialHour\" : \"0\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"labHour\" : \"0\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"projectHour\" : \"0\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"preparationHour\" : \"0\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  \"semesterLimitList\" : [ {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minCap\" : 1.0,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxCap\" : 5.0,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLectureHour\" : 4.0,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLectureHour\" : 8.0,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minTutorialHour\" : 2.0,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxTutorialHour\" : 5.0,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minLabHour\" : 2.0,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxLabHour\" : 5.0,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minProjectHour\" : 2.0,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxProjectHour\" : 5.0,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"minPreparationHour\" : 6.0,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    \"maxPreparationHour\" : 10.0"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "  \"currentSemesterIndex\" : 0"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "monikernemo": 29,
      "alexchong711": 168
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "  \"gradTrakFilePath\" : \"gradtrak.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "monikernemo": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "  \"gradTrakFilePath\" : \"gradtrak.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "monikernemo": 1
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage description."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 118,
      "monikernemo": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Provides a handle to a moduleTaken card in the moduleTaken list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String MODULE_INFO_CODE_ID \u003d \"#moduleInfoCode\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String SEMESTER_FIELD_ID \u003d \"#semester\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String EXPECTED_MIN_GRADE_FIELD_ID \u003d \"#expectedMinGrade\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String EXPECTED_MAX_GRADE_FIELD_ID \u003d \"#expectedMaxGrade\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Label moduleInfoCodeLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Label expectedMaxGradeLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Label semesterLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private final Label expectedMinGradeLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        moduleInfoCodeLabel \u003d getChildNode(MODULE_INFO_CODE_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedMaxGradeLabel \u003d getChildNode(EXPECTED_MAX_GRADE_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        semesterLabel \u003d getChildNode(SEMESTER_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedMinGradeLabel \u003d getChildNode(EXPECTED_MIN_GRADE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public String getModuleInfoCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return moduleInfoCodeLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String getExpectedMaxGrade() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return expectedMaxGradeLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String getSemester() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return semesterLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public String getExpectedMinGrade() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return expectedMinGradeLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns true if this handle contains {@code moduleTaken}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public boolean equals(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return getModuleInfoCode().equals(moduleTaken.getModuleInfoCode().toString())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 getSemester().equals(moduleTaken.getSemester().toString())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 getExpectedMinGrade().equals(moduleTaken.getExpectedMinGrade().toString())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 getExpectedMaxGrade().equals(moduleTaken.getExpectedMaxGrade().toString())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(moduleTaken.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "monikernemo": 13,
      "alexchong711": 15,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cModuleTaken\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Optional\u003cModuleTaken\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cModuleTaken\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e selectedModuleTakenList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (selectedModuleTakenList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"ModuleTaken list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedModuleTakenList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Navigates the listview to display {@code moduleTaken}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void navigateToCard(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        if (!getRootNode().getItems().contains(moduleTaken)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new IllegalArgumentException(\"ModuleTaken does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            getRootNode().scrollTo(moduleTaken);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the moduleTaken card handle of a moduleTaken associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private ModuleTaken getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "monikernemo": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.JsonGradTrakStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    protected Supplier\u003cReadOnlyGradTrak\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyGradTrak\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            JsonGradTrakStorage jsonAddressBookStorage \u003d new JsonGradTrakStorage(saveFileLocation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                jsonAddressBookStorage.saveGradTrak(initialDataSupplier.get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userPrefs.setGradTrakFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public GradTrak readStorageAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new GradTrak(storage.readGradTrak().get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"Data is not in the GradTrak format.\", dce);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return storage.getGradTrakFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model copy \u003d new ModelManager((model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 95,
      "monikernemo": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/gradtrak.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "monikernemo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MAX_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MIN_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.JsonGradTrakStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.UserInfoStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.UserInfoStorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonGradTrakStorage addressBookStorage \u003d new JsonGradTrakStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UserInfoStorage userInfoStorage \u003d new UserInfoStorageManager();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logic \u003d new LogicManager(model, storage, userInfoStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // Setup LogicManager with JsonGradTrakIoExceptionThrowingStub"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonGradTrakStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new JsonGradTrakIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UserInfoStorage userInfoStorage \u003d new UserInfoStorageManager();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        logic \u003d new LogicManager(model, storage, userInfoStorage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_CS2103T + SEMESTER_DESC_CS2103T"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS2103T + EXPECTED_MAX_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken expectedModuleTaken \u003d new ModuleTakenBuilder(DEFAULT_MODULE_CS2103T).withTags().build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.addModuleTaken(expectedModuleTaken);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static class JsonGradTrakIoExceptionThrowingStub extends JsonGradTrakStorage {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        private JsonGradTrakIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void saveGradTrak(ReadOnlyGradTrak gradTrak, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 163,
      "monikernemo": 32,
      "lshwayne96": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(), new ModuleInfoList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken validModuleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.addModuleTaken(validModuleTaken);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertCommandSuccess(new AddCommand(validModuleTaken), model, commandHistory,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validModuleTaken), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenInList \u003d model.getGradTrak().getModulesTakenList().get(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertCommandFailure(new AddCommand(moduleTakenInList), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 37,
      "monikernemo": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ClassForPrinting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Course;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.RequirementStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken validModuleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validModuleTaken).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validModuleTaken), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(validModuleTaken), modelStub.personsAdded);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken validModuleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validModuleTaken);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validModuleTaken);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken cs2103t \u003d new ModuleTakenBuilder().withModuleInfoCode(\"CS2103T\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken cs1010 \u003d new ModuleTakenBuilder().withModuleInfoCode(\"CS1010\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        AddCommand addCS2103T \u003d new AddCommand(cs2103t);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        AddCommand addCS1010 \u003d new AddCommand(cs1010);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(addCS2103T.equals(addCS2103T));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(cs2103t);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(addCS2103T.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(addCS2103T.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(addCS2103T.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different moduleTaken -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(addCS2103T.equals(addCS1010));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void setCourse(CourseName course) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public boolean hasCourse(CourseName courseName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Course getCourse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void setGradTrakFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void addModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void setGradTrak(ReadOnlyGradTrak newData) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public Path getGradTrakFilePath() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public Semester getCurrentSemester() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return Semester.Y1S1;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public boolean hasModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void deleteModuleTaken(ModuleTaken target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void setModuleTaken(ModuleTaken target, ModuleTaken editedModuleTaken) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ReadOnlyGradTrak getGradTrak() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setSemesterLimit(int index, SemLimit editedSemLimit) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setCurrentSemester(Semester semester) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ObservableList\u003cSemLimit\u003e getSemLimitList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ObservableList\u003cModuleTaken\u003e getFilteredModulesTakenList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void updateFilteredModulesTakenList(Predicate\u003cModuleTaken\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public ClassForPrinting checkLimit(ModuleInfoList moduleInfoList) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public boolean canUndoGradTrak() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public boolean canRedoGradTrak() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void undoGradTrak() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void redoGradTrak() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void commitGradTrak() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public ReadOnlyProperty\u003cClassForPrinting\u003e selectedModuleTakenProperty() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public ModuleTaken getSelectedClassForPrinting() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public void setSelectedModuleTaken(ClassForPrinting moduleTaken) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ObservableList\u003cModuleInfo\u003e getDisplayList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void updateDisplayList(Predicate\u003cModuleInfo\u003e predicate) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        public void setSelectedModuleInfo (ModuleInfo moduleInfo) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public ObservableList\u003cRecModule\u003e getRecModuleListSorted() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        public ReadOnlyProperty\u003cModuleInfo\u003e selectedModuleInfoProperty() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public ModuleInfoList getModuleInfoList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            return new ModuleInfoList();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        public void updateRecModuleList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ObservableList\u003cRequirementStatus\u003e getRequirementStatusList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Anand270294"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ModuleInfo getSelectedModuleInfo() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public UserInfo getUserInfo() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ObservableList\u003cModuleInfoCode\u003e getModuleInfoCodeList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * A Model stub that contains a single moduleTaken."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        private final ModuleTaken moduleTaken;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModelStubWithPerson(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            requireNonNull(moduleTaken);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            this.moduleTaken \u003d moduleTaken;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public boolean hasModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            requireNonNull(moduleTaken);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return this.moduleTaken.isSameModuleTaken(moduleTaken);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * A Model stub that always accept the moduleTaken being added."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final ArrayList\u003cModuleTaken\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public boolean hasModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            requireNonNull(moduleTaken);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return personsAdded.stream().anyMatch(moduleTaken::isSameModuleTaken);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void addModuleTaken(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            requireNonNull(moduleTaken);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            personsAdded.add(moduleTaken);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public void commitGradTrak() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ReadOnlyGradTrak getGradTrak() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            return new GradTrak();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 18,
      "-": 212,
      "monikernemo": 98,
      "alexchong711": 25,
      "lshwayne96": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setGradTrak(new GradTrak());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 30,
      "monikernemo": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MAX_GRADE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MIN_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINISHED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_CAP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_LAB_HOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_CAP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_LAB_HOUR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_LECTURE_HOUR;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PROJECT_HOUR;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditModuleTakenDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditSemLimitDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.FindModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_MODULE_INFO_CODE_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_MODULE_INFO_CODE_CS1010 \u003d \"CS1010\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_SEMESTER_CS2103T \u003d \"Y2S2\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_SEMESTER_CS1010 \u003d \"Y2S1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_GRADE_CS2103T \u003d \"A\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_GRADE_CS1010 \u003d \"B\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String FINISHED_STATUS_FALSE \u003d \"n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_EXPECTED_MIN_GRADE_CS2103T \u003d \"C\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_EXPECTED_MIN_GRADE_CS1010 \u003d \"D\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_EXPECTED_MAX_GRADE_CS2103T \u003d \"A\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_EXPECTED_MAX_GRADE_CS1010 \u003d \"B\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_LECTURE_HOUR_CS2103T \u003d \"0\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String VALID_LECTURE_HOUR_CS1010 \u003d \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_CAP \u003d \"2.53\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_CAP \u003d \"4\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_LECTURE_HOUR \u003d \"2.5\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_LECTURE_HOUR \u003d \"5\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_TUTORIAL_HOUR \u003d \"2\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_TUTORIAL_HOUR \u003d \"3.5\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_LAB_HOUR \u003d \"2\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_LAB_HOUR \u003d \"3\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_PROJECT_HOUR \u003d \"5.0\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_PROJECT_HOUR \u003d \"5\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_PREPARATION_HOUR \u003d \"1\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_PREPARATION_HOUR \u003d \"5\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_CAP_EDITED_SEMLIMIT \u003d \"3.53\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_CAP_EDITED_SEMLIMIT \u003d \"5\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_LECTURE_HOUR_EDITED_SEMLIMIT \u003d \"3.5\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_LECTURE_HOUR_EDITED_SEMLIMIT \u003d \"6\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_TUTORIAL_HOUR_EDITED_SEMLIMIT \u003d \"3\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_TUTORIAL_HOUR_EDITED_SEMLIMIT \u003d \"4.5\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_LAB_HOUR_EDITED_SEMLIMIT \u003d \"3\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_LAB_HOUR_EDITED_SEMLIMIT \u003d \"4\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_PROJECT_HOUR_EDITED_SEMLIMIT \u003d \"6.0\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_PROJECT_HOUR_EDITED_SEMLIMIT \u003d \"6\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MIN_PREPARATION_HOUR_EDITED_SEMLIMIT \u003d \"5\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String VALID_MAX_PREPARATION_HOUR_EDITED_SEMLIMIT \u003d \"6\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String NAME_DESC_CS2103T \u003d \" \" + PREFIX_MODULE_INFO_CODE + VALID_MODULE_INFO_CODE_CS2103T;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String NAME_DESC_CS1010 \u003d \" \" + PREFIX_MODULE_INFO_CODE + VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String SEMESTER_DESC_CS2103T \u003d \" \" + PREFIX_SEMESTER + VALID_SEMESTER_CS2103T;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String SEMESTER_DESC_CS1010 \u003d \" \" + PREFIX_SEMESTER + VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String GRADE_DESC_CS2103T \u003d \" \" + PREFIX_GRADE + VALID_GRADE_CS2103T;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String GRADE_DESC_CS1010 \u003d \" \" + PREFIX_GRADE + VALID_GRADE_CS1010;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String FINISHED_STATUS_DESC_TRUE \u003d \" \" + PREFIX_FINISHED + FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String FINISHED_STATUS_DESC_FALSE \u003d \" \" + PREFIX_FINISHED + FINISHED_STATUS_FALSE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String EXPECTED_MIN_GRADE_DESC_CS2103T \u003d \" \" + PREFIX_EXPECTED_MIN_GRADE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + VALID_EXPECTED_MIN_GRADE_CS2103T;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String EXPECTED_MIN_GRADE_DESC_CS1010 \u003d \" \" + PREFIX_EXPECTED_MIN_GRADE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + VALID_EXPECTED_MIN_GRADE_CS1010;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String EXPECTED_MAX_GRADE_DESC_CS2103T \u003d \" \" + PREFIX_EXPECTED_MAX_GRADE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + VALID_EXPECTED_MAX_GRADE_CS2103T;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String EXPECTED_MAX_GRADE_DESC_CS1010 \u003d \" \" + PREFIX_EXPECTED_MAX_GRADE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            + VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MIN_CAP_DESC \u003d \" \" + PREFIX_MIN_CAP"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MIN_CAP;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MAX_CAP_DESC \u003d \" \" + PREFIX_MAX_CAP"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MAX_CAP;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MIN_LECTURE_HOUR_DESC \u003d \" \" + PREFIX_MIN_LECTURE_HOUR"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MIN_LECTURE_HOUR;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MAX_LECTURE_HOUR_DESC \u003d \" \" + PREFIX_MAX_LECTURE_HOUR"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MAX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MIN_TUTORIAL_HOUR_DESC \u003d \" \" + PREFIX_MIN_TUTORIAL_HOUR"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MIN_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MAX_TUTORIAL_HOUR_DESC \u003d \" \" + PREFIX_MAX_TUTORIAL_HOUR"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MAX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MIN_LAB_HOUR_DESC \u003d \" \" + PREFIX_MIN_LAB_HOUR"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MIN_LAB_HOUR;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MAX_LAB_HOUR_DESC \u003d \" \" + PREFIX_MAX_LAB_HOUR"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MAX_LAB_HOUR;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MIN_PROJECT_HOUR_DESC \u003d \" \" + PREFIX_MIN_PROJECT_HOUR"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MIN_PROJECT_HOUR;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MAX_PROJECT_HOUR_DESC \u003d \" \" + PREFIX_MAX_PROJECT_HOUR"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MAX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MIN_PREPARATION_HOUR_DESC \u003d \" \" + PREFIX_MIN_PREPARATION_HOUR"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MIN_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String MAX_PREPARATION_HOUR_DESC \u003d \" \" + PREFIX_MAX_PREPARATION_HOUR"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + VALID_MAX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String INVALID_CS2103T_DESC \u003d \" \" + PREFIX_MODULE_INFO_CODE + \"CS123I\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String INVALID_SEMESTER_DESC \u003d \" \" + PREFIX_SEMESTER + \"911a\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String INVALID_GRADE_DESC \u003d \" \" + PREFIX_GRADE + \"K\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String INVALID_EXPECTED_MIN_GRADE_DESC \u003d \" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + PREFIX_EXPECTED_MIN_GRADE + \"bob!yahoo\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String INVALID_EXPECTED_MAX_GRADE_DESC \u003d \" \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + PREFIX_EXPECTED_MAX_GRADE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String INVALID_LECTURE_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            + PREFIX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MIN_CAP_DESC \u003d \" \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_CAP + \"4.222\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MAX_CAP_DESC \u003d \" \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MAX_CAP + \"5.1\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MIN_LECTURE_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_LECTURE_HOUR + \"5.4\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MAX_LECTURE_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MAX_LECTURE_HOUR + \"5.34\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MIN_TUTORIAL_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_TUTORIAL_HOUR + \"5.011\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MAX_TUTORIAL_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MAX_TUTORIAL_HOUR + \"5.01\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MIN_LAB_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_LAB_HOUR + \"5.019\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MAX_LAB_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MAX_LAB_HOUR + \"5.012\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MIN_PROJECT_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_PROJECT_HOUR + \"5.0122\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MAX_PROJECT_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MAX_PROJECT_HOUR + \"5.01\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MIN_PREPARATION_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MIN_PREPARATION_HOUR + \"5.01\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String INVALID_MAX_PREPARATION_HOUR_DESC \u003d \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            + PREFIX_MAX_PREPARATION_HOUR + \"5.013\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final EditCommand.EditModuleTakenDescriptor DESC_CS2103T;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final EditCommand.EditModuleTakenDescriptor DESC_CS1010;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SetSemLimitCommand.EditSemLimitDescriptor DESC_Y1S1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SetSemLimitCommand.EditSemLimitDescriptor DESC_Y2S2;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final FindCommand.FindModuleDescriptor FIND_CS2103T;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final FindCommand.FindModuleDescriptor FIND_CS1010;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        DESC_CS2103T \u003d new EditModuleTakenDescriptorBuilder().withName(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS2103T)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS2103T)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withLectureHour(VALID_LECTURE_HOUR_CS2103T)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        DESC_CS1010 \u003d new EditModuleTakenDescriptorBuilder().withName(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withLectureHour(VALID_LECTURE_HOUR_CS1010)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        DESC_Y1S1 \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinCap(VALID_MIN_CAP)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(VALID_MAX_CAP)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLectureHour(VALID_MIN_LECTURE_HOUR)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLectureHour(VALID_MAX_LECTURE_HOUR)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinTutorialHour(VALID_MIN_TUTORIAL_HOUR)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxTutorialHour(VALID_MAX_TUTORIAL_HOUR)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLabHour(VALID_MIN_LAB_HOUR)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLabHour(VALID_MAX_LAB_HOUR)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinProjectHour(VALID_MIN_PROJECT_HOUR)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxProjectHour(VALID_MAX_PROJECT_HOUR)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinPreparationHour(VALID_MIN_PREPARATION_HOUR)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxPreparationHour(VALID_MAX_PREPARATION_HOUR)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        DESC_Y2S2 \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinCap(VALID_MIN_CAP_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(VALID_MAX_CAP_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLectureHour(VALID_MIN_LECTURE_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLectureHour(VALID_MAX_LECTURE_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinTutorialHour(VALID_MIN_TUTORIAL_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxTutorialHour(VALID_MAX_TUTORIAL_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLabHour(VALID_MIN_LAB_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLabHour(VALID_MAX_LAB_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinProjectHour(VALID_MIN_PROJECT_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxProjectHour(VALID_MAX_PROJECT_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinPreparationHour(VALID_MIN_PREPARATION_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxPreparationHour(VALID_MAX_PREPARATION_HOUR_EDITED_SEMLIMIT)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FIND_CS2103T \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withFinishedStatus(FINISHED_STATUS_FALSE).build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FIND_CS1010 \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withGrade(VALID_GRADE_CS1010)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withFinishedStatus(FINISHED_STATUS_FALSE).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                            CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * - the address book, filtered moduleTaken list and selected moduleTaken in {@code actualModel}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak expectedAddressBook \u003d new GradTrak(actualModel.getGradTrak());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        ModuleTaken expectedSelectedModuleTaken \u003d (ModuleTaken) actualModel.getSelectedClassForPrinting();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getGradTrak());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            assertEquals(expectedSelectedModuleTaken, actualModel.getSelectedClassForPrinting());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the moduleTaken at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModulesTakenList().size());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTaken \u003d model.getFilteredModulesTakenList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        final String[] splitName \u003d moduleTaken.getModuleInfoCode().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(1, model.getFilteredModulesTakenList().size());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Deletes the first moduleTaken in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken firstModuleTaken \u003d model.getFilteredModulesTakenList().get(0);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.deleteModuleTaken(firstModuleTaken);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.commitGradTrak();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "monikernemo": 65,
      "lshwayne96": 26,
      "alexchong711": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToDelete \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, moduleTakenToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.deleteModuleTaken(moduleTakenToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModulesTakenList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToDelete \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, moduleTakenToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.deleteModuleTaken(moduleTakenToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGradTrak().getModulesTakenList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToDelete \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.deleteModuleTaken(moduleTakenToDelete);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // delete -\u003e first moduleTaken deleted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered moduleTaken list to show all persons"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // redo -\u003e same first moduleTaken deleted again"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.redoGradTrak();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModulesTakenList().size() + 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * 1. Deletes a {@code ModuleTaken} from a filtered list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted moduleTaken in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the moduleTaken object regardless of indexing."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToDelete \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.deleteModuleTaken(moduleTakenToDelete);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // delete -\u003e deletes second moduleTaken in unfiltered moduleTaken list / first moduleTaken in"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // filtered moduleTaken list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered moduleTaken list to show all persons"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(moduleTakenToDelete,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // redo -\u003e deletes same second moduleTaken in unfiltered moduleTaken list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.redoGradTrak();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different moduleTaken -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(p -\u003e false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(model.getFilteredModulesTakenList().isEmpty());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 133,
      "monikernemo": 50,
      "lshwayne96": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleTakenDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditModuleTakenDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedModuleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder(editedModuleTaken).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedModuleTaken);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setModuleTaken(model.getFilteredModulesTakenList().get(0), editedModuleTaken);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredModulesTakenList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken lastModuleTaken \u003d model.getFilteredModulesTakenList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTakenBuilder personInList \u003d new ModuleTakenBuilder(lastModuleTaken);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedModuleTaken \u003d personInList.withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withName(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedModuleTaken);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setModuleTaken(lastModuleTaken, editedModuleTaken);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditModuleTakenDescriptor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedModuleTaken \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedModuleTaken);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenInFilteredList \u003d model.getFilteredModulesTakenList()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedModuleTaken \u003d new ModuleTakenBuilder(moduleTakenInFilteredList)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new EditModuleTakenDescriptorBuilder().withName(VALID_MODULE_INFO_CODE_CS1010).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedModuleTaken);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setModuleTaken(model.getFilteredModulesTakenList().get(0), editedModuleTaken);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken firstModuleTaken \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder(firstModuleTaken).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // edit moduleTaken in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenInList \u003d model.getGradTrak().getModulesTakenList()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new EditModuleTakenDescriptorBuilder(moduleTakenInList).build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModulesTakenList().size() + 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withName(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGradTrak().getModulesTakenList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new EditModuleTakenDescriptorBuilder().withName(VALID_MODULE_INFO_CODE_CS1010).build());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedModuleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToEdit \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder(editedModuleTaken).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setModuleTaken(moduleTakenToEdit, editedModuleTaken);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // edit -\u003e first moduleTaken edited"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered moduleTaken list to show all persons"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // redo -\u003e same first moduleTaken edited again"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.redoGradTrak();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModulesTakenList().size() + 1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withName(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * 1. Edits a {@code ModuleTaken} from a filtered list."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited moduleTaken in the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the moduleTaken object regardless of indexing."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedModuleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder(editedModuleTaken).build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenToEdit \u003d model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setModuleTaken(moduleTakenToEdit, editedModuleTaken);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // edit -\u003e edits second moduleTaken in unfiltered moduleTaken list / first moduleTaken in"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // filtered moduleTaken list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered moduleTaken list to show all persons"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(model.getFilteredModulesTakenList().get(INDEX_FIRST_PERSON.getZeroBased()), moduleTakenToEdit);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // redo -\u003e edits same second moduleTaken in unfiltered moduleTaken list"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.redoGradTrak();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_CS2103T);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor copyDescriptor \u003d new EditModuleTakenDescriptor(DESC_CS2103T);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_CS2103T)));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_CS1010)));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 165,
      "monikernemo": 82,
      "alexchong711": 15,
      "lshwayne96": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditModuleTakenDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditModuleTakenDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class EditModuleTakenDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditCommand.EditModuleTakenDescriptor descriptorWithSameValues \u003d new EditCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .EditModuleTakenDescriptor(DESC_CS2103T);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(DESC_CS2103T.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(DESC_CS2103T.equals(DESC_CS2103T));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(DESC_CS1010));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditCommand.EditModuleTakenDescriptor editedAmy \u003d new EditModuleTakenDescriptorBuilder(DESC_CS2103T)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withName(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // different semester -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        editedAmy \u003d new EditModuleTakenDescriptorBuilder(DESC_CS2103T)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        editedAmy \u003d new EditModuleTakenDescriptorBuilder(DESC_CS2103T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        editedAmy \u003d new EditModuleTakenDescriptorBuilder(DESC_CS2103T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        editedAmy \u003d new EditModuleTakenDescriptorBuilder(DESC_CS2103T)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(DESC_CS2103T.equals(editedAmy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "monikernemo": 22,
      "alexchong711": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULETAKEN_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FINISHED_STATUS_FALSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS1010S;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS1010X;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2101;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.KEYWORD_MATCHING_CS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.KEYWORD_MATCHING_CS2103T;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.LSM1301;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.MA1521;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.FindModulePredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.FindModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /* Default current semester is Y1S1 */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd1 \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd2 \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd3 \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T).withGrade(VALID_EXPECTED_MIN_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor fd4 \u003d new FindModuleDescriptorBuilder().withCode(\"CS\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor fd5 \u003d new FindModuleDescriptorBuilder().withCode(\"cs\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand fc1 \u003d new FindCommand(fd1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand fc2 \u003d new FindCommand(fd2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand fc3 \u003d new FindCommand(fd3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand fc4 \u003d new FindCommand(fd4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand fc5 \u003d new FindCommand(fd5);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(fc1.equals(fc1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand fc1Copy \u003d new FindCommand(fd1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(fc1.equals(fc1Copy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same values (ignoring case) -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(fc4.equals(fc5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fc1.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fc1.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fc1.equals(fc2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different number of parameters -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fc1.equals(fc3));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_nonExistingCode_noModuleFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withCode(\"2103cs\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_codeOnly_multipleModulesFound() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withCode(KEYWORD_MATCHING_CS).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T, CS2101, CS1010S, CS1010X), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_semesterOnly_multipleModulesFound() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withSemester(\"Y4S2\").build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(CS1010X, LSM1301), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_gradeOnly_multipleModulesFound() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withGrade(\"F\").build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T, CS1010X), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_finishedStatusOnly_multipleModulesFound() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        model.setCurrentSemester(Semester.Y3S2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        expectedModel.setCurrentSemester(Semester.Y3S2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T, MA1521), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_multipleParameters_noModuleFound() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withCode(KEYWORD_MATCHING_CS2103T)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withSemester(\"Y1S1\").withGrade(\"A\").withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_multipleParameters_multipleModulesFound() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withSemester(\"Y4S2\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withGrade(\"D\").withFinishedStatus(FINISHED_STATUS_FALSE).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(CS1010X, LSM1301), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void execute_multipleParameters_oneModuleFound() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MODULETAKEN_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withCode(KEYWORD_MATCHING_CS2103T)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withSemester(\"Y1S2\").withFinishedStatus(FINISHED_STATUS_FALSE).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, model.getCurrentSemester());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d new FindCommand(descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.updateFilteredModulesTakenList(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T), model.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 50,
      "monikernemo": 36,
      "lshwayne96": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindModuleDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FIND_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.FindModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class FindModuleDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptor(FIND_CS2103T);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(FIND_CS2103T.equals(descriptor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(FIND_CS2103T.equals(FIND_CS2103T));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(FIND_CS2103T.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(FIND_CS2103T.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(FIND_CS2103T.equals(FIND_CS1010));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different subcode -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder(FIND_CS2103T).withCode(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(FIND_CS2103T.equals(descriptor));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different semester -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder(FIND_CS2103T).withSemester(VALID_SEMESTER_CS1010).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(FIND_CS2103T.equals(descriptor));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different grade -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder(FIND_CS2103T).withGrade(VALID_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(FIND_CS2103T.equals(descriptor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different finished status -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder(FIND_CS2103T).withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(FIND_CS2103T.equals(descriptor));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 38,
      "monikernemo": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.undoGradTrak();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.undoGradTrak();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.redoGradTrak();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.redoGradTrak();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 40,
      "monikernemo": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredModulesTakenList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredModulesTakenList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getGradTrak().getModulesTakenList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MODULETAKEN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different moduleTaken -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * and checks that the model\u0027s selected moduleTaken is set to the moduleTaken at {@code index}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * in the filtered moduleTaken list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setSelectedModuleTaken(model.getFilteredModulesTakenList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 97,
      "monikernemo": 14,
      "lshwayne96": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetCourseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourse.COMPUTER_SCIENCE_AI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourse.COMPUTER_SCIENCE_ALGORITHMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class SetCourseCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseName algorithms \u003d new CourseName(\"Computer Science Algorithms\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        SetCourseCommand setAlgorithms \u003d new SetCourseCommand(algorithms);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(setAlgorithms, new SetCourseCommand(COMPUTER_SCIENCE_ALGORITHMS.getCourseName()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(null, setAlgorithms);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(new SetCourseCommand(COMPUTER_SCIENCE_AI.getCourseName()), setAlgorithms);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    //TODO: add other test cases"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void execute_existingCourse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseName courseName \u003d new CourseName(\"Computer Science Algorithms\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(SetCourseCommand.MESSAGE_SUCCESS, courseName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        SetCourseCommand command \u003d new SetCourseCommand(courseName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.setCourse(courseName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void execute_setNonExistingCourse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(CommandException.class, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            -\u003e new SetCourseCommand(new CourseName(\"No such course\")).execute(model, commandHistory));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetSemLimitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_Y1S1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_Y2S2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_CAP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SEMESTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SEMESTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetSemLimitCommand.EditSemLimitDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditSemLimitDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.SemLimitBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * and unit tests for SetSemLimitCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SetSemLimitCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final int INVALID_SEMESTER_INDEX \u003d 11;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit editedSemLimit \u003d new SemLimitBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder(editedSemLimit).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand setSemLimitCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(INDEX_FIRST_SEMESTER.getIndex()), descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(SetSemLimitCommand.MESSAGE_EDIT_LIMIT_SUCCESS, editedSemLimit);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.setSemesterLimit(INDEX_FIRST_SEMESTER.getIndex(), editedSemLimit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandSuccess(setSemLimitCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Index indexLastSem \u003d Index.fromOneBased(model.getSemLimitList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit lastSemLimit \u003d model.getSemLimitList().get(indexLastSem.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimitBuilder personInList \u003d new SemLimitBuilder(lastSemLimit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit editedSemLimit \u003d personInList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(Double.parseDouble(VALID_MAX_CAP))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLectureHour(VALID_MAX_LECTURE_HOUR)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxProjectHour(VALID_MAX_PROJECT_HOUR).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(VALID_MAX_CAP)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLectureHour(VALID_MAX_LECTURE_HOUR)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxProjectHour(VALID_MAX_PROJECT_HOUR).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand editCommand \u003d new SetSemLimitCommand(indexLastSem, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(SetSemLimitCommand.MESSAGE_EDIT_LIMIT_SUCCESS, editedSemLimit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.setSemesterLimit(indexLastSem.getZeroBased(), editedSemLimit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand editCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(INDEX_FIRST_SEMESTER.getIndex()), new EditSemLimitDescriptor());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit editedSemLimit \u003d model.getSemLimitList().get(INDEX_FIRST_SEMESTER.getIndex());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(SetSemLimitCommand.MESSAGE_EDIT_LIMIT_SUCCESS, editedSemLimit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void execute_invalidSemLimitIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(INVALID_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(VALID_MAX_CAP).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand editCommand \u003d new SetSemLimitCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_SEMESTER_LIMIT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SemLimit editedSemLimit \u003d new SemLimitBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder(editedSemLimit).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand editCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(INDEX_FIRST_SEMESTER.getIndex()), descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new GradTrak(model.getGradTrak()), new UserPrefs(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                                               new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.setSemesterLimit(0, editedSemLimit);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.commitGradTrak();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // edit -\u003e first semLimit edited"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered semLimit list to show all persons"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // redo -\u003e same first semLimit edited again"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedModel.redoGradTrak();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(INVALID_SEMESTER_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(VALID_MAX_CAP).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand setSemLimitCommand \u003d new SetSemLimitCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandFailure(setSemLimitCommand, model, commandHistory,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Messages.MESSAGE_INVALID_SEMESTER_LIMIT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        final SetSemLimitCommand standardCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(INDEX_FIRST_SEMESTER.getIndex()), DESC_Y2S2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditSemLimitDescriptor copyDescriptor \u003d new EditSemLimitDescriptor(DESC_Y2S2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand commandWithSameValues \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(INDEX_FIRST_SEMESTER.getIndex()), copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(standardCommand.equals(new SetSemLimitCommand("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(INDEX_SECOND_SEMESTER.getIndex()), DESC_Y2S2)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(standardCommand.equals(new SetSemLimitCommand("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(INDEX_FIRST_SEMESTER.getIndex()), DESC_Y1S1)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.UserInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalGradTrak(), new UserPrefs(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new ModuleInfoList(), new CourseList(), new UserInfo());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedModel.undoGradTrak();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 1,
      "-": 40,
      "monikernemo": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MAX_GRADE_DESC_CS1010;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MAX_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MIN_GRADE_DESC_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MIN_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CS2103T_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_MAX_GRADE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_MIN_GRADE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEMESTER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS1010;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2103T;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_CS1010;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_CS2103T;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS1010;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS1010;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS2103T;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken expectedModuleTaken \u003d new ModuleTakenBuilder(DEFAULT_MODULE_CS1010)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_CS1010"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + SEMESTER_DESC_CS1010 + EXPECTED_MIN_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS1010 + TAG_DESC_FRIEND, new AddCommand(expectedModuleTaken));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2103T + NAME_DESC_CS1010"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + SEMESTER_DESC_CS1010 + EXPECTED_MIN_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS1010 + TAG_DESC_FRIEND, new AddCommand(expectedModuleTaken));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // multiple semesters - last semester accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS1010 + SEMESTER_DESC_CS2103T"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + SEMESTER_DESC_CS1010 + EXPECTED_MIN_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS1010 + TAG_DESC_FRIEND, new AddCommand(expectedModuleTaken));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS1010 + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS2103T + EXPECTED_MIN_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS1010 + TAG_DESC_FRIEND, new AddCommand(expectedModuleTaken));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS1010 + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS1010 + EXPECTED_MAX_GRADE_DESC_CS2103T"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS1010 + TAG_DESC_FRIEND, new AddCommand(expectedModuleTaken));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken expectedModuleTakenMultipleTags \u003d new ModuleTakenBuilder(DEFAULT_MODULE_CS1010)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS1010 + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS1010 + EXPECTED_MAX_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedModuleTakenMultipleTags));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken expectedModuleTaken \u003d new ModuleTakenBuilder(DEFAULT_MODULE_CS2103T).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2103T + SEMESTER_DESC_CS2103T"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        + EXPECTED_MIN_GRADE_DESC_CS2103T + EXPECTED_MAX_GRADE_DESC_CS2103T,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new AddCommand(expectedModuleTaken));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_INFO_CODE_CS1010 + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        + EXPECTED_MIN_GRADE_DESC_CS1010 + EXPECTED_MAX_GRADE_DESC_CS1010,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // missing semester prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS1010 + VALID_SEMESTER_CS1010"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        + EXPECTED_MIN_GRADE_DESC_CS1010 + EXPECTED_MAX_GRADE_DESC_CS1010,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_INFO_CODE_CS1010 + VALID_SEMESTER_CS1010"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        + VALID_EXPECTED_MIN_GRADE_CS1010 + VALID_EXPECTED_MAX_GRADE_CS1010,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // invalid module info code"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, INVALID_CS2103T_DESC + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS1010 + EXPECTED_MAX_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, ModuleInfoCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid semester"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS1010 + INVALID_SEMESTER_DESC"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS1010 + EXPECTED_MAX_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // invalid min grade"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS1010 + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + INVALID_EXPECTED_MIN_GRADE_DESC + EXPECTED_MAX_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // invalid max grade"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS1010 + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS1010 + INVALID_EXPECTED_MAX_GRADE_DESC"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_CS1010 + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS1010 + EXPECTED_MAX_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, INVALID_CS2103T_DESC + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        + EXPECTED_MIN_GRADE_DESC_CS1010 + INVALID_EXPECTED_MAX_GRADE_DESC,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                ModuleInfoCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_CS1010"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        + SEMESTER_DESC_CS1010 + EXPECTED_MIN_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS1010 + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "monikernemo": 75,
      "alexchong711": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MAX_GRADE_DESC_CS1010;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MAX_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MIN_GRADE_DESC_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPECTED_MIN_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CS2103T_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_MAX_GRADE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPECTED_MIN_GRADE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEMESTER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2103T;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_CS1010;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_CS2103T;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS2103T;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS1010;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS2103T;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS2103T;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS2103T;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleTakenDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditModuleTakenDescriptorBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_INFO_CODE_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_CS2103T, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CS2103T_DESC, ModuleInfoCode.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SEMESTER_DESC, Semester.MESSAGE_CONSTRAINTS); // invalid semester"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPECTED_MIN_GRADE_DESC, Grade.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXPECTED_MAX_GRADE_DESC, Grade.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid semester followed by valid min expected grade"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SEMESTER_DESC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS2103T, Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // valid semester followed by invalid semester. The test case for invalid semester followed by valid semester"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"1\" + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + INVALID_SEMESTER_DESC, Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code ModuleTaken} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CS2103T_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + INVALID_EXPECTED_MIN_GRADE_DESC + VALID_EXPECTED_MAX_GRADE_CS2103T"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + VALID_SEMESTER_CS2103T, ModuleInfoCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SEMESTER_DESC_CS1010 + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS2103T + EXPECTED_MAX_GRADE_DESC_CS2103T"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + NAME_DESC_CS2103T + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditCommand.EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withName(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS2103T)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS2103T)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SEMESTER_DESC_CS1010 + EXPECTED_MIN_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_CS2103T;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditCommand.EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withName(VALID_MODULE_INFO_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // semester"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SEMESTER_DESC_CS2103T;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditModuleTakenDescriptorBuilder().withSemester(VALID_SEMESTER_CS2103T).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // expected min grade"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPECTED_MIN_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS2103T)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // expected max grade"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPECTED_MAX_GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS2103T)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditModuleTakenDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + SEMESTER_DESC_CS2103T"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS2103T + EXPECTED_MIN_GRADE_DESC_CS2103T"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + TAG_DESC_FRIEND + SEMESTER_DESC_CS2103T + EXPECTED_MAX_GRADE_DESC_CS2103T"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MIN_GRADE_DESC_CS2103T + TAG_DESC_FRIEND + SEMESTER_DESC_CS1010"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + EXPECTED_MAX_GRADE_DESC_CS1010 + EXPECTED_MIN_GRADE_DESC_CS1010 + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditCommand.EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_SEMESTER_DESC + SEMESTER_DESC_CS1010;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditCommand.EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXPECTED_MIN_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + INVALID_SEMESTER_DESC + EXPECTED_MAX_GRADE_DESC_CS1010"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + SEMESTER_DESC_CS1010;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditModuleTakenDescriptorBuilder()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "monikernemo": 72,
      "alexchong711": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FINISHED_STATUS_DESC_TRUE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SEMESTER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_CS1010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SEMESTER_DESC_CS2103T;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_CS1010;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_CS2103T;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS2103T;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS2103T;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.FindModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseFailure(parser, \"cs\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseFailure(parser, INVALID_SEMESTER_DESC, Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseFailure(parser, INVALID_GRADE_DESC, Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d NAME_DESC_CS2103T + SEMESTER_DESC_CS2103T + GRADE_DESC_CS2103T + FINISHED_STATUS_DESC_TRUE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T).withGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d NAME_DESC_CS2103T + GRADE_DESC_CS2103T;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withGrade(VALID_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // subcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CS2103T, expectedCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // semester"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        fd \u003d new FindModuleDescriptorBuilder().withSemester(VALID_SEMESTER_CS2103T).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, SEMESTER_DESC_CS2103T, expectedCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // grade"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        fd \u003d new FindModuleDescriptorBuilder().withGrade(VALID_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertParseSuccess(parser, GRADE_DESC_CS2103T, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // finished status"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        fd \u003d new FindModuleDescriptorBuilder().withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseSuccess(parser, FINISHED_STATUS_DESC_TRUE, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d SEMESTER_DESC_CS2103T + GRADE_DESC_CS2103T + SEMESTER_DESC_CS1010 + GRADE_DESC_CS1010;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd \u003d new FindModuleDescriptorBuilder().withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withGrade(VALID_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String userInput \u003d INVALID_SEMESTER_DESC + SEMESTER_DESC_CS2103T;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd \u003d new FindModuleDescriptorBuilder().withSemester(VALID_SEMESTER_CS2103T).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userInput \u003d INVALID_SEMESTER_DESC + GRADE_DESC_CS2103T + SEMESTER_DESC_CS2103T;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        fd \u003d new FindModuleDescriptorBuilder().withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withGrade(VALID_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        expectedCommand \u003d new FindCommand(fd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "monikernemo": 32,
      "lshwayne96": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradTrakParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleTakenDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditModuleTakenDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.FindModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class GradTrakParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final GradTrakParser parser \u003d new GradTrakParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(moduleTaken));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(new AddCommand(moduleTaken), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        EditModuleTakenDescriptor descriptor \u003d new EditModuleTakenDescriptorBuilder(moduleTaken).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder(moduleTaken).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                + PersonUtil.getFindModuleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertEquals(new FindCommand(descriptor), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 123,
      "monikernemo": 10,
      "alexchong711": 3,
      "lshwayne96": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FINISHED_STATUS_FALSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String INVALID_MODULE_INFO_CODE \u003d \"CS123A\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_SEMESTER \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_EXPECTED_MAX_GRADE \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_EXPECTED_MIN_GRADE \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String VALID_MODULE_INFO_CODE \u003d \"CS1231\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String VALID_SEMESTER \u003d \"Y2S2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String VALID_EXPECTED_MAX_GRADE \u003d \"A_PLUS\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String VALID_EXPECTED_MIN_GRADE \u003d \"F\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.moduleInfoCode((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.moduleInfoCode(INVALID_MODULE_INFO_CODE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleInfoCode expectedName \u003d new ModuleInfoCode(VALID_MODULE_INFO_CODE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedName, ParserUtil.moduleInfoCode(VALID_MODULE_INFO_CODE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_MODULE_INFO_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleInfoCode expectedName \u003d new ModuleInfoCode(VALID_MODULE_INFO_CODE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedName, ParserUtil.moduleInfoCode(nameWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseSemester_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSemester((String) null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseSemester_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSemester(INVALID_SEMESTER));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseSemester_validValueWithoutWhitespace_returnsSemester() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester expectedSemester \u003d Semester.valueOf(VALID_SEMESTER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseSemester(VALID_SEMESTER));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseSemester_validValueWithWhitespace_returnsTrimmedSemester() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String semesterWithWhitespace \u003d WHITESPACE + VALID_SEMESTER + WHITESPACE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester expectedSemester \u003d Semester.valueOf(VALID_SEMESTER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedSemester, ParserUtil.parseSemester(semesterWithWhitespace));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMaxGrade_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGrade((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMaxGrade_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseGrade(INVALID_EXPECTED_MAX_GRADE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMaxGrade_validValueWithoutWhitespace_returnsExpectedMaxGrade() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Grade expectedExpectedMaxGrade \u003d Grade.getGrade(VALID_EXPECTED_MAX_GRADE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedExpectedMaxGrade, ParserUtil.parseGrade(VALID_EXPECTED_MAX_GRADE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMaxGrade_validValueWithWhitespace_returnsTrimmedExpectedMaxGrade() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_EXPECTED_MAX_GRADE + WHITESPACE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Grade expectedExpectedMaxGrade \u003d Grade.getGrade(VALID_EXPECTED_MAX_GRADE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedExpectedMaxGrade, ParserUtil.parseGrade(addressWithWhitespace));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMinGrade_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGrade((String) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMinGrade_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseGrade(INVALID_EXPECTED_MIN_GRADE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMinGrade_validValueWithoutWhitespace_returnsExpectedMinGrade() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Grade expectedExpectedMinGrade \u003d Grade.valueOf(VALID_EXPECTED_MIN_GRADE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedExpectedMinGrade, ParserUtil.parseGrade(VALID_EXPECTED_MIN_GRADE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parseExpectedMinGrade_validValueWithWhitespace_returnsTrimmedExpectedMinGrade() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMinGradeWithWhitespace \u003d WHITESPACE + VALID_EXPECTED_MIN_GRADE + WHITESPACE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Grade expectedExpectedMinGrade \u003d Grade.valueOf(VALID_EXPECTED_MIN_GRADE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedExpectedMinGrade, ParserUtil.parseGrade(expectedMinGradeWithWhitespace));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void parseFinishedStatus_returnsCorrectBoolean() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(ParserUtil.parseFinishedStatus(FINISHED_STATUS_TRUE));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(ParserUtil.parseFinishedStatus(FINISHED_STATUS_FALSE));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(ParserUtil.parseFinishedStatus(\"abc123\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test public void booleanToFinishedStatus_returnsCorrectString() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertEquals(ParserUtil.booleanToFinishedStatus(true), FINISHED_STATUS_TRUE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertEquals(ParserUtil.booleanToFinishedStatus(false), \"n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 156,
      "monikernemo": 15,
      "lshwayne96": 15,
      "alexchong711": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetLimitCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAX_CAP_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAX_LAB_HOUR_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAX_LECTURE_HOUR_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAX_PREPARATION_HOUR_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAX_PROJECT_HOUR_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MAX_TUTORIAL_HOUR_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MIN_CAP_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MIN_LAB_HOUR_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MIN_LECTURE_HOUR_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MIN_PREPARATION_HOUR_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MIN_PROJECT_HOUR_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MIN_TUTORIAL_HOUR_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_CAP_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_LAB_HOUR_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_LECTURE_HOUR_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_PREPARATION_HOUR_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_PROJECT_HOUR_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MAX_TUTORIAL_HOUR_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MIN_CAP_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MIN_LAB_HOUR_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MIN_LECTURE_HOUR_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MIN_PREPARATION_HOUR_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MIN_PROJECT_HOUR_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MIN_TUTORIAL_HOUR_DESC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_CAP;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_LAB_HOUR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_PROJECT_HOUR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_CAP;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_LAB_HOUR;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_LECTURE_HOUR;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_PREPARATION_HOUR;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_PROJECT_HOUR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_TUTORIAL_HOUR;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_SEMESTER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_SEMESTER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_SEMESTER;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetSemLimitCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.EditSemLimitDescriptorBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SetLimitCommandParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetSemLimitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private SetLimitCommandParser parser \u003d new SetLimitCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, VALID_MAX_LECTURE_HOUR, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y2S2\", SetSemLimitCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // not a semester"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"word\" + MIN_CAP_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // a number"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"2\" + MIN_CAP_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid semester 3"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y3Y3\" + MIN_CAP_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid year 6"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y6Y1\" + MIN_CAP_DESC, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y2Y1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1Y1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MIN_CAP_DESC, CapAverage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MAX_CAP_DESC, CapAverage.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MIN_LECTURE_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MAX_LECTURE_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MIN_TUTORIAL_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MAX_TUTORIAL_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MIN_LAB_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MAX_LAB_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MIN_PROJECT_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MAX_PROJECT_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MIN_PREPARATION_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MAX_PREPARATION_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid min lecture hour followed by valid max lecture hour"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + INVALID_MIN_LECTURE_HOUR_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MAX_LECTURE_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // valid min lecture hours followed by invalid max lecture hours"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseFailure(parser, \"Y1S1\" + MIN_LECTURE_HOUR_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + INVALID_MAX_LECTURE_HOUR_DESC, Hour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester targetIndex \u003d INDEX_SECOND_SEMESTER;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String userInput \u003d targetIndex.name() + MIN_CAP_DESC + MAX_CAP_DESC + MIN_LECTURE_HOUR_DESC"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MAX_LECTURE_HOUR_DESC + MIN_TUTORIAL_HOUR_DESC + MAX_TUTORIAL_HOUR_DESC + MIN_LAB_HOUR_DESC"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MAX_LAB_HOUR_DESC + MIN_PROJECT_HOUR_DESC + MAX_PROJECT_HOUR_DESC + MIN_PREPARATION_HOUR_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MAX_PREPARATION_HOUR_DESC;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand.EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinCap(VALID_MIN_CAP)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(VALID_MAX_CAP)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLectureHour(VALID_MIN_LECTURE_HOUR)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLectureHour(VALID_MAX_LECTURE_HOUR)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinTutorialHour(VALID_MIN_TUTORIAL_HOUR)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxTutorialHour(VALID_MAX_TUTORIAL_HOUR)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLabHour(VALID_MIN_LAB_HOUR)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLabHour(VALID_MAX_LAB_HOUR)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinProjectHour(VALID_MIN_PROJECT_HOUR)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxProjectHour(VALID_MAX_PROJECT_HOUR)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinPreparationHour(VALID_MIN_PREPARATION_HOUR)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxPreparationHour(VALID_MAX_PREPARATION_HOUR)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester targetIndex \u003d INDEX_FIRST_SEMESTER;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String userInput \u003d targetIndex.name() + MAX_CAP_DESC + MIN_LECTURE_HOUR_DESC;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand.EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxCap(VALID_MAX_CAP)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLectureHour(VALID_MIN_LECTURE_HOUR).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // min project hour"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester targetIndex \u003d INDEX_THIRD_SEMESTER;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String userInput \u003d targetIndex.name() + MIN_PROJECT_HOUR_DESC;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand.EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinProjectHour(VALID_MIN_PROJECT_HOUR)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // min cap"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        userInput \u003d targetIndex.name() + MIN_CAP_DESC;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinCap(VALID_MIN_CAP)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // min lecture hour"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        userInput \u003d targetIndex.name() + MIN_LECTURE_HOUR_DESC;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLectureHour(VALID_MIN_LECTURE_HOUR)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // max lecture hour"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        userInput \u003d targetIndex.name() + MAX_LECTURE_HOUR_DESC;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLectureHour(VALID_MAX_LECTURE_HOUR)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // max project hour"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        userInput \u003d targetIndex.name() + MAX_PROJECT_HOUR_DESC;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxProjectHour(VALID_MAX_PROJECT_HOUR).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester targetIndex \u003d INDEX_FIRST_SEMESTER;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String userInput \u003d targetIndex.name() + MIN_CAP_DESC"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MAX_LECTURE_HOUR_DESC + MIN_LECTURE_HOUR_DESC"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MIN_LAB_HOUR_DESC + MAX_LAB_HOUR_DESC + MAX_LECTURE_HOUR_DESC"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MIN_LECTURE_HOUR_DESC + MIN_LAB_HOUR_DESC + MIN_CAP_DESC"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MAX_TUTORIAL_HOUR_DESC + MIN_TUTORIAL_HOUR_DESC;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand.EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinCap(VALID_MIN_CAP)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLectureHour(VALID_MIN_LECTURE_HOUR)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLectureHour(VALID_MAX_LECTURE_HOUR)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinTutorialHour(VALID_MIN_TUTORIAL_HOUR)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxTutorialHour(VALID_MAX_TUTORIAL_HOUR)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinLabHour(VALID_MIN_LAB_HOUR)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxLabHour(VALID_MAX_LAB_HOUR)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Semester targetIndex \u003d INDEX_FIRST_SEMESTER;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String userInput \u003d targetIndex.name() + INVALID_MIN_CAP_DESC + MIN_CAP_DESC;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand.EditSemLimitDescriptor descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinCap(VALID_MIN_CAP)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        SetSemLimitCommand expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        userInput \u003d targetIndex.name() + MIN_TUTORIAL_HOUR_DESC"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + INVALID_MIN_CAP_DESC + MAX_TUTORIAL_HOUR_DESC"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                + MIN_CAP_DESC;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditSemLimitDescriptorBuilder()"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinCap(VALID_MIN_CAP)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMinTutorialHour(VALID_MIN_TUTORIAL_HOUR)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withMaxTutorialHour(VALID_MAX_TUTORIAL_HOUR).build();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        expectedCommand \u003d new SetSemLimitCommand("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                Index.fromZeroBased(targetIndex.getIndex()), descriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 258
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.exceptions.DuplicateModuleTakenException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final GradTrak addressBook \u003d new GradTrak();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getModulesTakenList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak newData \u003d getTypicalGradTrak();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // Two modulesTaken with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e newModuleTakens \u003d Arrays.asList(CS2103T, editedAlice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrakStub newData \u003d new GradTrakStub(newModuleTakens);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(DuplicateModuleTakenException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook.hasModuleTaken(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(addressBook.hasModuleTaken(CS2103T));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(addressBook.hasModuleTaken(CS2103T));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(addressBook.hasModuleTaken(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook.getModulesTakenList().remove(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addListener(listener);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removeListener(listener);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * A stub ReadOnlyGradTrak whose modulesTaken list can violate interface constraints."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static class GradTrakStub implements ReadOnlyGradTrak {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        private final ObservableList\u003cModuleTaken\u003e modulesTaken \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        GradTrakStub(Collection\u003cModuleTaken\u003e modulesTaken) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            this.modulesTaken.setAll(modulesTaken);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        public ObservableList\u003cModuleTaken\u003e getModulesTakenList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "            return modulesTaken;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public ObservableList\u003cSemLimit\u003e getSemesterLimitList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        public Semester getCurrentSemester() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "monikernemo": 29,
      "alexchong711": 9,
      "lshwayne96": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS1010;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.CourseList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.exceptions.ModuleTakenNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.GradTrakBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(new GradTrak(), new GradTrak(modelManager.getGradTrak()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(null, modelManager.getSelectedClassForPrinting());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userPrefs.setGradTrakFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userPrefs.setGradTrakFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setGradTrakFilePath(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setGradTrakFilePath(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(path, modelManager.getGradTrakFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.hasModuleTaken(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(modelManager.hasModuleTaken(CS2103T));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(modelManager.hasModuleTaken(CS2103T));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndFirstPersonInFilteredPersonList_selectionCleared() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setSelectedModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.deleteModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(null, modelManager.getSelectedClassForPrinting());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson_personIsSelectedAndSecondPersonInFilteredPersonList_firstPersonSelected() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.addModuleTaken(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Arrays.asList(CS2103T, DEFAULT_MODULE_CS1010), modelManager.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setSelectedModuleTaken(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.deleteModuleTaken(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(CS2103T, modelManager.getSelectedClassForPrinting());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_personIsSelected_selectedPersonUpdated() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setSelectedModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken updatedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setModuleTaken(CS2103T, updatedAlice);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedClassForPrinting());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.getFilteredModulesTakenList().remove(0);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personNotInFilteredPersonList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(ModuleTakenNotFoundException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setSelectedModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSelectedPerson_personInFilteredPersonList_setsSelectedPerson() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.addModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Collections.singletonList(CS2103T), modelManager.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.setSelectedModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(CS2103T, modelManager.getSelectedClassForPrinting());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak addressBook \u003d new GradTrakBuilder().withPerson(CS2103T).withPerson(CS2101).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak differentAddressBook \u003d new GradTrak();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Anand270294"
        },
        "content": "        ModuleInfoList moduleInfoList \u003d new ModuleInfoList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseList courseList \u003d new CourseList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UserInfo userInfo \u003d new UserInfo();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs, moduleInfoList, courseList, userInfo);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs, moduleInfoList, courseList, userInfo);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                moduleInfoList, courseList, userInfo)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String[] keywords \u003d CS2103T.getModuleInfoCode().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.updateFilteredModulesTakenList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                moduleInfoList, courseList, userInfo)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        modelManager.updateFilteredModulesTakenList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        differentUserPrefs.setGradTrakFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                moduleInfoList, courseList, userInfo)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anand270294": 2,
      "-": 134,
      "monikernemo": 54,
      "alexchong711": 5,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setGradTrakFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "monikernemo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS1010S;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS2103T;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.GradTrakBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ReadOnlyGradTrak addressBookWithAmy \u003d new GradTrakBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withPerson(DEFAULT_MODULE_CS2103T).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ReadOnlyGradTrak addressBookWithBob \u003d new GradTrakBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withPerson(DEFAULT_MODULE_CS1010).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ReadOnlyGradTrak addressBookWithCarl \u003d new GradTrakBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withPerson(CS1010S).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final ReadOnlyGradTrak emptyAddressBook \u003d new GradTrakBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertThrows(VersionedGradTrak.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertThrows(VersionedGradTrak.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertThrows(VersionedGradTrak.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertThrows(VersionedGradTrak.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private void assertAddressBookListStatus(VersionedGradTrak versionedAddressBook,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                             List\u003cReadOnlyGradTrak\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                             ReadOnlyGradTrak expectedCurrentState,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                                             List\u003cReadOnlyGradTrak\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(new GradTrak(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (ReadOnlyGradTrak expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            assertEquals(expectedAddressBook, new GradTrak(versionedAddressBook));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (ReadOnlyGradTrak expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            assertEquals(expectedAddressBook, new GradTrak(versionedAddressBook));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Creates and returns a {@code VersionedGradTrak} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code VersionedGradTrak#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private VersionedGradTrak prepareAddressBookList(ReadOnlyGradTrak... addressBookStates) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        VersionedGradTrak versionedAddressBook \u003d new VersionedGradTrak(addressBookStates[0]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedGradTrak versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 249,
      "monikernemo": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/course/CompositeRequirementTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CompositeRequirement.LogicalConnector.AND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CompositeRequirement.LogicalConnector.OR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.CORE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.GE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.UE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.COMPUTER_SCIENCE_FOUNDATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.SCIENCE_REQUIREMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.UNIVERSITY_LEVEL_REQUIREMENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class CompositeRequirementTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final CompositeRequirement SAMPLE_REQUIREMENT \u003d new CompositeRequirement(UNIVERSITY_LEVEL_REQUIREMENT,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            COMPUTER_SCIENCE_FOUNDATION, AND, CORE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CompositeRequirement(null ,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                UNIVERSITY_LEVEL_REQUIREMENT, AND, GE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CompositeRequirement(UNIVERSITY_LEVEL_REQUIREMENT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                null, AND, GE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CompositeRequirement(UNIVERSITY_LEVEL_REQUIREMENT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                UNIVERSITY_LEVEL_REQUIREMENT, null, GE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CompositeRequirement(UNIVERSITY_LEVEL_REQUIREMENT,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                UNIVERSITY_LEVEL_REQUIREMENT, OR, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(SAMPLE_REQUIREMENT.equals(SAMPLE_REQUIREMENT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equals null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equals a different object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different first requirement"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new CompositeRequirement(SCIENCE_REQUIREMENT, COMPUTER_SCIENCE_FOUNDATION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                AND, CORE)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different second requirement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new CompositeRequirement(UNIVERSITY_LEVEL_REQUIREMENT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                SCIENCE_REQUIREMENT, AND, CORE)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different type"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new CompositeRequirement(UNIVERSITY_LEVEL_REQUIREMENT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                COMPUTER_SCIENCE_FOUNDATION, AND, UE)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different connector"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new CompositeRequirement(UNIVERSITY_LEVEL_REQUIREMENT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                COMPUTER_SCIENCE_FOUNDATION, OR, UE)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //everything same but different order"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(SAMPLE_REQUIREMENT.equals(new CompositeRequirement(COMPUTER_SCIENCE_FOUNDATION,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                UNIVERSITY_LEVEL_REQUIREMENT, AND, CORE)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/course/ConditionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ConditionBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.TypicalCondition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ConditionTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String[] nullArray \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Condition(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Condition(1, null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_invalidRegex_throwsInvalidArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Condition(1, \"(([]})\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Condition(\"(InvalidRegex}\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_invalidMinToSatisfy_throwsInvalidArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Condition(-1, \"valid regex\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Condition(0, \"another valid regex\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Condition geh \u003d TypicalCondition.GEH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertEquals(geh, geh);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equals null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertNotEquals(null, geh);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equals other type"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertNotEquals(geh, 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equals when different min"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Condition modifiedGeh \u003d new ConditionBuilder().withMin(3).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertNotEquals(modifiedGeh, geh);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //alternate constructor for Condition"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        modifiedGeh \u003d new ConditionBuilder().withMin(1).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Condition modifiedGeh2 \u003d new Condition(ConditionBuilder.DEFAULT_PATTERN.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertEquals(modifiedGeh, modifiedGeh2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 41,
      "lshwayne96": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/course/CourseDescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class CourseDescriptionTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CourseDescription(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void isValidCourseDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //invalid course description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CourseDescription.isValidCourseDescription(\" starts with white space\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //valid course description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(CourseName.isValidCourseName(\"some description\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseDescription test \u003d new CourseDescription(\"valid course description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //equal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(test, test);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(new CourseDescription(\"valid course description\"), test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equal"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(null, test);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(\"somethingelse\", test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(new CourseName(\"some other name\"), test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/course/CourseNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class CourseNameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CourseName(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void isValidCourseName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //invalid course name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CourseName.isValidCourseName(\"\u0026S*A\u0026D!\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CourseName.isValidCourseName(\" starts with white space\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CourseName.isValidCourseName(\"2138129839120\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //valid course name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(CourseName.isValidCourseName(\"coursename\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        CourseName test \u003d new CourseName(\"valid coursename\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //equal"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(test, test);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(new CourseName(\"valid coursename\"), test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equal"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(null, test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(\"somethingelse\", test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(new CourseName(\"some other name\"), test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/course/PrimitiveRequirementTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.GE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.course.CourseReqType.UE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.COMPLETE_40_MODULES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.COMPUTER_SCIENCE_FOUNDATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.GEH_CONDITION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.IT_PROFESSIONALISM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.model.util.SampleCourseRequirement.UNIVERSITY_LEVEL_REQUIREMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalCondition.GEH;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class PrimitiveRequirementTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final PrimitiveRequirement SAMPLE_REQUIREMENT \u003d (PrimitiveRequirement) UNIVERSITY_LEVEL_REQUIREMENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition SAMPLE_CONDITION \u003d GEH_CONDITION;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final PrimitiveRequirement SAMPLE_REQUIREMENT_2 \u003d (PrimitiveRequirement) COMPUTER_SCIENCE_FOUNDATION;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final PrimitiveRequirement SAMPLE_REQUIREMENT_3 \u003d (PrimitiveRequirement) IT_PROFESSIONALISM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PrimitiveRequirement(null , \"some description\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                GE, GEH));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PrimitiveRequirement(\"ReqName\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "               null, GE, GEH_CONDITION));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PrimitiveRequirement(\"Reqname\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "               \"nonNullDescription\", GE, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PrimitiveRequirement(\"Reqname\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                \"nonNullDescription\", null, GEH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equal() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(SAMPLE_REQUIREMENT.equals(SAMPLE_REQUIREMENT));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equals null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //not equals a different object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new PrimitiveRequirement(\"Other name\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT.getCourseReqDesc(), SAMPLE_REQUIREMENT.getType(), SAMPLE_CONDITION)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new PrimitiveRequirement(SAMPLE_REQUIREMENT.getCourseReqName(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            \"other description\", SAMPLE_REQUIREMENT.getType(), SAMPLE_CONDITION)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different condition"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new PrimitiveRequirement(SAMPLE_REQUIREMENT.getCourseReqName(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT.getCourseReqDesc(), SAMPLE_REQUIREMENT.getType(), COMPLETE_40_MODULES)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        //different type"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(SAMPLE_REQUIREMENT.equals(new PrimitiveRequirement(SAMPLE_REQUIREMENT.getCourseReqName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT.getCourseReqDesc(), UE, SAMPLE_CONDITION)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void or() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(SAMPLE_REQUIREMENT.or(SAMPLE_REQUIREMENT_2), SAMPLE_REQUIREMENT.or(new PrimitiveRequirement("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT_2.getCourseReqName(), SAMPLE_REQUIREMENT_2.getCourseReqDesc(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT_2.getType(), SAMPLE_REQUIREMENT_2.getConditions().toArray(new Condition[0]))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(SAMPLE_REQUIREMENT_2.or(SAMPLE_REQUIREMENT), SAMPLE_REQUIREMENT.or(SAMPLE_REQUIREMENT_2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(SAMPLE_REQUIREMENT_2.or(SAMPLE_REQUIREMENT_3),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT_3.or(SAMPLE_REQUIREMENT_2));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void and() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(SAMPLE_REQUIREMENT.and(SAMPLE_REQUIREMENT_2), SAMPLE_REQUIREMENT.and(new PrimitiveRequirement("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT_2.getCourseReqName(), SAMPLE_REQUIREMENT_2.getCourseReqDesc(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            SAMPLE_REQUIREMENT_2.getType(), SAMPLE_REQUIREMENT_2.getConditions().toArray(new Condition[0]))));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotEquals(SAMPLE_REQUIREMENT_2.and(SAMPLE_REQUIREMENT), SAMPLE_REQUIREMENT.and(SAMPLE_REQUIREMENT_2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(SAMPLE_REQUIREMENT_2.and(SAMPLE_REQUIREMENT_3), SAMPLE_REQUIREMENT_3.and(SAMPLE_REQUIREMENT_2));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 71,
      "lshwayne96": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/FindModulePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FINISHED_STATUS_FALSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.FINISHED_STATUS_TRUE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.KEYWORD_MATCHING_CS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.FindModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class FindModulePredicateTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Semester currentSemester \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd1 \u003d new FindModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withCode(VALID_MODULE_INFO_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd2 \u003d new FindModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withCode(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        FindModuleDescriptor fd3 \u003d new FindModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withGrade(VALID_EXPECTED_MIN_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor fd4 \u003d new FindModuleDescriptorBuilder().withCode(\"CS\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor fd5 \u003d new FindModuleDescriptorBuilder().withCode(\"cs\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate fp1 \u003d new FindModulePredicate(fd1, currentSemester);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate fp2 \u003d new FindModulePredicate(fd2, currentSemester);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate fp3 \u003d new FindModulePredicate(fd3, currentSemester);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate fp4 \u003d new FindModulePredicate(fd4, currentSemester);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate fp5 \u003d new FindModulePredicate(fd5, currentSemester);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(fp1.equals(fp1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate fp1copy \u003d new FindModulePredicate(fd1, currentSemester);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(fp1.equals(fp1copy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // same values (ignoring case) -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(fp4.equals(fp5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fp1.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fp1.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fp1.equals(fp2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different number of parameters -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(fp1.equals(fp3));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void test_singleParameter_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Semester currentSemester \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // code only"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withCode(KEYWORD_MATCHING_CS).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(VALID_MODULE_INFO_CODE_CS2103T).build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // semester only"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder().withSemester(VALID_SEMESTER_CS2103T).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withSemester(VALID_SEMESTER_CS2103T).build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // grade only"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder().withGrade(VALID_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withExpectedMaxGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS2103T).build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // finished status only"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        currentSemester \u003d Semester.Y2S2;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder().withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withSemester(VALID_SEMESTER_CS1010).build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void test_multipleParameters_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Semester currentSemester \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withFinishedStatus(FINISHED_STATUS_FALSE).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS2103T).build()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        currentSemester \u003d Semester.Y3S1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder().withCode(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010).withGrade(VALID_GRADE_CS1010)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_GRADE_CS1010)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS1010)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void test_singleParameter_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Semester currentSemester \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // code only"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withCode(VALID_MODULE_INFO_CODE_CS2103T).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010).build()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // semester only"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder().withSemester(VALID_SEMESTER_CS2103T).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder().withSemester(VALID_SEMESTER_CS1010).build()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // grade only"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder().withGrade(VALID_GRADE_CS2103T).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder().withExpectedMaxGrade(VALID_GRADE_CS1010)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS1010).build()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // finished status only"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptorBuilder().withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder().build()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void test_multipleParameters_returnsFalse() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Semester currentSemester \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModuleDescriptor descriptor \u003d new FindModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withFinishedStatus(FINISHED_STATUS_TRUE).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        FindModulePredicate predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // all different"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_GRADE_CS1010)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS1010).build()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        currentSemester \u003d Semester.GRAD;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // code different"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS2103T).build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // semester different"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS2103T).build()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // grade different"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_GRADE_CS1010)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS1010).build()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        currentSemester \u003d Semester.Y2S1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        predicate \u003d new FindModulePredicate(descriptor, currentSemester);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // finished status different"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withExpectedMaxGrade(VALID_GRADE_CS2103T)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withExpectedMinGrade(VALID_GRADE_CS2103T).build()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 53,
      "lshwayne96": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/GradeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class GradeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Grade.valueOf(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void constructor_invalidGradeWithWhitespace_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Grade.valueOf(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void isValidExpectedMinGradeWithWhitespace() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // null grade"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Grade.isValidGrade(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // blank grade"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"@\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"d\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"3\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"12\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"G3\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"AB\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A++\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A-\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"B_Minus\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"B_Plus\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // valid grade"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"F\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"D\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A_PLUS\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C_PLUS\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B_MINUS\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/HourTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class HourTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Hour(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void constructor_invalidHour_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String invalidHour \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Hour(invalidHour));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void isValidHour() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // null hour"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Hour.isValidHour(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid hour"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Hour.isValidHour(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Hour.isValidHour(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Hour.isValidHour(\"f\")); // contains non numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Hour.isValidHour(\"-4\")); // negative numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Hour.isValidHour(\"4.33\")); // more than 1 decimal places"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Hour.isValidHour(\"4.3\")); // not .5 or .0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Hour.isValidHour(\"1000.33\")); // more than 3 leading digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // valid hour"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"0\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"0.5\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"2\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"2.5\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"999\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"999.5\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"00\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"00.5\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"20.0\")); // .0"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Hour.isValidHour(\"0.0\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/ModuleInfoCodeContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ModuleInfoCodeContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different moduleTaken -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"CS2103T\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2030\", \"CS2103T\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2040\", \"CS2103T\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(\"CS2040\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cs2103T\", \"cs2040C\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(\"CS2040C\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(\"CS2040\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"CS2010\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(\"CS2101\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // Keywords match semester, min \u0026 max expected grade, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"cs2012\", \"CS2103\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \"DEFAULT_MODULE_CS1010\", \"cs2040\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(predicate.test(new ModuleTakenBuilder().withModuleInfoCode(\"CS2101\").withSemester(\"Y2S2\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withExpectedMinGrade(\"C\").withExpectedMaxGrade(\"B\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 19,
      "-": 56,
      "alexchong711": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/ModuleInfoCodeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ModuleInfoCodeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ModuleInfoCode(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ModuleInfoCode(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void isValidModuleInfoCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ModuleInfoCode.isValidModuleInfoCode(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(ModuleInfoCode.isValidModuleInfoCode(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(ModuleInfoCode.isValidModuleInfoCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(ModuleInfoCode.isValidModuleInfoCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(ModuleInfoCode.isValidModuleInfoCode(\"MA152\")); // 3 numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(ModuleInfoCode.isValidModuleInfoCode(\"CS1010SJXT\")); //4 suffix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(ModuleInfoCode.isValidModuleInfoCode(\"CS2101\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(ModuleInfoCode.isValidModuleInfoCode(\"CS2103T\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(ModuleInfoCode.isValidModuleInfoCode(\"DSA1234PPP\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(ModuleInfoCode.isValidModuleInfoCode(\"ABC5819T\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(ModuleInfoCode.isValidModuleInfoCode(\"CS1010JKS\")); //3 suffix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/ModuleTakenTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS1010;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ModuleTakenTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        moduleTaken.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(CS2103T.isSameModuleTaken(CS2103T));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.isSameModuleTaken(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different semester and expected min grade -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.isSameModuleTaken(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        editedAlice \u003d new ModuleTakenBuilder(CS2103T).withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.isSameModuleTaken(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same name, same semester, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(CS2103T.isSameModuleTaken(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same name, same expected max grade, different tags -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(CS2103T.isSameModuleTaken(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken aliceCopy \u003d new ModuleTakenBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(CS2103T.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different moduleTaken -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(DEFAULT_MODULE_CS1010));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different semester -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withSemester(VALID_SEMESTER_CS1010).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/SemesterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Semester.valueOf(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void constructor_invalidSemester_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String invalidSemester \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e Semester.valueOf(invalidSemester));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void isValidSemesterForTakingModules() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // null semester number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Semester.isValidSemesterForTakingModules(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid semester numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemesterForTakingModules(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemesterForTakingModules(\" \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemesterForTakingModules(\"S2\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemesterForTakingModules(\"Y3S4\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemesterForTakingModules(\"Y6S2\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemesterForTakingModules(\"Y1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemesterForTakingModules(\"GRAD\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // valid semester numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Semester.isValidSemesterForTakingModules(\"Y2S1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Semester.isValidSemesterForTakingModules(\"Y1S1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Semester.isValidSemesterForTakingModules(\"Y4S2\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void isValidSemester() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // null semester number"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Semester.isValidSemester(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // invalid semester numbers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemester(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"S2\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"Y3S4\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"Y6S2\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"Y1\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // valid semester numbers"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Semester.isValidSemester(\"Y2S1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Semester.isValidSemester(\"Y1S1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Semester.isValidSemester(\"Y4S2\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertTrue(Semester.isValidSemester(\"GRAD\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/UniqueModuleTakenListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.DEFAULT_MODULE_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.exceptions.DuplicateModuleTakenException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.exceptions.ModuleTakenNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class UniqueModuleTakenListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final UniqueModuleTakenList uniqueModuleTakenList \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(uniqueModuleTakenList.contains(CS2103T));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(uniqueModuleTakenList.contains(CS2103T));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(uniqueModuleTakenList.contains(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(DuplicateModuleTakenException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPerson(null, CS2103T);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPerson(CS2103T, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(ModuleTakenNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPerson(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPerson(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UniqueModuleTakenList expectedUniqueModuleTakenList \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedUniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedUniqueModuleTakenList, uniqueModuleTakenList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken editedAlice \u003d new ModuleTakenBuilder(CS2103T)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPerson(CS2103T, editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UniqueModuleTakenList expectedUniqueModuleTakenList \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedUniqueModuleTakenList.add(editedAlice);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedUniqueModuleTakenList, uniqueModuleTakenList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPerson(CS2103T, DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UniqueModuleTakenList expectedUniqueModuleTakenList \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedUniqueModuleTakenList.add(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedUniqueModuleTakenList, uniqueModuleTakenList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(DuplicateModuleTakenException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPerson(CS2103T, DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.remove(null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(ModuleTakenNotFoundException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.remove(CS2103T);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.remove(CS2103T);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UniqueModuleTakenList expectedUniqueModuleTakenList \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedUniqueModuleTakenList, uniqueModuleTakenList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPersons((UniqueModuleTakenList) null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UniqueModuleTakenList expectedUniqueModuleTakenList \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedUniqueModuleTakenList.add(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPersons(expectedUniqueModuleTakenList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedUniqueModuleTakenList, uniqueModuleTakenList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPersons((List\u003cModuleTaken\u003e) null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.add(CS2103T);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e moduleTakenList \u003d Collections.singletonList(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPersons(moduleTakenList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        UniqueModuleTakenList expectedUniqueModuleTakenList \u003d new UniqueModuleTakenList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedUniqueModuleTakenList.add(DEFAULT_MODULE_CS1010);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedUniqueModuleTakenList, uniqueModuleTakenList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        List\u003cModuleTaken\u003e listWithDuplicateModuleTakens \u003d Arrays.asList(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expect(DuplicateModuleTakenException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.setPersons(listWithDuplicateModuleTakens);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uniqueModuleTakenList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 72,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/model/moduletaken/WorkloadTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.model.moduletaken;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalWorkloads.CS1010_WORKLOAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalWorkloads.CS2040_WORKLOAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.testutil.WorkloadBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "class WorkloadTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(CS2040_WORKLOAD.equals(CS2040_WORKLOAD));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(5));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // different CS2040_WORKLOAD -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(CS1010_WORKLOAD));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Workload modifiedCS2040Workload \u003d new WorkloadBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withLectureHour(CS2040_WORKLOAD.getLectureHour().toString())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withTutorialHour(CS2040_WORKLOAD.getTutorialHour().toString())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withLabHour(CS2040_WORKLOAD.getLabHour().toString())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withProjectHour(CS2040_WORKLOAD.getProjectHour().toString())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withPreparationHour(CS2040_WORKLOAD.getPreparationHour().toString()).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(modifiedCS2040Workload));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        //different lecture hours -\u003e return false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        modifiedCS2040Workload \u003d new WorkloadBuilder().withLectureHour(\"2\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withTutorialHour(CS2040_WORKLOAD.getTutorialHour().toString())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withLabHour(CS2040_WORKLOAD.getLabHour().toString())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withProjectHour(CS2040_WORKLOAD.getProjectHour().toString())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withPreparationHour(CS2040_WORKLOAD.getPreparationHour().toString()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(modifiedCS2040Workload));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        //different tutorial hours -\u003e return false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        modifiedCS2040Workload \u003d new WorkloadBuilder().withLectureHour(CS2040_WORKLOAD.getLectureHour().toString())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withTutorialHour(CS2040_WORKLOAD.getTutorialHour().toString())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withLabHour(CS2040_WORKLOAD.getLabHour().toString())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withProjectHour(CS2040_WORKLOAD.getProjectHour().toString())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withPreparationHour(CS2040_WORKLOAD.getPreparationHour().toString()).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(modifiedCS2040Workload));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        //different tutorial hours -\u003e return false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        modifiedCS2040Workload \u003d new WorkloadBuilder().withLectureHour(CS2040_WORKLOAD.getLectureHour().toString())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withTutorialHour(\"2\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withLabHour(CS2040_WORKLOAD.getLabHour().toString())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withProjectHour(CS2040_WORKLOAD.getProjectHour().toString())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withPreparationHour(CS2040_WORKLOAD.getPreparationHour().toString()).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(modifiedCS2040Workload));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        //different lab hours -\u003e return false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        modifiedCS2040Workload \u003d new WorkloadBuilder().withLectureHour(CS2040_WORKLOAD.getLectureHour().toString())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withTutorialHour(CS2040_WORKLOAD.getTutorialHour().toString())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withLabHour(\"2\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withProjectHour(CS2040_WORKLOAD.getProjectHour().toString())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withPreparationHour(CS2040_WORKLOAD.getPreparationHour().toString()).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(modifiedCS2040Workload));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        //different project hours -\u003e return false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        modifiedCS2040Workload \u003d new WorkloadBuilder().withLectureHour(CS2040_WORKLOAD.getLectureHour().toString())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withTutorialHour(CS2040_WORKLOAD.getTutorialHour().toString())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withLabHour(CS2040_WORKLOAD.getLabHour().toString())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withProjectHour(\"2\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withPreparationHour(CS2040_WORKLOAD.getPreparationHour().toString()).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(modifiedCS2040Workload));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        //different preparation hours -\u003e return false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        modifiedCS2040Workload \u003d new WorkloadBuilder().withLectureHour(CS2040_WORKLOAD.getLectureHour().toString())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withTutorialHour(CS2040_WORKLOAD.getTutorialHour().toString())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withLabHour(CS2040_WORKLOAD.getLabHour().toString())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                .withProjectHour(CS2040_WORKLOAD.getProjectHour().toString())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                .withPreparationHour(\"2\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(CS2040_WORKLOAD.equals(modifiedCS2040Workload));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 1,
      "alexchong711": 40,
      "lshwayne96": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recmodule/RecModuleComparatorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.model.recmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.BD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.CORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.FAC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.GE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.IE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.UE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.RecModuleBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class RecModuleComparatorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private RecModuleComparator comparator \u003d new RecModuleComparator();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode ma1521 \u003d new ModuleInfoCode(\"MA1521\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode ma1101r \u003d new ModuleInfoCode(\"MA1101R\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode acc1002 \u003d new ModuleInfoCode(\"ACC1002\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode ycc1111 \u003d new ModuleInfoCode(\"YCC1111\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode cs2103t \u003d new ModuleInfoCode(\"CS2103T\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode pc3130 \u003d new ModuleInfoCode(\"PC3130\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode acc4611 \u003d new ModuleInfoCode(\"ACC4611\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode vm5101 \u003d new ModuleInfoCode(\"VM5101\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode baa6001 \u003d new ModuleInfoCode(\"BAA6001\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoTitle title \u003d new ModuleInfoTitle(\"title\"); // dummy title"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void compareType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule core \u003d new RecModuleBuilder(cs2103t, title).withType(CORE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule bd \u003d new RecModuleBuilder(cs2103t, title).withType(BD).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule ie \u003d new RecModuleBuilder(cs2103t, title).withType(IE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule fac \u003d new RecModuleBuilder(cs2103t, title).withType(FAC).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule ge \u003d new RecModuleBuilder(cs2103t, title).withType(GE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule ue \u003d new RecModuleBuilder(cs2103t, title).withType(UE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(core, bd) \u003c 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(bd, ie) \u003c 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(ie, fac) \u003c 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(fac, ge) \u003c 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(ge, ue) \u003c 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void compareLevel() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule one \u003d new RecModuleBuilder(ma1521, title).withType(CORE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule two \u003d new RecModuleBuilder(cs2103t, title).withType(CORE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule three \u003d new RecModuleBuilder(pc3130, title).withType(CORE).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule four \u003d new RecModuleBuilder(acc4611, title).withType(CORE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule five \u003d new RecModuleBuilder(vm5101, title).withType(CORE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule six \u003d new RecModuleBuilder(baa6001, title).withType(CORE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(one, two) \u003c 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(two, three) \u003c 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(three, four) \u003c 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(four, five) \u003c 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(five, six) \u003c 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void compareLex() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule acc1002 \u003d new RecModuleBuilder(this.acc1002, title).withType(CORE).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule ma1101r \u003d new RecModuleBuilder(this.ma1101r, title).withType(CORE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule ma1521 \u003d new RecModuleBuilder(this.ma1521, title).withType(CORE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule ycc1111 \u003d new RecModuleBuilder(this.ycc1111, title).withType(CORE).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(acc1002, ma1101r) \u003c 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(ma1101r, ma1521) \u003c 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(ma1521, ycc1111) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void compareMultiple() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule rm1 \u003d new RecModuleBuilder(baa6001, title).withType(CORE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule rm2 \u003d new RecModuleBuilder(ma1521, title).withType(UE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        /* different type -\u003e compare type */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(rm1, rm2) \u003c 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        rm1 \u003d new RecModuleBuilder(ycc1111, title).withType(FAC).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        rm2 \u003d new RecModuleBuilder(acc4611, title).withType(FAC).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        /* same type -\u003e different level -\u003e compare level */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(rm1, rm2) \u003c 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        rm1 \u003d new RecModuleBuilder(acc1002, title).withType(UE).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        rm2 \u003d new RecModuleBuilder(ycc1111, title).withType(UE).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        /* same type -\u003e same level -\u003e compare lexicographical order */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(comparator.compare(rm1, rm2) \u003c 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recmodule/RecModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.model.recmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.BD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.model.course.CourseReqType.CORE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoTitle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.testutil.RecModuleBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class RecModuleTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode cs1010 \u003d new ModuleInfoCode(\"CS1010\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoCode cs2103t \u003d new ModuleInfoCode(\"CS2103T\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /* dummy titles */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoTitle title \u003d new ModuleInfoTitle(\"title\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private ModuleInfoTitle title2 \u003d new ModuleInfoTitle(\"title2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void constructor_nullCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecModule(null, title));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule rm1 \u003d new RecModuleBuilder(cs1010, title).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule rm2 \u003d new RecModuleBuilder(cs1010, title).withType(CORE).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule rm3 \u003d new RecModuleBuilder(cs2103t, title).withType(CORE).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule rm4 \u003d new RecModuleBuilder(cs2103t, title).withType(BD).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        RecModule rm5 \u003d new RecModuleBuilder(cs1010, title2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertTrue(rm1.equals(rm1)); // same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(rm1.equals(rm2)); // type present in rm2 but not rm1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(rm2.equals(rm3)); // different code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(rm1.equals(rm5)); // different title"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertFalse(rm3.equals(rm4)); // different type"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedModuleTakenTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedModuleTaken.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonAdaptedModuleTakenTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_SEMESTER \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_EXPECTED_MAX_GRADE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_EXPECTED_MIN_GRADE \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_LECTURE_HOUR \u003d \"f\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_TUTORIAL_HOUR \u003d \"$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_LAB_HOUR \u003d \"2YE\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_PROJECT_HOUR \u003d \"T^\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String INVALID_PREPARATION_HOUR \u003d \"f3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private static final String VALID_NAME \u003d CS2101.getModuleInfoCode().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String VALID_SEMESTER \u003d CS2101.getSemester().name();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String VALID_EXPECTED_MIN_GRADE \u003d CS2101.getExpectedMinGrade().name();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String VALID_EXPECTED_MAX_GRADE \u003d CS2101.getExpectedMaxGrade().name();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final String VALID_LECTURE_HOUR \u003d CS2101.getLectureHour().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String VALID_TUTORIAL_HOUR \u003d CS2101.getTutorialHour().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String VALID_LAB_HOUR \u003d CS2101.getLabHour().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String VALID_PROJECT_HOUR \u003d CS2101.getProjectHour().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private static final String VALID_PREPARATION_HOUR \u003d CS2101.getPreparationHour().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d CS2101.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(CS2101);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(CS2101, person.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new JsonAdaptedModuleTaken(INVALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d ModuleInfoCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new JsonAdaptedModuleTaken(null, VALID_SEMESTER,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleInfoCode.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidSemester_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, INVALID_SEMESTER,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Semester.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullSemester_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                Semester.class.getSimpleName());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidExpectedMinGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        INVALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Grade.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullExpectedMinGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                null, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidExpectedMaxGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, INVALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Grade.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullExpectedMaxGrade_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, null, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidLectureHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, INVALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Hour.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullLectureHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, null, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidTutorialHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, INVALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Hour.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullTutorialHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, null,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidLabHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        INVALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Hour.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullLabHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                null, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidProjectHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, INVALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Hour.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullProjectHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, null, VALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_invalidPreparationHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, INVALID_PREPARATION_HOUR, VALID_TAGS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d Hour.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public void toModelType_nullreparationHour_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                VALID_LAB_HOUR, VALID_PROJECT_HOUR, null, VALID_TAGS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Hour.class.getSimpleName());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonAdaptedModuleTaken person \u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                new JsonAdaptedModuleTaken(VALID_NAME, VALID_SEMESTER,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_EXPECTED_MIN_GRADE, VALID_EXPECTED_MAX_GRADE, VALID_LECTURE_HOUR, VALID_TUTORIAL_HOUR,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        VALID_LAB_HOUR, VALID_PROJECT_HOUR, VALID_PREPARATION_HOUR, invalidTags);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "monikernemo": 32,
      "alexchong711": 137,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonGradTrakStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2030;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2040;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonGradTrakStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonGradTrakStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void readGradTrak_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        readGradTrak(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private java.util.Optional\u003cReadOnlyGradTrak\u003e readGradTrak(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new JsonGradTrakStorage(Paths.get(filePath)).readGradTrak(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(readGradTrak(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        readGradTrak(\"notJsonFormat.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        readGradTrak(\"ivalidModuleTaken.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        readGradTrak(\"invalidAndValidModulesTaken.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak original \u003d getTypicalGradTrak();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonGradTrakStorage jsonAddressBookStorage \u003d new JsonGradTrakStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        jsonAddressBookStorage.saveGradTrak(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ReadOnlyGradTrak readBack \u003d jsonAddressBookStorage.readGradTrak(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(original, new GradTrak(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        original.addModuleTaken(CS2030);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        original.removeModuleTaken(CS2103T);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        jsonAddressBookStorage.saveGradTrak(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readGradTrak(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(original, new GradTrak(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        original.addModuleTaken(CS2040);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        jsonAddressBookStorage.saveGradTrak(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readGradTrak().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(original, new GradTrak(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private void saveAddressBook(ReadOnlyGradTrak addressBook, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            new JsonGradTrakStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    .saveGradTrak(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        saveAddressBook(new GradTrak(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 90,
      "monikernemo": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableGradTrakTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.TypicalModuleTaken;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class JsonSerializableGradTrakTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableGradTrakTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesTaken.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModulesTaken.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModulesTaken.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonSerializableGradTrak dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                JsonSerializableGradTrak.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak typicalPersonsAddressBook \u003d TypicalModuleTaken.getTypicalGradTrak();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonSerializableGradTrak dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                JsonSerializableGradTrak.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonSerializableGradTrak dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                JsonSerializableGradTrak.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        thrown.expectMessage(JsonSerializableGradTrak.MESSAGE_DUPLICATE_MODULES_TAKEN);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "monikernemo": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        userPrefs.setGradTrakFilePath(Paths.get(\"gradtrak.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "monikernemo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.getTypicalGradTrak;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonGradTrakStorage addressBookStorage \u003d new JsonGradTrakStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "         * {@link JsonGradTrakStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonGradTrakStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak original \u003d getTypicalGradTrak();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        storageManager.saveGradTrak(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ReadOnlyGradTrak retrieved \u003d storageManager.readGradTrak().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(original, new GradTrak(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertNotNull(storageManager.getGradTrakFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "monikernemo": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConditionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Condition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A utility class to help build Condition objects"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ConditionBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final int DEFAULT_MIN_TO_SATISFY \u003d 5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Pattern DEFAULT_PATTERN \u003d Pattern.compile(\"GEH1[0-9]{3}[A-Z]?\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private int minToSatisfy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Pattern pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ConditionBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minToSatisfy \u003d DEFAULT_MIN_TO_SATISFY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d DEFAULT_PATTERN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Initializes the ModuleTakenBuilder with the data of {@code moduleTakenToCopy}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ConditionBuilder(Condition condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minToSatisfy \u003d condition.getMinToSatisfy();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d condition.getPattern();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Sets the minToSatisfy of the condition to given minToSatisfy"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ConditionBuilder withMin(int minToSatisfy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.minToSatisfy \u003d minToSatisfy;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Sets the pattern of condition to given String"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ConditionBuilder withPattern(String pattern) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d Pattern.compile(pattern);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Sets the pattern of condition to given Pattern"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ConditionBuilder withPattern(Pattern pattern) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.pattern \u003d pattern;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public Condition build() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new Condition(minToSatisfy, pattern.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 59,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditModuleTakenDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleTakenDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * A utility class to help with building EditModuleTakenDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class EditModuleTakenDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private EditCommand.EditModuleTakenDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditModuleTakenDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder(EditModuleTakenDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.descriptor \u003d new EditModuleTakenDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns an {@code EditModuleTakenDescriptor} with fields containing {@code moduleTaken}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditModuleTakenDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setModuleInfoCode(moduleTaken.getModuleInfoCode());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setSemester(moduleTaken.getSemester());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setExpectedMinGrade(moduleTaken.getExpectedMinGrade());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setExpectedMaxGrade(moduleTaken.getExpectedMaxGrade());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setLectureHour(moduleTaken.getLectureHour());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setTags(moduleTaken.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Name} of the {@code EditModuleTakenDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setModuleInfoCode(new ModuleInfoCode(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Semester} of the {@code EditModuleTakenDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setSemester(Semester.valueOf(semester));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Grade} of the {@code EditModuleTakenDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder withExpectedMinGrade(String expectedMinGrade) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setExpectedMinGrade(Grade.valueOf(expectedMinGrade));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Grade} of the {@code EditModuleTakenDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder withExpectedMaxGrade(String expectedMaxGrade) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setExpectedMaxGrade(Grade.valueOf(expectedMaxGrade));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditModuleTakenDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder withLectureHour(String lectureHour) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setLectureHour(new Hour(lectureHour));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditModuleTakenDescriptor}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditModuleTakenDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditCommand.EditModuleTakenDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditSemLimitDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetSemLimitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.SetSemLimitCommand.EditSemLimitDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * A utility class to help with building EditModuleTakenDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class EditSemLimitDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private EditSemLimitDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new SetSemLimitCommand.EditSemLimitDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder(EditSemLimitDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.descriptor \u003d new EditSemLimitDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns an {@code EditModuleTakenDescriptor} with fields containing {@code moduleTaken}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder(SemLimit semLimit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor \u003d new EditSemLimitDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinCap(semLimit.getMinCap());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxCap(semLimit.getMaxCap());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinLectureHour(semLimit.getMinLectureHour());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxLectureHour(semLimit.getMaxLectureHour());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinTutorialHour(semLimit.getMinTutorialHour());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxTutorialHour(semLimit.getMaxTutorialHour());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinLabHour(semLimit.getMinLabHour());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxLabHour(semLimit.getMaxLabHour());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinProjectHour(semLimit.getMinProjectHour());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxProjectHour(semLimit.getMaxProjectHour());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinPreparationHour(semLimit.getMinPreparationHour());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxPreparationHour(semLimit.getMaxPreparationHour());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code CapAverage} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMinCap(String cap) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinCap(new CapAverage(Double.valueOf(cap)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code CapAverage} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMaxCap(String cap) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxCap(new CapAverage(Double.valueOf(cap)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMinLectureHour(String hour) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinLectureHour(new Hour(hour));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMaxLectureHour(String hour) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxLectureHour(new Hour(hour));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMinTutorialHour(String hour) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinTutorialHour(new Hour(hour));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMaxTutorialHour(String hour) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxTutorialHour(new Hour(hour));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMinLabHour(String hour) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinLabHour(new Hour(hour));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMaxLabHour(String hour) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxLabHour(new Hour(hour));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMinProjectHour(String hour) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinProjectHour(new Hour(hour));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMaxProjectHour(String hour) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxProjectHour(new Hour(hour));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMinPreparationHour(String hour) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMinPreparationHour(new Hour(hour));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code EditSemesterLimitDescriptor} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptorBuilder withMaxPreparationHour(String hour) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        descriptor.setMaxPreparationHour(new Hour(hour));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public EditSemLimitDescriptor build() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FindModuleDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * A utility class to help with building FindModuleDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class FindModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private FindModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModuleDescriptorBuilder(FindModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        this.descriptor \u003d new FindModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns an {@code FindModuleDescriptor} with fields containing some of {@code module}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public FindModuleDescriptorBuilder(ModuleTaken module) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor \u003d new FindModuleDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setSubCode(module.getModuleInfoCode().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setSemester(module.getSemester());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setGrade(module.getExpectedMinGrade());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setFinished(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Sets the {@code subCode} of the {@code FindModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModuleDescriptorBuilder withCode(String subCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setSubCode(subCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Sets the {@code semester} of the {@code FindModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModuleDescriptorBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setSemester(Semester.valueOf(semester));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Sets the {@code grade} of the {@code FindModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModuleDescriptorBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setGrade(Grade.valueOf(grade));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Sets the {@code isFinished} of the {@code FindModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModuleDescriptorBuilder withFinishedStatus(String finishedStatus) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.setFinished(ParserUtil.parseFinishedStatus(finishedStatus));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public FindModuleDescriptor build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 4,
      "lshwayne96": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/GradTrakBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " *     {@code GradTrak ab \u003d new GradTrakBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class GradTrakBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private GradTrak addressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public GradTrakBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook \u003d new GradTrak();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public GradTrakBuilder(GradTrak addressBook) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Adds a new {@code ModuleTaken} to the {@code GradTrak} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public GradTrakBuilder withPerson(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        addressBook.addModuleTaken(moduleTaken);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Sets the currentSemester to the given Semester."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public GradTrakBuilder withCurrentSemester(Semester currentSemester) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        addressBook.setCurrentSemester(currentSemester);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public GradTrak build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 34,
      "lshwayne96": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModuleTakenBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Grade;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Workload;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A utility class to help with building ModuleTaken objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ModuleTakenBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DEFAULT_MODULE_INFO_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DEFAULT_SEMESTER \u003d \"Y4S2\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DEFAULT_EXPECTED_MIN_GRADE \u003d \"F\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DEFAULT_EXPECTED_MAX_GRADE \u003d \"A_PLUS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String DEFAULT_LECTURE_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_TUTORIAL_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_LAB_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_PROJECT_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_PREPARATION_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private ModuleInfoCode moduleInfoCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Grade expectedMinGrade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Grade expectedMaxGrade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Hour lectureHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour tutorialHour;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour labHour;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour projectHour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour preparationHour;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        moduleInfoCode \u003d new ModuleInfoCode(DEFAULT_MODULE_INFO_CODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        semester \u003d Semester.valueOf(DEFAULT_SEMESTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedMinGrade \u003d Grade.valueOf(DEFAULT_EXPECTED_MIN_GRADE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedMaxGrade \u003d Grade.valueOf(DEFAULT_EXPECTED_MAX_GRADE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        lectureHour \u003d new Hour(DEFAULT_LECTURE_HOUR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        tutorialHour \u003d new Hour(DEFAULT_TUTORIAL_HOUR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        labHour \u003d new Hour(DEFAULT_LAB_HOUR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        projectHour \u003d new Hour(DEFAULT_PROJECT_HOUR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        preparationHour \u003d new Hour(DEFAULT_PREPARATION_HOUR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Initializes the ModuleTakenBuilder with the data of {@code moduleTakenToCopy}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder(ModuleTaken moduleTakenToCopy) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        moduleInfoCode \u003d moduleTakenToCopy.getModuleInfoCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        semester \u003d moduleTakenToCopy.getSemester();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedMinGrade \u003d moduleTakenToCopy.getExpectedMinGrade();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        expectedMaxGrade \u003d moduleTakenToCopy.getExpectedMaxGrade();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        lectureHour \u003d moduleTakenToCopy.getLectureHour();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        tutorialHour \u003d moduleTakenToCopy.getTutorialHour();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        labHour \u003d moduleTakenToCopy.getLabHour();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        projectHour \u003d moduleTakenToCopy.getProjectHour();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        preparationHour \u003d moduleTakenToCopy.getPreparationHour();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(moduleTakenToCopy.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Name} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder withModuleInfoCode(String moduleInfoCode) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.moduleInfoCode \u003d new ModuleInfoCode(moduleInfoCode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Grade} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder withExpectedMaxGrade(String expectedMaxGrade) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.expectedMaxGrade \u003d Grade.valueOf(expectedMaxGrade);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Semester} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.semester \u003d Semester.valueOf(semester);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Grade} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder withExpectedMinGrade(String expectedMinGrade) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.expectedMinGrade \u003d Grade.valueOf(expectedMinGrade);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTakenBuilder withLectureHour(String lectureHour) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        this.lectureHour \u003d new Hour(lectureHour);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ModuleTakenBuilder withTutorialHour(String tutorialHour) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.tutorialHour \u003d new Hour(tutorialHour);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ModuleTakenBuilder withLabHour(String labHour) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.labHour \u003d new Hour(labHour);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ModuleTakenBuilder withProjectHour(String projectHour) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.projectHour \u003d new Hour(projectHour);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code Hour} of the {@code ModuleTaken} being built."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public ModuleTakenBuilder withPreparationHour(String preparationHour) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.preparationHour \u003d new Hour(preparationHour);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Builds a module taken with all the fields in the {@code ModuleTakenBuilder}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public ModuleTaken build() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new ModuleTaken(moduleInfoCode, semester, expectedMinGrade, expectedMaxGrade,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                new Workload(lectureHour, tutorialHour, labHour, projectHour, preparationHour), tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 97,
      "alexchong711": 60,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MAX_GRADE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPECTED_MIN_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINISHED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LECTURE_HOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditModuleTakenDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.commands.FindCommand.FindModuleDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A utility class for ModuleTaken."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an add command string for adding the {@code moduleTaken}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static String getAddCommand(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(moduleTaken);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the part of command string for the given {@code moduleTaken}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static String getPersonDetails(ModuleTaken moduleTaken) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        sb.append(PREFIX_MODULE_INFO_CODE + moduleTaken.getModuleInfoCode().toString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        sb.append(PREFIX_SEMESTER + moduleTaken.getSemester().toString() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        sb.append(PREFIX_EXPECTED_MIN_GRADE + moduleTaken.getExpectedMinGrade().name() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        sb.append(PREFIX_EXPECTED_MAX_GRADE + moduleTaken.getExpectedMaxGrade().name() + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        moduleTaken.getTags().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleTakenDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditModuleTakenDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        descriptor.getModuleInfoCode().ifPresent(infoCode -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                sb.append(PREFIX_MODULE_INFO_CODE).append(infoCode.toString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        descriptor.getSemester().ifPresent(semester -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                sb.append(PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        .append(semester.name())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        descriptor.getExpectedMinGrade().ifPresent(expectedMinGrade -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                sb.append(PREFIX_EXPECTED_MIN_GRADE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        .append(expectedMinGrade.name())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        descriptor.getExpectedMaxGrade().ifPresent(expectedMaxGrade -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                sb.append(PREFIX_EXPECTED_MAX_GRADE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                        .append(expectedMaxGrade.name())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.getLectureHour().ifPresent(lectureHour -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                sb.append(PREFIX_LECTURE_HOUR)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(lectureHour.toString())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Returns the part of command string for the given {@code FindModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static String getFindModuleDescriptorDetails(FindModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        descriptor.getSubCode().ifPresent(code -\u003e sb.append(PREFIX_MODULE_INFO_CODE).append(code).append(\" \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.getSemester().ifPresent(semester -\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                sb.append(PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(semester.name())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.getGrade().ifPresent(grade -\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                sb.append(PREFIX_GRADE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(grade.name())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        descriptor.isFinished().ifPresent(isFinished -\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                sb.append(PREFIX_FINISHED)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(ParserUtil.booleanToFinishedStatus(isFinished))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                        .append(\" \"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "monikernemo": 24,
      "alexchong711": 9,
      "lshwayne96": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecModuleBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.course.CourseReqType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduleinfo.ModuleInfoTitle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.recmodule.RecModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " * A utility class to help with building RecModule objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "public class RecModuleBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    private RecModule recModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public RecModuleBuilder(ModuleInfoCode code, ModuleInfoTitle title) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        recModule \u003d new RecModule(code, title);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * Sets the given {@code courseReqType} of {@code RecModule}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @param type The {@code courseReqType}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * @return This {@code RecModuleBuilder}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public RecModuleBuilder withType(CourseReqType type) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        recModule.setCourseReqType(type);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public RecModule build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return recModule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lshwayne96": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SemLimitBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * A utility class to help with building ModuleTaken objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class SemLimitBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final double DEFAULT_MIN_CAP \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final double DEFAULT_MAX_CAP \u003d 4;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MIN_LECTURE_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MAX_LECTURE_HOUR \u003d \"10\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MIN_TUTORIAL_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MAX_TUTORIAL_HOUR \u003d \"10\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MIN_LAB_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MAX_LAB_HOUR \u003d \"10\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MIN_PROJECT_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MAX_PROJECT_HOUR \u003d \"10\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MIN_PREPARATION_HOUR \u003d \"0\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_MAX_PREPARATION_HOUR \u003d \"10\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private CapAverage minCap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private CapAverage maxCap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour minLectureHour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour maxLectureHour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour minTutorialHour;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour maxTutorialHour;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour minLabHour;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour maxLabHour;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour minProjectHour;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour maxProjectHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour minPreparationHour;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour maxPreparationHour;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minCap \u003d new CapAverage(DEFAULT_MIN_CAP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxCap \u003d new CapAverage(DEFAULT_MAX_CAP);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minLectureHour \u003d new Hour(DEFAULT_MIN_LECTURE_HOUR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxLectureHour \u003d new Hour(DEFAULT_MAX_LECTURE_HOUR);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minTutorialHour \u003d new Hour(DEFAULT_MIN_TUTORIAL_HOUR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxTutorialHour \u003d new Hour(DEFAULT_MAX_TUTORIAL_HOUR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minLabHour \u003d new Hour(DEFAULT_MIN_LAB_HOUR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxLabHour \u003d new Hour(DEFAULT_MAX_LAB_HOUR);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minProjectHour \u003d new Hour(DEFAULT_MIN_PROJECT_HOUR);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxProjectHour \u003d new Hour(DEFAULT_MAX_PROJECT_HOUR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minPreparationHour \u003d new Hour(DEFAULT_MIN_PREPARATION_HOUR);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxPreparationHour \u003d new Hour(DEFAULT_MAX_PREPARATION_HOUR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Initializes the SemLimitBuilder with the data of {@code semLimitToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder(SemLimit semLimitToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minCap \u003d semLimitToCopy.getMinCap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxCap \u003d semLimitToCopy.getMaxCap();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minLectureHour \u003d semLimitToCopy.getMinLectureHour();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxLectureHour \u003d semLimitToCopy.getMaxLectureHour();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minTutorialHour \u003d semLimitToCopy.getMinTutorialHour();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxTutorialHour \u003d semLimitToCopy.getMaxTutorialHour();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minLabHour \u003d semLimitToCopy.getMinLabHour();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxLabHour \u003d semLimitToCopy.getMaxLabHour();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minProjectHour \u003d semLimitToCopy.getMinProjectHour();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxProjectHour \u003d semLimitToCopy.getMaxProjectHour();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        minPreparationHour \u003d semLimitToCopy.getMinPreparationHour();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        maxPreparationHour \u003d semLimitToCopy.getMaxPreparationHour();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code minCap} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMinCap(double minCap) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minCap \u003d new CapAverage(minCap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code maxCap} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMaxCap(double maxCap) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxCap \u003d new CapAverage(maxCap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code minLectureHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMinLectureHour(String minLectureHour) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minLectureHour \u003d new Hour(minLectureHour);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code maxLectureHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMaxLectureHour(String maxLectureHour) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxLectureHour \u003d new Hour(maxLectureHour);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code minTutorialHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMinTutorialHour(String minTutorialHour) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minTutorialHour \u003d new Hour(minTutorialHour);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code maxTutorialHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMaxTutorialHour(String maxTutorialHour) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxTutorialHour \u003d new Hour(maxTutorialHour);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code minLabHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMinLabHour(String minLabHour) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minLabHour \u003d new Hour(minLabHour);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code maxLabHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMaxLabHour(String maxLabHour) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxLabHour \u003d new Hour(maxLabHour);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code minProjectHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMinProjectHour(String minProjectHour) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minProjectHour \u003d new Hour(minProjectHour);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code maxProjectHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMaxProjectHour(String maxProjectHour) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxProjectHour \u003d new Hour(maxProjectHour);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code minPreparationHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMinPreparationHour(String minPreparationHour) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.minPreparationHour \u003d new Hour(minPreparationHour);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code maxPreparationHour} of the {@code SemLimit} being built."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimitBuilder withMaxPreparationHour(String maxPreparationHour) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.maxPreparationHour \u003d new Hour(maxPreparationHour);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Builds a semester limit with all the fields in the {@code SemLimitBuilder}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public SemLimit build() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new SemLimit(minCap, maxCap, minLectureHour, maxLectureHour, minTutorialHour, maxTutorialHour,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "                minLabHour, maxLabHour, minProjectHour, maxProjectHour, minPreparationHour, maxPreparationHour);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexchong711": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the middle index of the moduleTaken in the {@code model}\u0027s moduleTaken list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModulesTakenList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the last index of the moduleTaken in the {@code model}\u0027s moduleTaken list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModulesTakenList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns the moduleTaken in the {@code model}\u0027s moduleTaken list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static ModuleTaken getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return model.getFilteredModulesTakenList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "monikernemo": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCondition.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.course.Condition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A utility class containing a list of {@code Condition} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class TypicalCondition {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Condition GEH \u003d new ConditionBuilder().build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 10,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Semester INDEX_FIRST_SEMESTER \u003d Semester.Y1S1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Semester INDEX_SECOND_SEMESTER \u003d Semester.Y1S2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final Semester INDEX_THIRD_SEMESTER \u003d Semester.Y2S1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "alexchong711": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModuleTaken.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS1010;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MAX_GRADE_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS1010;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPECTED_MIN_GRADE_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LECTURE_HOUR_CS1010;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LECTURE_HOUR_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS1010;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MODULE_INFO_CODE_CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS1010;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SEMESTER_CS2103T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.SemLimit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.CapAverage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.model.moduletaken.Semester;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A utility class containing a list of {@code ModuleTaken} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class TypicalModuleTaken {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken CS2103T \u003d new ModuleTakenBuilder().withModuleInfoCode(\"CS2103T\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"F\").withExpectedMaxGrade(\"A\").withLectureHour(\"0\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y1S2\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken CS2101 \u003d new ModuleTakenBuilder().withModuleInfoCode(\"CS2101\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"D\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withExpectedMaxGrade(\"A\").withLectureHour(\"0\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\").withSemester(\"Y3S2\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken CS1010S \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(\"CS1010S\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y5S2\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"D\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(\"A\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLectureHour(\"0\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken CS1010X \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(\"CS1010X\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y4S2\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"F\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(\"A\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withLectureHour(\"0\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken MA1521 \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(\"MA1521\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y3S1\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"C\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(\"A\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLectureHour(\"0\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken LSM1301 \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(\"LSM1301\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y4S2\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"D\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(\"A\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLectureHour(\"0\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken GER1000 \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(\"GER1000\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y4S1\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"C\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(\"B\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLectureHour(\"0\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\").build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken CS2030 \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(\"CS2030\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y1S1\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"B\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(\"A\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLectureHour(\"0\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withTutorialHour(\"0\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withLabHour(\"0\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withProjectHour(\"0\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            .withPreparationHour(\"0\").build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken CS2040 \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(\"CS2040\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(\"Y3S2\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(\"D\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(\"A\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withLectureHour(\"0\").build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y1S1 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y1S2 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y2S1 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y2S2 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y3S1 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y3S2 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y4S1 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y4S2 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y5S1 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final SemLimit Y5S2 \u003d new SemLimit(new CapAverage(1), new CapAverage(5), new Hour(\"4\"),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"8\"), new Hour(\"2\"), new Hour(\"5\"), new Hour(\"2\"), new Hour(\"5\"),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"2\"), new Hour(\"5\"), new Hour(\"6\"), new Hour(\"10\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    // Manually added - ModuleTaken\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken DEFAULT_MODULE_CS2103T \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS2103T)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(VALID_SEMESTER_CS2103T)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS2103T)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS2103T)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withLectureHour(VALID_LECTURE_HOUR_CS2103T)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final ModuleTaken DEFAULT_MODULE_CS1010 \u003d new ModuleTakenBuilder()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withModuleInfoCode(VALID_MODULE_INFO_CODE_CS1010)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withSemester(VALID_SEMESTER_CS1010)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMinGrade(VALID_EXPECTED_MIN_GRADE_CS1010)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withExpectedMaxGrade(VALID_EXPECTED_MAX_GRADE_CS1010)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withLectureHour(VALID_LECTURE_HOUR_CS1010)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String KEYWORD_MATCHING_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static final String KEYWORD_MATCHING_MA1521 \u003d \"MA1521\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String KEYWORD_MATCHING_CS \u003d \"cs\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String KEYWORD_MATCHING_MA \u003d \"ma\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final String KEYWORD_MATCHING_GE \u003d \"ge\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private TypicalModuleTaken() {} // prevents instantiation"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns an {@code GradTrak} with all the typical persons."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static GradTrak getTypicalGradTrak() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        GradTrak gt \u003d new GradTrak();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (ModuleTaken moduleTaken : getTypicalModulesTaken()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            gt.addModuleTaken(moduleTaken);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        List\u003cSemLimit\u003e semList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        for (SemLimit semLimit : getTypicalSemesterLimits()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            semList.add(semLimit);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        gt.setSemesterLimits(semList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        gt.setCurrentSemester(Semester.Y1S1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return gt;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static List\u003cModuleTaken\u003e getTypicalModulesTaken() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, CS2101, CS1010S, CS1010X, MA1521, LSM1301, GER1000));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static List\u003cSemLimit\u003e getTypicalSemesterLimits() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(Y1S1, Y1S2, Y2S1, Y2S2, Y3S1, Y3S2, Y4S1, Y4S2, Y5S1, Y5S2));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 110,
      "alexchong711": 82,
      "lshwayne96": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalWorkloads.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Workload;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * A class that stores some examples of Typical Modules"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class TypicalWorkloads {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Workload CS1010_WORKLOAD \u003d new Workload(new Hour(\"1\"), new Hour(\"3\"), new Hour(\"1\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"1\"), new Hour(\"2\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Workload CS2030_WORKLOAD \u003d new Workload(new Hour(\"2\"), new Hour(\"3\"), new Hour(\"4\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"5\"), new Hour(\"6\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Workload CS2040_WORKLOAD \u003d new Workload(new Hour(\"1\"), new Hour(\"1\"), new Hour(\"1\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"1\"), new Hour(\"1\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Workload CS2040C_WORKLOAD \u003d new Workload(new Hour(\"2\"), new Hour(\"1\"), new Hour(\"1\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"1\"), new Hour(\"1\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Workload CS2103T_WORKLOAD \u003d new Workload(new Hour(\"2\"), new Hour(\"5\"), new Hour(\"1\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"1\"), new Hour(\"1\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Workload MA1512_WORKLOAD \u003d new Workload(new Hour(\"1\"), new Hour(\"3\"), new Hour(\"1\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"1\"), new Hour(\"1\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public static final Workload LSM1301_WORKLOAD \u003d new Workload(new Hour(\"1\"), new Hour(\"1\"), new Hour(\"2\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "            new Hour(\"1\"), new Hour(\"8\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private TypicalWorkloads() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static LinkedList\u003cWorkload\u003e getTypicalWorkloads() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        return new LinkedList\u003c\u003e(Arrays.asList(CS2030_WORKLOAD, CS2040_WORKLOAD, CS2040C_WORKLOAD,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                CS2103T_WORKLOAD, MA1512_WORKLOAD, LSM1301_WORKLOAD));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 2,
      "alexchong711": 31,
      "lshwayne96": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WorkloadBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Hour;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.Workload;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " * Helper class to build modules for testing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexchong711"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "public class WorkloadBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_LECTUREHOURS \u003d \"0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_TUTORIALHOURS \u003d \"0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_LABHOURS \u003d \"0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_PROJECTHOURS \u003d \"0\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public static final String DEFAULT_PREPARATIONHOURS \u003d \"0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour lectureHour;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour tutorialHour;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour labHour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour projectHour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    private Hour preparationHour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WorkloadBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        lectureHour \u003d new Hour(DEFAULT_LECTUREHOURS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        tutorialHour \u003d new Hour(DEFAULT_TUTORIALHOURS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        labHour \u003d new Hour(DEFAULT_LABHOURS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        projectHour \u003d new Hour(DEFAULT_PROJECTHOURS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        preparationHour \u003d new Hour(DEFAULT_PREPARATIONHOURS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Initializes the WorkloadBuilder with the data of {@code workloadToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WorkloadBuilder(Workload workloadToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        lectureHour \u003d workloadToCopy.getLectureHour();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        tutorialHour \u003d workloadToCopy.getTutorialHour();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        labHour \u003d workloadToCopy.getLabHour();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        projectHour \u003d workloadToCopy.getProjectHour();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        preparationHour \u003d workloadToCopy.getPreparationHour();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code lectureHour} of the {@code Hour} that we are building"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WorkloadBuilder withLectureHour(String lectureHour) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.lectureHour \u003d new Hour(lectureHour);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code tutorialHour} of the {@code Hour} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WorkloadBuilder withTutorialHour(String tutorialHour) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.tutorialHour \u003d new Hour(tutorialHour);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code labHour} of the {@code Hour} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WorkloadBuilder withLabHour(String labHour) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.labHour \u003d new Hour(labHour);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code projectHour} of the {@code Hour} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WorkloadBuilder withProjectHour(String projectHour) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.projectHour \u003d new Hour(projectHour);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     * Sets the {@code preparationHour} of the {@code Hour} that we are building"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public WorkloadBuilder withPreparationHour(String preparationHour) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        this.preparationHour \u003d new Hour(preparationHour);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexchong711"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    public Workload build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        return new Workload(lectureHour, tutorialHour, labHour, projectHour, preparationHour);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 2,
      "alexchong711": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A GUI unit test class for GradTrak."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "monikernemo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.JsonGradTrakStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.storage.UserInfoStorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        JsonGradTrakStorage jsonAddressBookStorage \u003d new JsonGradTrakStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonAddressBookStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                    new UserInfoStorageManager()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "monikernemo": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ModuleTakenCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.ModuleTakenBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class ModuleTakenCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenWithNoTags \u003d new ModuleTakenBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(moduleTakenWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertCardDisplay(personCard, moduleTakenWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTakenWithTags \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        personCard \u003d new PersonCard(moduleTakenWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertCardDisplay(personCard, moduleTakenWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken moduleTaken \u003d new ModuleTakenBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(moduleTaken, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same moduleTaken, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        PersonCard copy \u003d new PersonCard(moduleTaken, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // different moduleTaken, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        ModuleTaken differentModuleTaken \u003d new ModuleTakenBuilder().withModuleInfoCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentModuleTaken, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // same moduleTaken, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(moduleTaken, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedModuleTaken} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, ModuleTaken expectedModuleTaken, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        // verify moduleTaken details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertCardDisplaysPerson(expectedModuleTaken, personCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monikernemo": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private final GradTrak addressBook \u003d new GradTrak();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, addressBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        guiRobot.interact(() -\u003e addressBook.addModuleTaken(CS2103T));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "monikernemo": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedCard.getExpectedMaxGrade(), actualCard.getExpectedMaxGrade());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedCard.getExpectedMinGrade(), actualCard.getExpectedMinGrade());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedCard.getModuleInfoCode(), actualCard.getModuleInfoCode());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexchong711"
        },
        "content": "        assertEquals(expectedCard.getSemester(), actualCard.getSemester());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedModuleTaken}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static void assertCardDisplaysPerson(ModuleTaken expectedModuleTaken, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertEquals(expectedModuleTaken.getModuleInfoCode().toString(), actualCard.getModuleInfoCode());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedModuleTaken.getSemester().toString(), actualCard.getSemester());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedModuleTaken.getExpectedMinGrade().toString(), actualCard.getExpectedMinGrade());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedModuleTaken.getExpectedMaxGrade().toString(), actualCard.getExpectedMaxGrade());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(expectedModuleTaken.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code moduleTakens} correctly and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ModuleTaken... moduleTakens) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleTakens.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "            assertCardDisplaysPerson(moduleTakens[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code moduleTakens} correctly and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cModuleTaken\u003e moduleTakens) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertListMatching(personListPanelHandle, moduleTakens.toArray(new ModuleTaken[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "monikernemo": 15,
      "alexchong711": 3,
      "lshwayne96": 1
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MODULETAKEN_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FINISHED_STATUS_FALSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FINISHED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monikernemo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS1010S;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS1010X;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2101;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.CS2103T;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.GER1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.KEYWORD_MATCHING_CS2103T;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.LSM1301;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import static seedu.address.testutil.TypicalModuleTaken.MA1521;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public class FindCommandSystemTest extends GradTrakSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    /* Default current semester is Y1S1 */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void find_codeOnly() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // Case: find moduleTaken in GradTrak by code, command with leading spaces and trailing spaces -\u003e 1 found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                + PREFIX_MODULE_INFO_CODE + KEYWORD_MATCHING_CS2103T + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CS2103T);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // Case: repeat previous find command -\u003e 1 found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_MODULE_INFO_CODE + KEYWORD_MATCHING_CS2103T;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        // Case: find non-existing ModuleInfoCode in GradTrak -\u003e 0 found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_MODULE_INFO_CODE + \"abcdefg\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void find_semesterOnly() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_SEMESTER + \"Y4S2\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CS1010X, LSM1301);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void find_gradeOnly() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_GRADE + \"A\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CS2103T, CS2101, CS1010S, CS1010X, MA1521, LSM1301);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void find_finishedStatusOnly() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FINISHED + FINISHED_STATUS_FALSE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CS2103T, CS2101, CS1010S, CS1010X, MA1521, LSM1301, GER1000);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void find_multipleParameters() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_MODULE_INFO_CODE + \"CS \" + PREFIX_SEMESTER + \"Y3S2 \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                + PREFIX_GRADE + \"A \" + PREFIX_FINISHED + FINISHED_STATUS_FALSE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CS2101);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "    public void find_emptyArgs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        String command \u003d FindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lshwayne96"
        },
        "content": "     * box displays {@code Messages#MESSAGE_MODULETAKEN_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code GradTrakSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @see GradTrakSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                MESSAGE_MODULETAKEN_LISTED_OVERVIEW, expectedModel.getFilteredModulesTakenList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code GradTrakSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * @see GradTrakSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "monikernemo": 13,
      "lshwayne96": 51
    }
  },
  {
    "path": "src/test/java/systemtests/GradTrakSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_INFO_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.GradTrak;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.testutil.TypicalModuleTaken;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monikernemo"
        },
        "content": " * A system test class for GradTrak, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "public abstract class GradTrakSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    protected GradTrak getInitialData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        return TypicalModuleTaken.getTypicalGradTrak();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(getModel().getGradTrak().getModulesTakenList().size(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                getModel().getFilteredModulesTakenList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_MODULE_INFO_CODE + keyword);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertTrue(getModel().getFilteredModulesTakenList().size()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "                \u003c getModel().getGradTrak().getModulesTakenList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Selects the moduleTaken at {@code index} of the displayed list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(0, getModel().getGradTrak().getModulesTakenList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same moduleTaken objects as {@code expectedModel}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * and the moduleTaken list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertEquals(new GradTrak(expectedModel.getGradTrak()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the moduleTaken in the"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * moduleTaken list panel at {@code expectedSelectedCardIndex},"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getModuleInfoCode();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the moduleTaken list panel remain unchanged."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredModulesTakenList());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 267,
      "monikernemo": 24
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.moduletaken.ModuleTaken;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static final Predicate\u003cModuleTaken\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cModuleTaken\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        Optional\u003cPredicate\u003cModuleTaken\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "        model.updateFilteredModulesTakenList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public static void setFilteredList(Model model, ModuleTaken... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code ModuleTaken} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    private static Predicate\u003cModuleTaken\u003e getPredicateMatching(ModuleTaken other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return person -\u003e person.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "monikernemo": 8
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "import seedu.address.model.ReadOnlyGradTrak;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monikernemo"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyGradTrak\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "monikernemo": 2
    }
  }
]
