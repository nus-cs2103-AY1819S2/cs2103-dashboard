[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d In-Credit-ble"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W17-3/main[image:https://travis-ci.org/CS2103-AY1819S2-W17-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://app.netlify.com/sites/increditble/deploys[image:https://api.netlify.com/api/v1/badges/d34bd9d2-f71e-47d5-ae0d-b4a0a68773a4/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W17-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W17-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\"Where did all the money in my wallet go!\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Is the above statement something that you asked yourself on a daily basis? Do you have so many micro-transactions that you lose track of all your expenditure? _In-Credit-Ble_ is here to help you out!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "_In-Credit-Ble_\u0027s key features:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* Intuitive and easy to use user interface allowing you to add new records fast."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* Easily record the transaction to track where all your transactions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "* Overall view of on your financial transaction through aster plot chart which shows how much of your budget you have spent."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "Sold yet? Find out more through the \u003c\u003cUserGuide#, User Guide\u003e\u003e!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "_In-CreditBle_ is an open source project that welcomes contribution from the community! If you would like to make any changes, head over to the \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e to get started"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* This application was inspired by AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 5,
      "JeremyLoye": 3,
      "-": 24,
      "eugeneyl": 10
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"githubId\": \"eugeneyl\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"displayName\": \"YONG LE EUGENE\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"authorNames\": [\"eugeneyl\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"githubId\": \"Jackimaru96\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"displayName\": \"JACK CHEN YU JIE\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"authorNames\": [\"Jackimaru96\", \"Jack Chen Yu Jie\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"githubId\": \"JeremyLoye\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"displayName\": \"LOYE HEAN WEI JEREMY\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"authorNames\": [\"JeremyLoye\", \"Jeremy Loye\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"githubId\": \"kjiaxuan\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"displayName\": \"KOK JIA XUAN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"authorNames\": [\"kjiaxuan\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"githubId\": \"geezlouisee\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"displayName\": \"LOUISE LEE HUI LING\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \"authorNames\": [\"geezlouisee\", \"Louise Lee\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "mainClassName \u003d \u0027seedu.finance.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            test.include \u0027seedu/finance/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            test.include \u0027seedu/finance/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            test.exclude \u0027seedu/finance/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 233,
      "kjiaxuan": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "In-credit-ble is currently being developed by https://github.com/orgs/cs2103-ay1819s2-w17-3/people[W17-3] team for the CS2103 Software Engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d Jeremy Loye"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::jeremyloye.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "{empty}[https://github.com/JeremyLoye[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "{empty}[https://cs2103-ay1819s2-w17-3.github.io/main/team/JeremyLoye.html[portfolio]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Role: Team Lead, Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Responsibilities: Code Quality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d Louise Lee"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::geezlouisee.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "{empty}[http://github.com/geezlouisee[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "{empty}[https://cs2103-ay1819s2-w17-3.github.io/main/team/geezlouisee.html[portfolio]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Responsibilities: Deliverables and Deadlines, Integration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d Eugene Yong"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::eugeneyl.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "{empty}[http://github.com/eugeneyl[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "{empty}[https://cs2103-ay1819s2-w17-3.github.io/main/team/eugeneyl.html[portfolio]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d Jia Xuan"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::kjiaxuan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "{empty}[http://github.com/kjiaxuan[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "{empty}[https://cs2103-ay1819s2-w17-3.github.io/main/team/kjiaxuan.html[portfolio]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Responsibilities: Scheduling and Tracking"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d Jack Chen"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::jackimaru96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "{empty}[http://github.com/Jackimaru96[github]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "{empty}[https://cs2103-ay1819s2-w17-3.github.io/main/team/jackimaru96.html[portfolio]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 5,
      "JeremyLoye": 18,
      "-": 31,
      "kjiaxuan": 7
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-w17-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Email us* : You can also reach us at `e0175912 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d In-Credit-Ble - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W17-3/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "By: `Team W17-3`      Since: `March 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Welcome to the _In-Credit-Ble_ Developer Guide!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "_In-Credit-Ble_ is a finance tracker application created to simplify the managing and tracking"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "of the user’s personal finances. With _In-Credit-Ble_, users will be able to stick to their budget"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "and be more aware of their spending habits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This developer guide specifies the design and implementation of _In-Credit-Ble_. The intended audience of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "this document is the developers, designers and software testers of our application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Please continue on to the \u003c\u003cSetting Up, Setting Up\u003e\u003e section to get started. You can also read \u003c\u003cAboutUs#, AboutUs.adoc\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "and \u003c\u003cContactUs#, ContactUs.adoc\u003e\u003e for more information on how to contact us!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Do not disable them. If you have disabled them, go to menu:File[Settings \u003e Plugins] to re-enable them."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click menu:File[Close Project] to close the existing project dialog first)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".. Click menu:Configure[Project Defaults \u003e Project Structure]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".. Click btn:[New...] and find the directory of the JDK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Click btn:[Import Project]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Locate the `build.gradle` file and select it. Click btn:[OK]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Click btn:[Open as Project]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Click btn:[OK] to accept the default settings"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/finance/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select btn:[Add \u0027--add-modules\u003d...\u0027 to module compiler options] for each error"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/finance/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Run `seedu.finance.MainApp` and try a few commands"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Go to menu:File[Settings...] (Windows/Linux), or menu:IntelliJ IDEA[Preferences...] (macOS)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Select menu:Editor[Code Style \u003e Java]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". Click on the btn:[Imports] tab to set the order"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* For btn:[Class count to use import with \u0027\\*\u0027] and btn:[Names count to use static import with \u0027*\u0027]: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* For btn:[Import Layout]: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a btn:[\u003cblank line\u003e] between each `import`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "After forking the repo, the documentation will still refer to the `CS2103-AY1819S2-W17-3/main` repo."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `In-Credit-Ble`), you should do the following:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "// tag::design[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The *_Architecture Diagram_* above explains the high-level design of _In-Credit-Ble_. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose btn:[Save as picture]."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/finance/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* App launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* App shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d How do the architecture components interact with each other?"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "image::SDforDeleteRecord.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/finance/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `RecordListPanel`,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "`StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "For example, the layout of the link:{repoURL}/src/main/java/seedu/finance/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "link:{repoURL}/src/main/java/seedu/finance/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".  `Logic` uses the `FinanceTrackerParser` class to parse the user command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a record)."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/finance/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* stores the Finance Tracker data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cRecord\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "As a more OOP model, we can store a `Category` list in `Finance Tracker`, which `Record` can reference."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This would allow `Finance Tracker` to only require one `Category` object per unique `Category`, instead of each `Record` needing their own `Category` object."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/finance/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* can save the Finance Tracker data in json format and read it back."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Classes used by multiple components are in the `seedu.financetracker.commons` package."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "// end::design[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This section describes in detail the implementation of certain features in _In-Credit-Ble_."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "// tag::search[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d\u003d Search feature"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "This feature allows the user to filter out specific expenses based on keywords that correspond to the name, category"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "or date."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "This implementation is under `Logic` and `Model` Component."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ".Sequence Diagram of Search Command"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "image::SearchCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "1. User enters command `search -FLAG food`. The command is received by `FinanceTrackerParser`,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "which then creates a `SearchCommandParser` Object and calls `SearchCommandParser#parse()` method."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "2. Depending on the `-FLAG` that is entered by the user, `SearchCommandParser` will create different predicates that"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "correspond to the `-FLAG`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* If `-cat` is inputted, `CategoryContainsKeywordsPredicate` will be created."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* If `-date` is inputted, `DateContainsKeywordPredicate` will be created."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* If `-name` is inputted, `NameContainsKeywordPredicate` will be created."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "3. A `SearchCommand` Object with the correct predicate Object as parameter is created and returned to the"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "`LogicManager`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "4. `LogicManager` then calls `SearchCommand#execute()`, which calls Model#updateFilteredExpenseList() method"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "to update the predicate of FilterList\u003cRecord\u003e. FilterList now contains a new set of records which is filtered by the"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "new predicate."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "5. `SearchCommand` then calls `getFilteredRecordList` method to access the filtered records in an"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "`ObservableList\u003cRecord\u003e` in order to calculate the sum of the money that is spent in all the filtered records."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "6. Then the record list panel will show a set of records according to the keywords. A `CommandResult` is then created"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "and returned to `Logic Manager`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "This feature can be implemented in different ways in terms of how the records are found."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* *Alternative 1* : Check through all records and select those with the matched keywords based on the flag."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Pros: Easy to implement without changing original architecture."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Cons: Slow. Tend to take a long time to search through large number of records."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* *Alternative 2* : Each time a new category/date is called when making a record, create a new list. Each of these list"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "will hold all the records that correspond to these category or dates."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Pros: Very efficient, each time the command is called, just need to retrieve the list of the wanted field."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Cons: Need to change the original architecture of storage to introduce storing of different list corresponding to"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "each tag. Will take up more space if there is many different tags."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "// end::search[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "By default, the list of entries is ordered according to the time the entry is entered into the application,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "where the entry entered first will be at the top of the list, and the entry entered last is at the bottom of the list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The sort mechanism allows users to view their expense records in a different way."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The sort command uses comparators that implement java.util.Comparator interface to provide the comparison functions."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".Sort feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|Command |Comparator used |Effect"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|`sort -name` |`RecordNameComparator` |Lexicographical order"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|`sort -amount` |`RecordAmountComparator` |Descending order"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|`sort -date` |`RecordDateComparator` |Most recent to least recent"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|`sort -cat` |`RecordCategoryComparator` |Lexicographical order"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Here is the list of operations involved in the execution of command, `sort -name`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `LogicManager#execute(_\"sort -name\"_)` calls `FinanceTrackerParser#parseCommand(_\"sort -name\"_)`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `FinanceTracker#parseCommand(_\"sort -name\"_)` creates a new `SortCommandParser` object and calls `SortCommandParser#parse(_\" -name\"_)`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `SortCommandParser#parse()` creates a new `RecordNameComparator()` object, _comparator_ and passes it as a parameter into the `SortCommand` constructor."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". The `SortCommand` object, _s_, is then passed back to the `SortCommandParser`, `FinanceTrackerParser`, and finally back to the `LogicManager`."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".Sequence Diagram of Sort Command I"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "image::SortSequenceDiagram1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `LogicManager#execute(_\"sort -name\"_)` then continues to call `SortCommand#execute()`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `SortCommand#execute()` calls `Model#SortFilteredRecordList(_comparator_)`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `Model#SortFilteredRecordList(_comparator_)` calls `FinanceTracker#sortRecordList(_comparator_)`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `FinanceTracker#sortRecordList(_comparator_)` calls `UniqueRecordList#sortList(_comparator_)`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `UniqueRecordList#sortList(_comparator_)` then uses `FXCollection`’s static method `sort()`  to sort the records."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `SortCommand#execute()` then creates a `CommandResult` object and returns it back to the `LogicManager`."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".Sequence Diagram of Sort Command II"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "image::SortSequenceDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*_Design considerations will be added next time._*"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "// tag::reverse[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Reverse feature"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The reverse feature allows users to reverse the list of entries displayed on the graphic user interface."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The sort features are implemented with a default ordering."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The reverse command provides a convenient way for users to sort their entries in reverse order."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This is how the reverse command is implemented:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `LogicManager#execute(_\"reverse\"_)` calls `FinanceTrackerParser#parseCommand(_\"reverse\"_)`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `FinanceTrackerParser#parseCommand(_\"reverse\"_)` creates a `ReverseCommand` object, _r_."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". _r_ is passed back to the `FinanceTrackerParser`, and then back to the `LogicManager`."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `LogicManager#execute(_\"reverse\"_)` then moves on to call `ReverseCommand#execute()`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `ReverseCommand#execute()` calls `Model#reverseFilteredRecordList()`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `Model#reverseFilteredRecordList()` calls `FinanceTracker#reverseRecordList()`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `FinanceTracker#reverseRecordList()` calls `UniqueRecordList#reverseList()`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `UniqueRecordList#reverseList()` uses `FXCollection`’s static method `reverse()` to reverse the list of records."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ". `ReverseCommand#execute()` then creates a `CommandResult` object and returns it back to the `LogicManager`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".Sequence Diagram of Reverse Command"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "image::ReverseSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*_Design considerations will be added next time._*"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "// end::reverse[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedFinanceTracker`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "It extends `FinanceTracker` with an undo/redo history, stored internally as a `FinanceTrackerStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `VersionedFinanceTracker#commit()` -- Saves the current finance tracker state in its history."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `VersionedFinanceTracker#undo()` -- Restores the previous finance tracker state from its history."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `VersionedFinanceTracker#redo()` -- Restores a previously undone finance tracker state from its history."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitFinanceTracker()`, `Model#undoFinanceTracker()` and `Model#redoFinanceTracker()` respectively."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Step 1.* +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The user launches the application for the first time. The `VersionedFinanceTracker` will be initialized with the initial finance tracker state, and the `currentStatePointer` pointing to that single finance tracker state."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Step 2.* +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The user executes `delete 5` command to delete the 5th record in the finance tracker. The `delete` command calls `Model#commitFinanceTracker()`, causing the modified state of the finance tracker after the `delete 5` command executes to be saved in the `financeTrackerStateList`, and the `currentStatePointer` is shifted to the newly inserted finance tracker state."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Step 3.* +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The user executes `spend n/burger ...` to add a new record. The `spend` command also calls `Model#commitFinanceTracker()`, causing another modified finance tracker state to be saved into the `financeTrackerStateList`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "If a command fails its execution, it will not call `Model#commitFinanceTracker()`, so the finance tracker state will not be saved into the `financeTrackerStateList`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Step 4.* +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The user now decides that adding the record was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoFinanceTracker()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous finance tracker state, and restores the finance tracker to that state."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial finance tracker state, then there are no previous finance tracker states to restore."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The `undo` command uses `Model#canUndoFinanceTracker()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoFinanceTracker()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the finance tracker to that state."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "If the `currentStatePointer` is at index `financeTrackerStateList.size() - 1`, pointing to the latest finance tracker state, then there are no undone finance tracker states to restore. The `redo` command uses `Model#canRedoFinanceTracker()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Step 5.* +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The user then decides to execute the command `list`. Commands that do not modify the finance tracker, such as `list`, will usually not call `Model#commitFinanceTracker()`, `Model#undoFinanceTracker()` or `Model#redoFinanceTracker()`. Thus, the `financeTrackerStateList` remains unchanged."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Step 6.* +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The user executes `clear`, which calls `Model#commitFinanceTracker()`. Since the `currentStatePointer` is not pointing at the end of the `financeTrackerStateList`, all finance tracker states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `spend n/burger ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire finance tracker."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the record being deleted)."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of finance tracker states."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedFinanceTracker`."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "// tag::budgetmanagement[]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d Budget Management"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "This group of features allows the user to set a total budget and"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "allocate a portion of the total budget to different categories."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "The current spending will increase when records are added."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "This implementation is under `Logic`, `Model`, `Storage` and `UI` Component."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "// tag::budget[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d\u003d Setting a Budget"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "This feature allows the particular user to set a budget for the FinanceTracker. The user"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "may only set the budget once and increase or decrease it later."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "Given below is a sequence diagram and step by step explanation of how Finance Tracker"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "creates a budget when the user sets a budget."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ".Sequence diagram of user setting a budget"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::SetCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". The user enters a Set command (e.g. set $/120). The command is received by MainWindow and"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "the method `LogicManager#execute()` is called. The argument of the command ($/120) is passed to"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "`FinanceTrackerParser#parseCommand` method to handle."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". The `FinanceTrackerParser#parseCommand` creates a `SetCommandParser` object and passes the command"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "arguments into `SetCommandParser#parse()` method. The argument is checked to be in the correct format"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "by `ParserUtil.parseAmount()` before `SetCommandParser#parse()` creates a `SetCommand` with the argument"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "parsed into an amount passed in."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". The `SetCommand` object is passed back to `LogicManager#execute()` and it calls the `SetCommand#execute()`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "to excute the logic to create the budget. The method creates a `Budget` object with the amount and passes"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "the budget object into the `Model` by calling `ModelManager#addBudget()`."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `ModelManager#addBudget()` calls `FinanceTracker#addBudget()` to set the Budget of the FinanceTracker for"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "the current user of the app. `FinanceTracker#addBudget()` uses the `Budget#set()` method to set the Budget of"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "the app using the amount put in the inital command before returning to the `SetCommand#execute()` in the `Logic`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "of the app."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `SetCommand#execute()` now creates a `CommandResult` object to convey a message to be pushed to the UI and user."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "The `commandresult` object created is passed back to `LogicManager#execute()` and then back to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `MainWindow#executeCommand()` checks whether there is a need to update the budget in the UI by calling `commandResult#isChangeBudget()`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "and getting a `true` boolean return from the method for the set command. The `#handleChangeBudget()` within `MainWindow` is called"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "since `MainWindow#executeCommand()` notes that budget is changed."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `MainWindow#handleChangeBudget()` calls `LogicManager#getBudget()` to get the current budget of the FinanceTracker. The budget is then"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "passed as argument into the `BrowserPanel#updateBudget()` method which will reflect the budget set by the command in the UI. The current budget"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "will be the same as the total budget when it is set."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "The logic for keeping track of budgets can be implemented in different ways for individual categories."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Solution 1*: Keep a list of expenditure for individual categories and budget allocations in one Budget class."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Pros: Easier to maintain one Budget object."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Cons: Iterating through the list could be slow if there are a lot of categories. Lists could be confusing to maintain."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Solution 2*: Create Budget classes to keep track of expenditure and budget for individual categories."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Pros: More human readable to maintain Budget classes with names of categories."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Cons: Budget classes for individual categories need to be iterated through to get totals leading to slow UI updates each time values are changed."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "//end::budget[]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "// tag::categorybudget[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d\u003d Allocating a budget to category"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "This feature allows user to set a category budget after the total budget is set"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "Given below is a sequence diagram and step by step explanation of how Finance Tracker"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "executes when a user sets a category budget."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ".Sequence diagram of user setting a category budget"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::AllocateSequenceDiagram.png[]"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". User enters command `allocate $/10 c/Food`. The command is received by `FinanceBookParser`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". FinanceTrackerParser will then create a `AllocateCommandParser` Object"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "and calls `AllocateCommandParser#parse()` method"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `AllocateCommandParser#parse()` method calls `ArgumentTokenizer#tokenize()` method to tokenize"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "the user input String into arguments and prefixes in an `ArgumentMultimap` Object."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `AllocateCommandParser#parse()` method then calls another method within the same class"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "`AllocateCommandParser#arePrefixesPresent()` to check if there are any missing prefixes."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "If there are missing prefixes, `ParseException` will be thrown"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". If no exceptions are thrown from the step 4, a new AllocateCommand object is created"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "with the given arguments."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". Control is returned to LogicManager which then calls `AllocateCommand#execute()` method."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `AllocateCommand#execute()` calls `ModelManager#addCategoryBudget()` method and control"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "is transferred to `ModelManager` which is in the `Model` Component."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `ModelManager#addCategoryBudget()` then calls `FinanceTracker#addCategoryBudget()` which then"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "calls `TotalBudget#setNewCategoryBudget()`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ". `TotalBudget#setNewCategoryBudget()` takes into account if there are any previous budget"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "allocated to a category and if so, adds the expenses to the new budget assigned to the category"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design consideration"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "Aspect: allocating Category Budget"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Alternative 1 (current choice)*: Allocating Category Budget is done with only one command `allocate`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Pros: User need to only make use of one command to control the budget of the category and will"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "not be confused with too many other commands"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Cons: Requires the developer to ensure the application checks that if there is a current budget"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "allocated to the same category, it should be reflected accordingly."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Alternative 2*: Have two other commands `increaseCatBudget` and `decreaseCatBudget` to allow user"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "to control the budget of the category"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Pros: User is able to adjust the budget by increasing/decreasing the budget instead of having to use"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "one command to allocate a fixed amount to the budget"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Cons: User might be confused with too many commands and not intuitive."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "// end::categorybudget[]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d\u003d To be implemented"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* Reflecting total budget and current budget on `BrowserPanel` portion of UI."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* Implementing logic for `increase` command to allow for increasing the budget."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* Modify `spend` and `edit` Command to deduct from total budget to get current budget."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* Implement `reset` command to reset current budget expenditure and total budget."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* Reflecting total budget and current budget for each category when selected in UI."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* Expand `undo` and `redo` command to be able to work on `set`, `allocate` and `increase` command."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "//end::budgetmanagement[]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d\u003d Summary"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "The summary feature shows an overview of your previous expenditures in an Aster Plot chart, which works similarly to a pie chart. Each sector of the chart represents a category. The radius of each sector indicates the total budget amount allocated for a particular category, while the coloured area of the sector denotes the amount spent for that category. This allows users to easily perceive whether their spending is within their budget for each category."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "The summary feature intends to use a D3.js graph to display the data. This will help contribute to the aesthetics and user-friendliness of displaying the data in In-Credit-Ble."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "The implementation of the Summary command can be divided into two phases – preparation and execution. Given below is an explanation of how the summary mechanism behaves at each phase, although it has not been fully implemented yet."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Preparation"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "In the preparation phase, the application will parse the command. Below is the UML Sequence diagram and a step-by-step explanation of the preparation stage."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".Sequence diagram of the preparation stage in the summary mechanism"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "image::SummarySequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "1.\tUser first enters the command `summary`. This command is received by `FinanceTrackerParser`, which  then calls `SummaryCommandParser#parse()` to create `SummaryCommand`."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "2.\t`SummaryCommand`  is then returned to `LogicManager`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "3.\t`LogicManager` then calls `SummaryCommand#execute()`, which will then trigger the process of retrieving the data to be displayed."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Execution"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "In the execution phase, the program accesses the `Budget` class to retrieve the data to be displayed. It will then finally map this data to graph the Aster Plot chart and display it. Below is the UML sequence diagram and a step-by-step explanation of the execution stage."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".Sequence diagram of the execution stage in the summary mechanism"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "image::SummarySequenceDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "1.\tThe`handleShowSummary` will be handled by `MainWindow#handleShowSummary()`, which will call `GraphPanel#execute()` and pass the data as parameters by calling `Logic#getTotalBudget()` and `Logic#getCategoryBudget()`."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "2.\t`Logic#getTotalBudget()` and `Logic#getCategoryBudget()` will get their respective data by calling the method of the same name in `Model`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "3.\tOnce the parameters are passed into GraphPanel#execute(), StackPane#getData()#clear() is called to clear any display elements in StackPane. D3.js is used to render the charts."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Representation for Summary of Expenditure"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "An aster plot graph will be used to display the information in the main window. Using such a graph will allow for sufficient space should users decide to add more categories in the future. Hovering over the different sectors in the aster plot graph will display the corresponding category. If possible, the colours used for the category in the aster plot graph should be the same colour palette used for the category labels."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".Example of Aster Plot Graph"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "image::asterPlot.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Initially, we were considering using a pie chart instead. However, using an aster plot graph will be more effective in showing the user what is the remaining budget amount for each category."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "//end::summary[]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `INFO` : Information showing noteworthy actions by the application"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.finance.ui` package."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "e.g. `seedu.finance.commons.StringUtilTest`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "e.g. `seedu.finance.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "e.g. `seedu.finance.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "A project often depends on third-party libraries. For example, _In-Credit-Ble_ depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// tag::appendixA[]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "* has a need to manage a significant amount of expenses/finances"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* has a need to be more aware of his/her spending habits/patterns"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*Value proposition*: Manage expenses faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// end::appendixA[]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// tag::appendixB[]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to it when I forget how to use the application"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* * *` |user |have a record of my recent expenses (day, week, month, category) |be more aware of where I am spending my money"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* * *` |user |add a new entry |"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "|`* * *` |user |delete an entry |remove an entry that is no longer needed anymore"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* * *` |user |categorise my expenses |be aware of what I am spending most of my money on"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* * *` |user |be able to set a budget (a total for the month and for which category) |be more thrifty in terms of my expenditure"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* *` |user |summarise my daily spending in a pictorial form |easily see how on track I am in adhering to my budget"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* *` |user |locate a specific entry easily |recall how much I spent"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* *` |user | save my data |refer to it when I use the app next time"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* *` |user | sort my expenses in terms of amount | be aware of what costs the most"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`* *` |user |set daily budgets |limit the amount I spend each day"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`*` |user |analyse my spending habits/patterns |derive a savings plan and better plan my expenses"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`*` |spendthrift user |receive tips to be a better saver |be more aware of different ways to keep within my budget"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|`*` |IT savvy user |categorise my expenses based on the different methods of payment |automatically track my cashless expenditures as well as credit card transactions"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// end::appendixB[]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// tag::appendixC[]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "(For all use cases below, the *System* is `In-Credit-Ble` and the *User* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: Setting a budget for the month"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to set a budget for the current month"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ displays current budget amount for the month"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* 2a. With addition of expense entries, _System_ updates the remaining amount in the current month\u0027s budget"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Use case: Allocate budget to a category"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to list summary of budget based on category"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ shows a summary of budget based on category"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "3.  _User_ requests to allocate a certain amount to a category"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "4.  _System_ allocates the user input amount to the given category"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: Increasing budget for the month"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to list entries"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ shows a list of expense entries"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "3.  _User_ requests to increase budget for the month (can be associated with a category)"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "4.  _System_ will increase the budget for the month (that is associated with category input)"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Use case: Add expense entry"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to list entries"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ shows a list of expense entries"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "3.  _User_ requests to add a specific expense entry in the list"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "4.  _System_ adds the expense entry"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* 3a. Some fields are missing."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "** 3a1. _System_ shows an error message."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "+"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: Editing an expense entry"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to list expense entries"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ shows a list of expense entries"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "3.  _User_ requests to edit a specific expense entry in the list"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "4.  _System_ updates the expense entry as well as the budget summary accordingly"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "** 3a1. _System_ shows an error message."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: Delete expense entry"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to list expense entries"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ shows a list of expense entries"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "3.  _User_ requests to delete a specific expense entry in the list"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "4.  _System_ deletes the entry"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "** 3a1. _System_ shows an error message."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: Listing history of entered commands"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to list history of entered commands"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ shows history of commands in reverse chronological order (latest command first)"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* 1a. There was no entered commands"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "+"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: User wants to undo previous command"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to undo previous command"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ undo previous command and updates budget accordingly"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* 1a. There was no previous command"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Use case ends with message to let _User_ know there is no previous command"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: User wants to redo previous undone command"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1.  _User_ requests to redo previous undone command"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2.  _System_ redo previous undone command and updates budget accordingly"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* 1a. There was no previous undone command"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Use case ends with message to let _User_ know there is no previous undone command"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d Use case: User wants to clear all entries"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "1. _User_ requests to clear all entries"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "2. _System_ clears all entries and updates the budget accordingly"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* 1a. There are no entries in the _System_"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Use case ends with message to let _User_ know there are no entries in _System_"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// end::appendixC[]"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".  Should be able to hold up to 1000 expenditure records without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".  The user interface should be intuitive and easy to use for people who are not IT-savvy."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".  Responses by the system should be fast (~5 seconds)."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Amount::"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The amount of money for expenditure and budget"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Entry::"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "A listed item/activity tracked by the application.  It generally consists of the name, amount and date along with a"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "category tag (if specified)"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Records::"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The list of all entries stored in the application"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Monefy - Money Manager*"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Author: Aimbity AS"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Interface is easy to use"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Able to track expenses and income over various periods of time"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Free"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Unable to synchronise and restore or backup data between devices"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Do not have an auto-income function"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Do not have an option for reminder"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Do not have a feature for recurrent spending"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Money Lover: Expense Tracker \u0026 Budget Planner*"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Author: Finsify"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Allows setting of recurring payments"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Able to see what expenses add up to in the forthcoming months"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Able to sync across phone and computer"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Able to download to own excel worksheet"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Need to make a budget for every wallet"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Unable to choose multiple categories for a budget"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Unable to edit a transaction"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Budgets are based per account"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Seedly - Personal Finance App*"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Author: Seedly Pte Ltd"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Visually appealing"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Able to import transactions from ibanking accounts and allow manual inputs for cash transactions"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Pie charts give a visual illustration on expenditure"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Search function present"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Sync feature takes a long time"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Crash every now and then"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Categories are hard to identify in pie charts"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Not smart enough to recognise similar entries"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Summary presented is confusing"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Unable to add in sub-categories to further pinpoint area of spending"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Given below are instructions to test the application manually."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".. Re-launch the application by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d\u003d Deleting a record"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ". Deleting a record while all records are listed"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ".. Prerequisites: List all records using the `list` command. Multiple records in the list."
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "   Expected: First record is deleted from the list. Details of the deleted record shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "   Expected: No record is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size), `delete three` +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 68,
      "JeremyLoye": 112,
      "Jackimaru96": 57,
      "-": 629,
      "eugeneyl": 61,
      "kjiaxuan": 289
    }
  },
  {
    "path": "docs/GraphPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" type\u003d\"text/css\" href\u003d\"style.css\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003cscript src\u003d\"http://d3js.org/d3.v3.min.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003cscript src\u003d\"http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003cscript src\u003d\"draw.js\" \u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 16
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d In-Credit-Ble - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-w17-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "By: `Team W17-3`      Since: `March 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Welcome to the _In-Credit-Ble_ User Guide! _In-Credit-Ble_ is your all-in-one application in managing and tracking your"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "personal finances. Our user-friendly interface will make it easy for you to see how much you can safely spend within your budget and be more aware"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "of your spending habits. If you are a *fast typer*, *prefer to type* over using your mouse and *like to get things done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "efficiently*, then this is the product just for you! _In-Credit-Ble_ is designed for those who prefer to work with a"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Command Line Interface (CLI)*."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This user guide shows you how to get started using _In-Credit-Ble_. It also provides in-depth documentation on the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "different features and shows you how to perform basic _In-Credit-Ble_ operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::quickstart[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Follow these steps to get _In-Credit-Ble_ up and running on your computer in no time!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your computer. You can download and install the required"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "   Java Development Kit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "   link:https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html[here]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ".  Download the latest `financetracker.jar` file link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your finance tracker."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds as shown below."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "image::startUI.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* *`help`* : opens the _In-Credit-Ble_ user guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* *`set`* : sets the total budget for Finance Tracker"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* *`allocate`* : allocates budget to a certain category (within the total budget)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// end::quickstart[]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This section describes the various features _In-Credit-Ble_ has to offer. Examples are also included to give you"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "step-by-step instructions on how to use the different commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `set $/AMOUNT`,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "`AMOUNT` is a parameter which can be used as `set $/200.00`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Items in square brackets are optional e.g `search KEYWORD [MORE_KEYWORDS]` can be used as `search clothes` or as"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "`search cake lunch`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Budget Management"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::set[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Setting a budget: `set`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "This command enables you to set a fixed budget for a month/week (Time limit to be implemented). The current budget will be modified based on the transaction records. The command format is as follows:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `set $/AMOUNT`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `set $/500`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `set $/500.50`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::set[]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::allocate[]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Allocating budget based on categories: `allocate`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "You can use this command to set a budget for a category in _In-Credit-Ble_ Finance Tracker. +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Alias*: `allo`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Format*: `allocate $/AMOUNT c/CATEGORY`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `allocate $/50 c/Dining`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `allocate $/100 c/CloThEs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `allocate $/100.10 c/FOOD`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `allo $/123.10 c/GiRLfrIEND`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* If you provide multiple categories (e.g. `allocate $/50.00 c/Food c/Clothes`),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "only the last category you provided will be taken (in the previous e.g., the command will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "set budget for `Clothes` category."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Category names are case-insensitive. (e.g. `CLotHes`, `clothes` and `CLOTHES` refer to the same"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "category and will be shown with the first character in uppercase and the rest of the characters"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "in lowercase (in the above example, it will be shown as `Clothes`)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* If a budget was previously set for the category, the old category budget will be replaced"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "by the new `allocate` command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Category name supplied must be https://en.wikipedia.org/wiki/Alphanumeric[alphanumeric]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "and cannot contain special characters such as `:\u003c\u003e;\\/|?~^%$#@`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::allocate[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::increase[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Increasing the budget: `increase`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can increase your budget limit for the month/week by the specified amount."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `increase $/AMOUNT`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `increase $/10.10`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `increase $/100`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::increase[]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Expense Entry Management"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::spend[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Adding an expense: `spend`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "You can keep track of how much you have spent by adding an expense entry to _In-Credit-Ble_."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `add`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*Format*: `spend n/NAME $/AMOUNT d/DATE c/CATEGORY r/DESCRIPTION`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* `spend n/cake $/5.50 d/15/03/2019 c/Food r/Birthday celebration`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* `spend n/movie $/10 d/16/03/2019 c/Entertainment r/Avengers: End Game`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* If you provide multiple categories (e.g. `spend n/Tshirt $/10.00 d/31/03/2019 c/Food c/Clothes`),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "only the last category you provided will be taken (in the previous e.g., the command will"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "add expense for `Clothes` category."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Category names are case-insensitive. (e.g. `CLotHes`, `clothes` and `CLOTHES` refer to the same"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "category and will be shown with the first character in uppercase and the rest of the characters"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "in lowercase (in the above example, it will be shown as `Clothes`)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Category name supplied must be https://en.wikipedia.org/wiki/Alphanumeric[alphanumeric]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "and cannot contain special characters such as `:\u003c\u003e;\\/|?~^%$#@`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* If no date is inputted, current local date will be used instead."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::spend[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::description[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a description to an entry: `description`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can add a description to an existing entry in the records to remember details of the amount spent."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `descr`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `description INDEX [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `description 1 d/Father\u0027s birthday present` +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Changes the description of entry at index 1 to \"Father\u0027s birthday present\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `description 1 d/` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Removes the description of entry at index 1"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `INDEX` here refers to the index number shown in the displayed records."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::description[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Editing an entry: `edit`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can easily edit any part of an existing entry in the records. +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Index refers to the index number shown in the list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `e`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `edit INDEX [n/NAME] [$/AMOUNT] [d/DATE] [c/CATEGORY]`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `edit 2 $/10.10`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `edit 1 n/burger c/Food`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `INDEX` here refers to the index number shown in the displayed records."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::select[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting an entry: `select`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can select an existing entry in the records to view its details by specifying the entry\u0027s index number."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `s`, `sel`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `select INDEX`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `select 3`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `INDEX` here refers to the index number shown in the displayed records."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::select[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting an entry: `delete`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can delete an entry in the record by specifying the entry\u0027s index number."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Deleted entries can be recovered via the `undo` command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `d`, `del`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `delete INDEX`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `delete 2`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `INDEX` here refers to the index number shown in the displayed records."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `INDEX` *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Records Management"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all entries: `list`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can see all the entries you have entered, as long as they are not deleted entries."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `l`, `ls`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `list`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::search[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Locating entry based on name/category: `search`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "You can easily search for entries in the records using a name, category or date as keywords. The total sum of money"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "spent on all the results of the search will also be shown."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `find`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*Format*: `search -FLAG KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* `search -cat Transport`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* `search -name cake bread`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* `search -date 10/10/2001"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* `FLAG` here refers to either `-name`, `-cat` or `date`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Only one flag should be provided."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::search[]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Sorting the entries according to name/amount/date/category: `sort`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can choose to sort the list of entries by name, amount, date or category."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `sort FLAG`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `sort -name`: +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Sorts the list of records by name in lexicographical order"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `sort -amount`: +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Sorts the list of records by amount from largest to smallest"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `sort -date`: +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Sorts the list of records by date with the latest at the top"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* `sort -cat`: +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Sorts the list of records by category"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `FLAG` here refers to either `-name`, `-amount, `-date` or `-cat`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Only one flag should be provided."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::reverse[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Reversing the entries: `reverse`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can also reverse the order of the list of entries in the records."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `rev`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: reverse"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::reverse[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Showing summary of records: `summary`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can see the summary of your previous expenditures, with an aster plot graph showing how your spending habits are like in the"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "different categories. It also displays the remaining budget amount for each category."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Deleted entries are not included in the summary."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `summary`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::summary[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "// tag::setfile[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d\u003d\u003d Changing FinanceTracker data storage location: `setfile`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "Want to maintain multiple users of the FinanceTracker? You can use this command to load FinanceTracker data from another file."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "The command will create a file if it does not already exist."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "File paths and extension should not be included in command."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "*Format*: `setfile f/finance`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "//end::setfile[]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::help[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Forgotten which commands to use? You can easily find the commands you need to navigate the software"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "by using the following command:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `help`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::help[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can restore the program to the state before the previous _undoable_ command was executed."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `u`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Format*: `undo`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "_Undoable_ commands:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* commands that modify the finance tracker\u0027s content +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "(`set`, `spend`, `increase`, `allocate`, `edit`, `delete`, `clear`, `description)."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can reverse the most recent `undo` command."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `r`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Format*: `redo`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// tag::theme[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d Changing theme of application: `theme`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "You can change the theme of the application with pre-set colour themes specified."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Alias*: `colour`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Format*: `theme COLOURTHEME`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `theme DARK`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `theme BlUE`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* `theme pink`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "****"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* Valid themes include: `Dark`, `Light`, `Blue`, `Pink`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* The theme name is case-insensitive (`BlUE`, `BLUE`, `blue` or `bLUE` etc. all refer"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "to `Blue`)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* You can also change the theme of the application by choosing the theme under"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "the menu bar."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "image::themeMenuBar.png[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// end::theme[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands: `history`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can list all the commands you have entered in reverse chronological order."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `h`, `hist`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Format*: `history`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can delete all existing entries in the records and reset your budget to $0.00."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `c`, `clr`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Format*: `clear`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You can quit the program at any point in time when you use this command."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Alias*: `quit`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*Format*: `exit`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The finance record and allocated budget will be saved in the hard disk automatically after any command that changes"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "the data. There is no need for you to save manually."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Upcoming features"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "// tag::savingpatterns[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Establish saving patterns based on record and derive projected savings/expenses in a time span `[coming in v2.0]`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "Your monthly finance records will be archived at the end of the month. This information will be used to derive"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "the projected savings and expenses based on your typical spending patterns."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "// end::savingpatterns[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Links to financial articles `[coming in v2.0]`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "You will be able to list categories of financial articles that you are interested in"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "(e.g. investment, stock market). Based on these categories, _In-Credit-Ble_ will use Google API to search for"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "related articles for you to view."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d\u003d Separate expenditures based on methods of payment (Cash, Visa, Paylah) `[coming in v2.0]`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "_In-Credit-Ble_ will link up with secure methods of payment such as payLah, Visa/MasterCard, Amex or Paypal to allow"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "tracking of your cashless transactions. By paying through _In-Credit-Ble, transactions will automatically be updated"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "and recorded as entries."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Q*: How do I transfer my data to another Computer?"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*A*: You can install the app in the other computer and overwrite the empty data file it creates with the file"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "that contains the data of your previous _In-Credit-Ble_ folder."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*Q*: Will the application support different currency?"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "*A*: At the current version, the application is unable to support transactions record in different currency."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "You will need to calculate and enter your input based on your local currency."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "_In-Credit-Ble_  aims to support multi-currency transactions in `v2.0`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Budget Management"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Command | Command Format | Alias | Example"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Set Budget | `set $/AMOUNT` |- | `set $/500`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "| Allocate budgeting based on categories | `allocate $/AMOUNT c/CATEGORY` | `allo` | `allocate $/100 c/Shopping`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Increase budget | `increase $/AMOUNT` | - | `increase $/10.10`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Expense Entry Management"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Command | Command Format | Alias | Example"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "| Add expense | `spend n/NAME $/AMOUNT [d/DATE] [c/CATEGORY] ... [r/Description]` | `add` | `spend n/movie $/10"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "  d/16/03/2019 c/Entertainment r/Avengers: Endgame`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "| Add a description to an entry | `description INDEX r/DESCRIPTION` | `descr` | `description 1 d/Father\u0027s birthday present`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Edit an entry | `edit INDEX [n/NAME] [$/AMOUNT] [d/DATE] [c/CATEGORY]` | `e` | `edit 1 n/burger c/Food`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Select an entry | `select INDEX` | `s`, `sel` | `select 3`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Delete an entry | `delete INDEX` | `d`, `del` | `delete 2`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Records Management"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Command | Command Format | Alias | Example"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| List all entries | `list` | `l`, `ls` | -"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "| Locate entry based on name, category or date |`search -FLAG KEYWORD [MORE_KEYWORDS]` | `find` | `search -cat Food`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Sort the entries | `sort FLAG` | - | `sort -name`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Reverse all entries | `reverse` | `rev` | -"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Show summary of records | `summary` | - | -"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Command | Command Format | Alias | Example"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "| Set data file | `setfile` | - | `setfile f/finance`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Help | `help` | - | -"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Undo previous command | `undo` | `u` | -"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Redo previously undone command | `redo` | `r` | -"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "| Change colour theme of application | `theme` | `colour` | theme light"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| List entered commands | `history` | `h`, `hist` | -"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Clear all entries | `clear` | `c`, `clr` | -"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "| Exit the program | `exit` | `quit` | -"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Amount::"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "The amount of money for expenditure and budget"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Category::"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "The category that an entry belongs to."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Entry::"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "A listed item/activity tracked by the application.  It generally consists of the name, amount and date along with a"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "compulsory category tag"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Records::"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "The list of all entries stored in the application"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 67,
      "JeremyLoye": 14,
      "Jackimaru96": 167,
      "-": 150,
      "eugeneyl": 16,
      "kjiaxuan": 173
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Runs all tests in the `seedu.finance.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Runs all non-GUI tests in the `seedu.finance`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "kjiaxuan": 2
    }
  },
  {
    "path": "docs/stylesheets/js/d3.v3.min.js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "!function(){function n(n){return null!\u003dn\u0026\u0026!isNaN(n)}function t(n){return n.length}function e(n){for(var t\u003d1;n*t%1;)t*\u003d10;return t}function r(n,t){try{for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}catch(r){n.prototype\u003dt}}function u(){}function i(n){return aa+n in this}function o(n){return n\u003daa+n,n in this\u0026\u0026delete this[n]}function a(){var n\u003d[];return this.forEach(function(t){n.push(t)}),n}function c(){var n\u003d0;for(var t in this)t.charCodeAt(0)\u003d\u003d\u003dca\u0026\u0026++n;return n}function s(){for(var n in this)if(n.charCodeAt(0)\u003d\u003d\u003dca)return!1;return!0}function l(){}function f(n,t,e){return function(){var r\u003de.apply(t,arguments);return r\u003d\u003d\u003dt?n:r}}function h(n,t){if(t in n)return t;t\u003dt.charAt(0).toUpperCase()+t.substring(1);for(var e\u003d0,r\u003dsa.length;r\u003ee;++e){var u\u003dsa[e]+t;if(u in n)return u}}function g(){}function p(){}function v(n){function t(){for(var t,r\u003de,u\u003d-1,i\u003dr.length;++u\u003ci;)(t\u003dr[u].on)\u0026\u0026t.apply(this,arguments);return n}var e\u003d[],r\u003dnew u;return t.on\u003dfunction(t,u){var i,o\u003dr.get(t);return arguments.length\u003c2?o\u0026\u0026o.on:(o\u0026\u0026(o.on\u003dnull,e\u003de.slice(0,i\u003de.indexOf(o)).concat(e.slice(i+1)),r.remove(t)),u\u0026\u0026e.push(r.set(t,{on:u})),n)},t}function d(){Xo.event.preventDefault()}function m(){for(var n,t\u003dXo.event;n\u003dt.sourceEvent;)t\u003dn;return t}function y(n){for(var t\u003dnew p,e\u003d0,r\u003darguments.length;++e\u003cr;)t[arguments[e]]\u003dv(t);return t.of\u003dfunction(e,r){return function(u){try{var i\u003du.sourceEvent\u003dXo.event;u.target\u003dn,Xo.event\u003du,t[u.type].apply(e,r)}finally{Xo.event\u003di}}},t}function x(n){return fa(n,da),n}function M(n){return\"function\"\u003d\u003dtypeof n?n:function(){return ha(n,this)}}function _(n){return\"function\"\u003d\u003dtypeof n?n:function(){return ga(n,this)}}function b(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function u(){this.setAttribute(n,t)}function i(){this.setAttributeNS(n.space,n.local,t)}function o(){var e\u003dt.apply(this,arguments);null\u003d\u003de?this.removeAttribute(n):this.setAttribute(n,e)}function a(){var e\u003dt.apply(this,arguments);null\u003d\u003de?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n\u003dXo.ns.qualify(n),null\u003d\u003dt?n.local?r:e:\"function\"\u003d\u003dtypeof t?n.local?a:o:n.local?i:u}function w(n){return n.trim().replace(/\\s+/g,\" \")}function S(n){return new RegExp(\"(?:^|\\\\s+)\"+Xo.requote(n)+\"(?:\\\\s+|$)\",\"g\")}function k(n){return n.trim().split(/^|\\s+/)}function E(n,t){function e(){for(var e\u003d-1;++e\u003cu;)n[e](this,t)}function r(){for(var e\u003d-1,r\u003dt.apply(this,arguments);++e\u003cu;)n[e](this,r)}n\u003dk(n).map(A);var u\u003dn.length;return\"function\"\u003d\u003dtypeof t?r:e}function A(n){var t\u003dS(n);return function(e,r){if(u\u003de.classList)return r?u.add(n):u.remove(n);var u\u003de.getAttribute(\"class\")||\"\";r?(t.lastIndex\u003d0,t.test(u)||e.setAttribute(\"class\",w(u+\" \"+n))):e.setAttribute(\"class\",w(u.replace(t,\" \")))}}function C(n,t,e){function r(){this.style.removeProperty(n)}function u(){this.style.setProperty(n,t,e)}function i(){var r\u003dt.apply(this,arguments);null\u003d\u003dr?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null\u003d\u003dt?r:\"function\"\u003d\u003dtypeof t?i:u}function N(n,t){function e(){delete this[n]}function r(){this[n]\u003dt}function u(){var e\u003dt.apply(this,arguments);null\u003d\u003de?delete this[n]:this[n]\u003de}return null\u003d\u003dt?e:\"function\"\u003d\u003dtypeof t?u:r}function L(n){return\"function\"\u003d\u003dtypeof n?n:(n\u003dXo.ns.qualify(n)).local?function(){return this.ownerDocument.createElementNS(n.space,n.local)}:function(){return this.ownerDocument.createElementNS(this.namespaceURI,n)}}function z(n){return{__data__:n}}function q(n){return function(){return va(this,n)}}function T(n){return arguments.length||(n\u003dXo.ascending),function(t,e){return t\u0026\u0026e?n(t.__data__,e.__data__):!t-!e}}function R(n,t){for(var e\u003d0,r\u003dn.length;r\u003ee;e++)for(var u,i\u003dn[e],o\u003d0,a\u003di.length;a\u003eo;o++)(u\u003di[o])\u0026\u0026t(u,o,e);return n}function D(n){return fa(n,ya),n}function P(n){var t,e;return function(r,u,i){var o,a\u003dn[i].update,c\u003da.length;for(i!\u003de\u0026\u0026(e\u003di,t\u003d0),u\u003e\u003dt\u0026\u0026(t\u003du+1);!(o\u003da[t])\u0026\u0026++t\u003cc;);return o}}function U(){var n\u003dthis.__transition__;n\u0026\u0026++n.active}function j(n,t,e){function r(){var t\u003dthis[o];t\u0026\u0026(this.removeEventListener(n,t,t.$),delete this[o])}function u(){var u\u003dc(t,Bo(arguments));r.call(this),this.addEventListener(n,this[o]\u003du,u.$\u003de),u._\u003dt}function i(){var t,e\u003dnew RegExp(\"^__on([^.]+)\"+Xo.requote(n)+\"$\");for(var r in this)if(t\u003dr.match(e)){var u\u003dthis[r];this.removeEventListener(t[1],u,u.$),delete this[r]}}var o\u003d\"__on\"+n,a\u003dn.indexOf(\".\"),c\u003dH;a\u003e0\u0026\u0026(n\u003dn.substring(0,a));var s\u003dMa.get(n);return s\u0026\u0026(n\u003ds,c\u003dF),a?t?u:r:t?g:i}function H(n,t){return function(e){var r\u003dXo.event;Xo.event\u003de,t[0]\u003dthis.__data__;try{n.apply(this,t)}finally{Xo.event\u003dr}}}function F(n,t){var e\u003dH(n,t);return function(n){var t\u003dthis,r\u003dn.relatedTarget;r\u0026\u0026(r\u003d\u003d\u003dt||8\u0026r.compareDocumentPosition(t))||e.call(t,n)}}function O(){var n\u003d\".dragsuppress-\"+ ++ba,t\u003d\"click\"+n,e\u003dXo.select(Go).on(\"touchmove\"+n,d).on(\"dragstart\"+n,d).on(\"selectstart\"+n,d);if(_a){var r\u003dJo.style,u\u003dr[_a];r[_a]\u003d\"none\"}return function(i){function o(){e.on(t,null)}e.on(n,null),_a\u0026\u0026(r[_a]\u003du),i\u0026\u0026(e.on(t,function(){d(),o()},!0),setTimeout(o,0))}}function Y(n,t){t.changedTouches\u0026\u0026(t\u003dt.changedTouches[0]);var e\u003dn.ownerSVGElement||n;if(e.createSVGPoint){var r\u003de.createSVGPoint();if(0\u003ewa\u0026\u0026(Go.scrollX||Go.scrollY)){e\u003dXo.select(\"body\").append(\"svg\").style({position:\"absolute\",top:0,left:0,margin:0,padding:0,border:\"none\"},\"important\");var u\u003de[0][0].getScreenCTM();wa\u003d!(u.f||u.e),e.remove()}return wa?(r.x\u003dt.pageX,r.y\u003dt.pageY):(r.x\u003dt.clientX,r.y\u003dt.clientY),r\u003dr.matrixTransform(n.getScreenCTM().inverse()),[r.x,r.y]}var i\u003dn.getBoundingClientRect();return[t.clientX-i.left-n.clientLeft,t.clientY-i.top-n.clientTop]}function I(n){return n\u003e0?1:0\u003en?-1:0}function Z(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function V(n){return n\u003e1?0:-1\u003en?Sa:Math.acos(n)}function X(n){return n\u003e1?Ea:-1\u003en?-Ea:Math.asin(n)}function $(n){return((n\u003dMath.exp(n))-1/n)/2}function B(n){return((n\u003dMath.exp(n))+1/n)/2}function W(n){return((n\u003dMath.exp(2*n))-1)/(n+1)}function J(n){return(n\u003dMath.sin(n/2))*n}function G(){}function K(n,t,e){return new Q(n,t,e)}function Q(n,t,e){this.h\u003dn,this.s\u003dt,this.l\u003de}function nt(n,t,e){function r(n){return n\u003e360?n-\u003d360:0\u003en\u0026\u0026(n+\u003d360),60\u003en?i+(o-i)*n/60:180\u003en?o:240\u003en?i+(o-i)*(240-n)/60:i}function u(n){return Math.round(255*r(n))}var i,o;return n\u003disNaN(n)?0:(n%\u003d360)\u003c0?n+360:n,t\u003disNaN(t)?0:0\u003et?0:t\u003e1?1:t,e\u003d0\u003ee?0:e\u003e1?1:e,o\u003d.5\u003e\u003de?e*(1+t):e+t-e*t,i\u003d2*e-o,gt(u(n+120),u(n),u(n-120))}function tt(n,t,e){return new et(n,t,e)}function et(n,t,e){this.h\u003dn,this.c\u003dt,this.l\u003de}function rt(n,t,e){return isNaN(n)\u0026\u0026(n\u003d0),isNaN(t)\u0026\u0026(t\u003d0),ut(e,Math.cos(n*\u003dNa)*t,Math.sin(n)*t)}function ut(n,t,e){return new it(n,t,e)}function it(n,t,e){this.l\u003dn,this.a\u003dt,this.b\u003de}function ot(n,t,e){var r\u003d(n+16)/116,u\u003dr+t/500,i\u003dr-e/200;return u\u003dct(u)*Fa,r\u003dct(r)*Oa,i\u003dct(i)*Ya,gt(lt(3.2404542*u-1.5371385*r-.4985314*i),lt(-.969266*u+1.8760108*r+.041556*i),lt(.0556434*u-.2040259*r+1.0572252*i))}function at(n,t,e){return n\u003e0?tt(Math.atan2(e,t)*La,Math.sqrt(t*t+e*e),n):tt(0/0,0/0,n)}function ct(n){return n\u003e.206893034?n*n*n:(n-4/29)/7.787037}function st(n){return n\u003e.008856?Math.pow(n,1/3):7.787037*n+4/29}function lt(n){return Math.round(255*(.00304\u003e\u003dn?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function ft(n){return gt(n\u003e\u003e16,255\u0026n\u003e\u003e8,255\u0026n)}function ht(n){return ft(n)+\"\"}function gt(n,t,e){return new pt(n,t,e)}function pt(n,t,e){this.r\u003dn,this.g\u003dt,this.b\u003de}function vt(n){return 16\u003en?\"0\"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function dt(n,t,e){var r,u,i,o\u003d0,a\u003d0,c\u003d0;if(r\u003d/([a-z]+)\\((.*)\\)/i.exec(n))switch(u\u003dr[2].split(\",\"),r[1]){case\"hsl\":return e(parseFloat(u[0]),parseFloat(u[1])/100,parseFloat(u[2])/100);case\"rgb\":return t(Mt(u[0]),Mt(u[1]),Mt(u[2]))}return(i\u003dVa.get(n))?t(i.r,i.g,i.b):(null!\u003dn\u0026\u0026\"#\"\u003d\u003d\u003dn.charAt(0)\u0026\u0026(4\u003d\u003d\u003dn.length?(o\u003dn.charAt(1),o+\u003do,a\u003dn.charAt(2),a+\u003da,c\u003dn.charAt(3),c+\u003dc):7\u003d\u003d\u003dn.length\u0026\u0026(o\u003dn.substring(1,3),a\u003dn.substring(3,5),c\u003dn.substring(5,7)),o\u003dparseInt(o,16),a\u003dparseInt(a,16),c\u003dparseInt(c,16)),t(o,a,c))}function mt(n,t,e){var r,u,i\u003dMath.min(n/\u003d255,t/\u003d255,e/\u003d255),o\u003dMath.max(n,t,e),a\u003do-i,c\u003d(o+i)/2;return a?(u\u003d.5\u003ec?a/(o+i):a/(2-o-i),r\u003dn\u003d\u003do?(t-e)/a+(e\u003et?6:0):t\u003d\u003do?(e-n)/a+2:(n-t)/a+4,r*\u003d60):(r\u003d0/0,u\u003dc\u003e0\u0026\u00261\u003ec?0:r),K(r,u,c)}function yt(n,t,e){n\u003dxt(n),t\u003dxt(t),e\u003dxt(e);var r\u003dst((.4124564*n+.3575761*t+.1804375*e)/Fa),u\u003dst((.2126729*n+.7151522*t+.072175*e)/Oa),i\u003dst((.0193339*n+.119192*t+.9503041*e)/Ya);return ut(116*u-16,500*(r-u),200*(u-i))}function xt(n){return(n/\u003d255)\u003c\u003d.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function Mt(n){var t\u003dparseFloat(n);return\"%\"\u003d\u003d\u003dn.charAt(n.length-1)?Math.round(2.55*t):t}function _t(n){return\"function\"\u003d\u003dtypeof n?n:function(){return n}}function bt(n){return n}function wt(n){return function(t,e,r){return 2\u003d\u003d\u003darguments.length\u0026\u0026\"function\"\u003d\u003dtypeof e\u0026\u0026(r\u003de,e\u003dnull),St(t,e,n,r)}}function St(n,t,e,r){function u(){var n,t\u003dc.status;if(!t\u0026\u0026c.responseText||t\u003e\u003d200\u0026\u0026300\u003et||304\u003d\u003d\u003dt){try{n\u003de.call(i,c)}catch(r){return o.error.call(i,r),void 0}o.load.call(i,n)}else o.error.call(i,c)}var i\u003d{},o\u003dXo.dispatch(\"beforesend\",\"progress\",\"load\",\"error\"),a\u003d{},c\u003dnew XMLHttpRequest,s\u003dnull;return!Go.XDomainRequest||\"withCredentials\"in c||!/^(http(s)?:)?\\/\\//.test(n)||(c\u003dnew XDomainRequest),\"onload\"in c?c.onload\u003dc.onerror\u003du:c.onreadystatechange\u003dfunction(){c.readyState\u003e3\u0026\u0026u()},c.onprogress\u003dfunction(n){var t\u003dXo.event;Xo.event\u003dn;try{o.progress.call(i,c)}finally{Xo.event\u003dt}},i.header\u003dfunction(n,t){return n\u003d(n+\"\").toLowerCase(),arguments.length\u003c2?a[n]:(null\u003d\u003dt?delete a[n]:a[n]\u003dt+\"\",i)},i.mimeType\u003dfunction(n){return arguments.length?(t\u003dnull\u003d\u003dn?null:n+\"\",i):t},i.responseType\u003dfunction(n){return arguments.length?(s\u003dn,i):s},i.response\u003dfunction(n){return e\u003dn,i},[\"get\",\"post\"].forEach(function(n){i[n]\u003dfunction(){return i.send.apply(i,[n].concat(Bo(arguments)))}}),i.send\u003dfunction(e,r,u){if(2\u003d\u003d\u003darguments.length\u0026\u0026\"function\"\u003d\u003dtypeof r\u0026\u0026(u\u003dr,r\u003dnull),c.open(e,n,!0),null\u003d\u003dt||\"accept\"in a||(a.accept\u003dt+\",*/*\"),c.setRequestHeader)for(var l in a)c.setRequestHeader(l,a[l]);return null!\u003dt\u0026\u0026c.overrideMimeType\u0026\u0026c.overrideMimeType(t),null!\u003ds\u0026\u0026(c.responseType\u003ds),null!\u003du\u0026\u0026i.on(\"error\",u).on(\"load\",function(n){u(null,n)}),o.beforesend.call(i,c),c.send(null\u003d\u003dr?null:r),i},i.abort\u003dfunction(){return c.abort(),i},Xo.rebind(i,o,\"on\"),null\u003d\u003dr?i:i.get(kt(r))}function kt(n){return 1\u003d\u003d\u003dn.length?function(t,e){n(null\u003d\u003dt?e:null)}:n}function Et(){var n\u003dAt(),t\u003dCt()-n;t\u003e24?(isFinite(t)\u0026\u0026(clearTimeout(Wa),Wa\u003dsetTimeout(Et,t)),Ba\u003d0):(Ba\u003d1,Ga(Et))}function At(){var n\u003dDate.now();for(Ja\u003dXa;Ja;)n\u003e\u003dJa.t\u0026\u0026(Ja.f\u003dJa.c(n-Ja.t)),Ja\u003dJa.n;return n}function Ct(){for(var n,t\u003dXa,e\u003d1/0;t;)t.f?t\u003dn?n.n\u003dt.n:Xa\u003dt.n:(t.t\u003ce\u0026\u0026(e\u003dt.t),t\u003d(n\u003dt).n);return $a\u003dn,e}function Nt(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function Lt(n,t){var e\u003dMath.pow(10,3*oa(8-t));return{scale:t\u003e8?function(n){return n/e}:function(n){return n*e},symbol:n}}function zt(n){var t\u003dn.decimal,e\u003dn.thousands,r\u003dn.grouping,u\u003dn.currency,i\u003dr?function(n){for(var t\u003dn.length,u\u003d[],i\u003d0,o\u003dr[0];t\u003e0\u0026\u0026o\u003e0;)u.push(n.substring(t-\u003do,t+o)),o\u003dr[i\u003d(i+1)%r.length];return u.reverse().join(e)}:bt;return function(n){var e\u003dQa.exec(n),r\u003de[1]||\" \",o\u003de[2]||\"\u003e\",a\u003de[3]||\"\",c\u003de[4]||\"\",s\u003de[5],l\u003d+e[6],f\u003de[7],h\u003de[8],g\u003de[9],p\u003d1,v\u003d\"\",d\u003d\"\",m\u003d!1;switch(h\u0026\u0026(h\u003d+h.substring(1)),(s||\"0\"\u003d\u003d\u003dr\u0026\u0026\"\u003d\"\u003d\u003d\u003do)\u0026\u0026(s\u003dr\u003d\"0\",o\u003d\"\u003d\",f\u0026\u0026(l-\u003dMath.floor((l-1)/4))),g){case\"n\":f\u003d!0,g\u003d\"g\";break;case\"%\":p\u003d100,d\u003d\"%\",g\u003d\"f\";break;case\"p\":p\u003d100,d\u003d\"%\",g\u003d\"r\";break;case\"b\":case\"o\":case\"x\":case\"X\":\"#\"\u003d\u003d\u003dc\u0026\u0026(v\u003d\"0\"+g.toLowerCase());case\"c\":case\"d\":m\u003d!0,h\u003d0;break;case\"s\":p\u003d-1,g\u003d\"r\"}\"$\"\u003d\u003d\u003dc\u0026\u0026(v\u003du[0],d\u003du[1]),\"r\"!\u003dg||h||(g\u003d\"g\"),null!\u003dh\u0026\u0026(\"g\"\u003d\u003dg?h\u003dMath.max(1,Math.min(21,h)):(\"e\"\u003d\u003dg||\"f\"\u003d\u003dg)\u0026\u0026(h\u003dMath.max(0,Math.min(20,h)))),g\u003dnc.get(g)||qt;var y\u003ds\u0026\u0026f;return function(n){var e\u003dd;if(m\u0026\u0026n%1)return\"\";var u\u003d0\u003en||0\u003d\u003d\u003dn\u0026\u00260\u003e1/n?(n\u003d-n,\"-\"):a;if(0\u003ep){var c\u003dXo.formatPrefix(n,h);n\u003dc.scale(n),e\u003dc.symbol+d}else n*\u003dp;n\u003dg(n,h);var x\u003dn.lastIndexOf(\".\"),M\u003d0\u003ex?n:n.substring(0,x),_\u003d0\u003ex?\"\":t+n.substring(x+1);!s\u0026\u0026f\u0026\u0026(M\u003di(M));var b\u003dv.length+M.length+_.length+(y?0:u.length),w\u003dl\u003eb?new Array(b\u003dl-b+1).join(r):\"\";return y\u0026\u0026(M\u003di(w+M)),u+\u003dv,n\u003dM+_,(\"\u003c\"\u003d\u003d\u003do?u+n+w:\"\u003e\"\u003d\u003d\u003do?w+u+n:\"^\"\u003d\u003d\u003do?w.substring(0,b\u003e\u003e\u003d1)+u+n+w.substring(b):u+(y?n:w+n))+e}}}function qt(n){return n+\"\"}function Tt(){this._\u003dnew Date(arguments.length\u003e1?Date.UTC.apply(this,arguments):arguments[0])}function Rt(n,t,e){function r(t){var e\u003dn(t),r\u003di(e,1);return r-t\u003et-e?e:r}function u(e){return t(e\u003dn(new ec(e-1)),1),e}function i(n,e){return t(n\u003dnew ec(+n),e),n}function o(n,r,i){var o\u003du(n),a\u003d[];if(i\u003e1)for(;r\u003eo;)e(o)%i||a.push(new Date(+o)),t(o,1);else for(;r\u003eo;)a.push(new Date(+o)),t(o,1);return a}function a(n,t,e){try{ec\u003dTt;var r\u003dnew Tt;return r._\u003dn,o(r,t,e)}finally{ec\u003dDate}}n.floor\u003dn,n.round\u003dr,n.ceil\u003du,n.offset\u003di,n.range\u003do;var c\u003dn.utc\u003dDt(n);return c.floor\u003dc,c.round\u003dDt(r),c.ceil\u003dDt(u),c.offset\u003dDt(i),c.range\u003da,n}function Dt(n){return function(t,e){try{ec\u003dTt;var r\u003dnew Tt;return r._\u003dt,n(r,e)._}finally{ec\u003dDate}}}function Pt(n){function t(n){function t(t){for(var e,u,i,o\u003d[],a\u003d-1,c\u003d0;++a\u003cr;)37\u003d\u003d\u003dn.charCodeAt(a)\u0026\u0026(o.push(n.substring(c,a)),null!\u003d(u\u003duc[e\u003dn.charAt(++a)])\u0026\u0026(e\u003dn.charAt(++a)),(i\u003dC[e])\u0026\u0026(e\u003di(t,null\u003d\u003du?\"e\"\u003d\u003d\u003de?\" \":\"0\":u)),o.push(e),c\u003da+1);return o.push(n.substring(c,a)),o.join(\"\")}var r\u003dn.length;return t.parse\u003dfunction(t){var r\u003d{y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},u\u003de(r,n,t,0);if(u!\u003dt.length)return null;\"p\"in r\u0026\u0026(r.H\u003dr.H%12+12*r.p);var i\u003dnull!\u003dr.Z\u0026\u0026ec!\u003d\u003dTt,o\u003dnew(i?Tt:ec);return\"j\"in r?o.setFullYear(r.y,0,r.j):\"w\"in r\u0026\u0026(\"W\"in r||\"U\"in r)?(o.setFullYear(r.y,0,1),o.setFullYear(r.y,0,\"W\"in r?(r.w+6)%7+7*r.W-(o.getDay()+5)%7:r.w+7*r.U-(o.getDay()+6)%7)):o.setFullYear(r.y,r.m,r.d),o.setHours(r.H+Math.floor(r.Z/100),r.M+r.Z%100,r.S,r.L),i?o._:o},t.toString\u003dfunction(){return n},t}function e(n,t,e,r){for(var u,i,o,a\u003d0,c\u003dt.length,s\u003de.length;c\u003ea;){if(r\u003e\u003ds)return-1;if(u\u003dt.charCodeAt(a++),37\u003d\u003d\u003du){if(o\u003dt.charAt(a++),i\u003dN[o in uc?t.charAt(a++):o],!i||(r\u003di(n,e,r))\u003c0)return-1}else if(u!\u003de.charCodeAt(r++))return-1}return r}function r(n,t,e){b.lastIndex\u003d0;var r\u003db.exec(t.substring(e));return r?(n.w\u003dw.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){M.lastIndex\u003d0;var r\u003dM.exec(t.substring(e));return r?(n.w\u003d_.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){E.lastIndex\u003d0;var r\u003dE.exec(t.substring(e));return r?(n.m\u003dA.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,e){S.lastIndex\u003d0;var r\u003dS.exec(t.substring(e));return r?(n.m\u003dk.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,r){return e(n,C.c.toString(),t,r)}function c(n,t,r){return e(n,C.x.toString(),t,r)}function s(n,t,r){return e(n,C.X.toString(),t,r)}function l(n,t,e){var r\u003dx.get(t.substring(e,e+\u003d2).toLowerCase());return null\u003d\u003dr?-1:(n.p\u003dr,e)}var f\u003dn.dateTime,h\u003dn.date,g\u003dn.time,p\u003dn.periods,v\u003dn.days,d\u003dn.shortDays,m\u003dn.months,y\u003dn.shortMonths;t.utc\u003dfunction(n){function e(n){try{ec\u003dTt;var t\u003dnew ec;return t._\u003dn,r(t)}finally{ec\u003dDate}}var r\u003dt(n);return e.parse\u003dfunction(n){try{ec\u003dTt;var t\u003dr.parse(n);return t\u0026\u0026t._}finally{ec\u003dDate}},e.toString\u003dr.toString,e},t.multi\u003dt.utc.multi\u003dee;var x\u003dXo.map(),M\u003djt(v),_\u003dHt(v),b\u003djt(d),w\u003dHt(d),S\u003djt(m),k\u003dHt(m),E\u003djt(y),A\u003dHt(y);p.forEach(function(n,t){x.set(n.toLowerCase(),t)});var C\u003d{a:function(n){return d[n.getDay()]},A:function(n){return v[n.getDay()]},b:function(n){return y[n.getMonth()]},B:function(n){return m[n.getMonth()]},c:t(f),d:function(n,t){return Ut(n.getDate(),t,2)},e:function(n,t){return Ut(n.getDate(),t,2)},H:function(n,t){return Ut(n.getHours(),t,2)},I:function(n,t){return Ut(n.getHours()%12||12,t,2)},j:function(n,t){return Ut(1+tc.dayOfYear(n),t,3)},L:function(n,t){return Ut(n.getMilliseconds(),t,3)},m:function(n,t){return Ut(n.getMonth()+1,t,2)},M:function(n,t){return Ut(n.getMinutes(),t,2)},p:function(n){return p[+(n.getHours()\u003e\u003d12)]},S:function(n,t){return Ut(n.getSeconds(),t,2)},U:function(n,t){return Ut(tc.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Ut(tc.mondayOfYear(n),t,2)},x:t(h),X:t(g),y:function(n,t){return Ut(n.getFullYear()%100,t,2)},Y:function(n,t){return Ut(n.getFullYear()%1e4,t,4)},Z:ne,\"%\":function(){return\"%\"}},N\u003d{a:r,A:u,b:i,B:o,c:a,d:Bt,e:Bt,H:Jt,I:Jt,j:Wt,L:Qt,m:$t,M:Gt,p:l,S:Kt,U:Ot,w:Ft,W:Yt,x:c,X:s,y:Zt,Y:It,Z:Vt,\"%\":te};return t}function Ut(n,t,e){var r\u003d0\u003en?\"-\":\"\",u\u003d(r?-n:n)+\"\",i\u003du.length;return r+(e\u003ei?new Array(e-i+1).join(t)+u:u)}function jt(n){return new RegExp(\"^(?:\"+n.map(Xo.requote).join(\"|\")+\")\",\"i\")}function Ht(n){for(var t\u003dnew u,e\u003d-1,r\u003dn.length;++e\u003cr;)t.set(n[e].toLowerCase(),e);return t}function Ft(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+1));return r?(n.w\u003d+r[0],e+r[0].length):-1}function Ot(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e));return r?(n.U\u003d+r[0],e+r[0].length):-1}function Yt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e));return r?(n.W\u003d+r[0],e+r[0].length):-1}function It(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+4));return r?(n.y\u003d+r[0],e+r[0].length):-1}function Zt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+2));return r?(n.y\u003dXt(+r[0]),e+r[0].length):-1}function Vt(n,t,e){return/^[+-]\\d{4}$/.test(t\u003dt.substring(e,e+5))?(n.Z\u003d+t,e+5):-1}function Xt(n){return n+(n\u003e68?1900:2e3)}function $t(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+2));return r?(n.m\u003dr[0]-1,e+r[0].length):-1}function Bt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+2));return r?(n.d\u003d+r[0],e+r[0].length):-1}function Wt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+3));return r?(n.j\u003d+r[0],e+r[0].length):-1}function Jt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+2));return r?(n.H\u003d+r[0],e+r[0].length):-1}function Gt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+2));return r?(n.M\u003d+r[0],e+r[0].length):-1}function Kt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+2));return r?(n.S\u003d+r[0],e+r[0].length):-1}function Qt(n,t,e){ic.lastIndex\u003d0;var r\u003dic.exec(t.substring(e,e+3));return r?(n.L\u003d+r[0],e+r[0].length):-1}function ne(n){var t\u003dn.getTimezoneOffset(),e\u003dt\u003e0?\"-\":\"+\",r\u003d~~(oa(t)/60),u\u003doa(t)%60;return e+Ut(r,\"0\",2)+Ut(u,\"0\",2)}function te(n,t,e){oc.lastIndex\u003d0;var r\u003doc.exec(t.substring(e,e+1));return r?e+r[0].length:-1}function ee(n){for(var t\u003dn.length,e\u003d-1;++e\u003ct;)n[e][0]\u003dthis(n[e][0]);return function(t){for(var e\u003d0,r\u003dn[e];!r[1](t);)r\u003dn[++e];return r[0](t)}}function re(){}function ue(n,t,e){var r\u003de.s\u003dn+t,u\u003dr-n,i\u003dr-u;e.t\u003dn-i+(t-u)}function ie(n,t){n\u0026\u0026lc.hasOwnProperty(n.type)\u0026\u0026lc[n.type](n,t)}function oe(n,t,e){var r,u\u003d-1,i\u003dn.length-e;for(t.lineStart();++u\u003ci;)r\u003dn[u],t.point(r[0],r[1],r[2]);t.lineEnd()}function ae(n,t){var e\u003d-1,r\u003dn.length;for(t.polygonStart();++e\u003cr;)oe(n[e],t,1);t.polygonEnd()}function ce(){function n(n,t){n*\u003dNa,t\u003dt*Na/2+Sa/4;var e\u003dn-r,o\u003dMath.cos(t),a\u003dMath.sin(t),c\u003di*a,s\u003du*o+c*Math.cos(e),l\u003dc*Math.sin(e);hc.add(Math.atan2(l,s)),r\u003dn,u\u003do,i\u003da}var t,e,r,u,i;gc.point\u003dfunction(o,a){gc.point\u003dn,r\u003d(t\u003do)*Na,u\u003dMath.cos(a\u003d(e\u003da)*Na/2+Sa/4),i\u003dMath.sin(a)},gc.lineEnd\u003dfunction(){n(t,e)}}function se(n){var t\u003dn[0],e\u003dn[1],r\u003dMath.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function le(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function fe(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function he(n,t){n[0]+\u003dt[0],n[1]+\u003dt[1],n[2]+\u003dt[2]}function ge(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function pe(n){var t\u003dMath.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/\u003dt,n[1]/\u003dt,n[2]/\u003dt}function ve(n){return[Math.atan2(n[1],n[0]),X(n[2])]}function de(n,t){return oa(n[0]-t[0])\u003cAa\u0026\u0026oa(n[1]-t[1])\u003cAa}function me(n,t){n*\u003dNa;var e\u003dMath.cos(t*\u003dNa);ye(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function ye(n,t,e){++pc,dc+\u003d(n-dc)/pc,mc+\u003d(t-mc)/pc,yc+\u003d(e-yc)/pc}function xe(){function n(n,u){n*\u003dNa;var i\u003dMath.cos(u*\u003dNa),o\u003di*Math.cos(n),a\u003di*Math.sin(n),c\u003dMath.sin(u),s\u003dMath.atan2(Math.sqrt((s\u003de*c-r*a)*s+(s\u003dr*o-t*c)*s+(s\u003dt*a-e*o)*s),t*o+e*a+r*c);vc+\u003ds,xc+\u003ds*(t+(t\u003do)),Mc+\u003ds*(e+(e\u003da)),_c+\u003ds*(r+(r\u003dc)),ye(t,e,r)}var t,e,r;kc.point\u003dfunction(u,i){u*\u003dNa;var o\u003dMath.cos(i*\u003dNa);t\u003do*Math.cos(u),e\u003do*Math.sin(u),r\u003dMath.sin(i),kc.point\u003dn,ye(t,e,r)}}function Me(){kc.point\u003dme}function _e(){function n(n,t){n*\u003dNa;var e\u003dMath.cos(t*\u003dNa),o\u003de*Math.cos(n),a\u003de*Math.sin(n),c\u003dMath.sin(t),s\u003du*c-i*a,l\u003di*o-r*c,f\u003dr*a-u*o,h\u003dMath.sqrt(s*s+l*l+f*f),g\u003dr*o+u*a+i*c,p\u003dh\u0026\u0026-V(g)/h,v\u003dMath.atan2(h,g);bc+\u003dp*s,wc+\u003dp*l,Sc+\u003dp*f,vc+\u003dv,xc+\u003dv*(r+(r\u003do)),Mc+\u003dv*(u+(u\u003da)),_c+\u003dv*(i+(i\u003dc)),ye(r,u,i)}var t,e,r,u,i;kc.point\u003dfunction(o,a){t\u003do,e\u003da,kc.point\u003dn,o*\u003dNa;var c\u003dMath.cos(a*\u003dNa);r\u003dc*Math.cos(o),u\u003dc*Math.sin(o),i\u003dMath.sin(a),ye(r,u,i)},kc.lineEnd\u003dfunction(){n(t,e),kc.lineEnd\u003dMe,kc.point\u003dme}}function be(){return!0}function we(n,t,e,r,u){var i\u003d[],o\u003d[];if(n.forEach(function(n){if(!((t\u003dn.length-1)\u003c\u003d0)){var t,e\u003dn[0],r\u003dn[t];if(de(e,r)){u.lineStart();for(var a\u003d0;t\u003ea;++a)u.point((e\u003dn[a])[0],e[1]);return u.lineEnd(),void 0}var c\u003dnew ke(e,n,null,!0),s\u003dnew ke(e,null,c,!1);c.o\u003ds,i.push(c),o.push(s),c\u003dnew ke(r,n,null,!1),s\u003dnew ke(r,null,c,!0),c.o\u003ds,i.push(c),o.push(s)}}),o.sort(t),Se(i),Se(o),i.length){for(var a\u003d0,c\u003de,s\u003do.length;s\u003ea;++a)o[a].e\u003dc\u003d!c;for(var l,f,h\u003di[0];;){for(var g\u003dh,p\u003d!0;g.v;)if((g\u003dg.n)\u003d\u003d\u003dh)return;l\u003dg.z,u.lineStart();do{if(g.v\u003dg.o.v\u003d!0,g.e){if(p)for(var a\u003d0,s\u003dl.length;s\u003ea;++a)u.point((f\u003dl[a])[0],f[1]);else r(g.x,g.n.x,1,u);g\u003dg.n}else{if(p){l\u003dg.p.z;for(var a\u003dl.length-1;a\u003e\u003d0;--a)u.point((f\u003dl[a])[0],f[1])}else r(g.x,g.p.x,-1,u);g\u003dg.p}g\u003dg.o,l\u003dg.z,p\u003d!p}while(!g.v);u.lineEnd()}}}function Se(n){if(t\u003dn.length){for(var t,e,r\u003d0,u\u003dn[0];++r\u003ct;)u.n\u003de\u003dn[r],e.p\u003du,u\u003de;u.n\u003de\u003dn[0],e.p\u003du}}function ke(n,t,e,r){this.x\u003dn,this.z\u003dt,this.o\u003de,this.e\u003dr,this.v\u003d!1,this.n\u003dthis.p\u003dnull}function Ee(n,t,e,r){return function(u,i){function o(t,e){var r\u003du(t,e);n(t\u003dr[0],e\u003dr[1])\u0026\u0026i.point(t,e)}function a(n,t){var e\u003du(n,t);d.point(e[0],e[1])}function c(){y.point\u003da,d.lineStart()}function s(){y.point\u003do,d.lineEnd()}function l(n,t){v.push([n,t]);var e\u003du(n,t);M.point(e[0],e[1])}function f(){M.lineStart(),v\u003d[]}function h(){l(v[0][0],v[0][1]),M.lineEnd();var n,t\u003dM.clean(),e\u003dx.buffer(),r\u003de.length;if(v.pop(),p.push(v),v\u003dnull,r){if(1\u0026t){n\u003de[0];var u,r\u003dn.length-1,o\u003d-1;for(i.lineStart();++o\u003cr;)i.point((u\u003dn[o])[0],u[1]);return i.lineEnd(),void 0}r\u003e1\u0026\u00262\u0026t\u0026\u0026e.push(e.pop().concat(e.shift())),g.push(e.filter(Ae))}}var g,p,v,d\u003dt(i),m\u003du.invert(r[0],r[1]),y\u003d{point:o,lineStart:c,lineEnd:s,polygonStart:function(){y.point\u003dl,y.lineStart\u003df,y.lineEnd\u003dh,g\u003d[],p\u003d[],i.polygonStart()},polygonEnd:function(){y.point\u003do,y.lineStart\u003dc,y.lineEnd\u003ds,g\u003dXo.merge(g);var n\u003dLe(m,p);g.length?we(g,Ne,n,e,i):n\u0026\u0026(i.lineStart(),e(null,null,1,i),i.lineEnd()),i.polygonEnd(),g\u003dp\u003dnull},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}},x\u003dCe(),M\u003dt(x);return y}}function Ae(n){return n.length\u003e1}function Ce(){var n,t\u003d[];return{lineStart:function(){t.push(n\u003d[])},point:function(t,e){n.push([t,e])},lineEnd:g,buffer:function(){var e\u003dt;return t\u003d[],n\u003dnull,e},rejoin:function(){t.length\u003e1\u0026\u0026t.push(t.pop().concat(t.shift()))}}}function Ne(n,t){return((n\u003dn.x)[0]\u003c0?n[1]-Ea-Aa:Ea-n[1])-((t\u003dt.x)[0]\u003c0?t[1]-Ea-Aa:Ea-t[1])}function Le(n,t){var e\u003dn[0],r\u003dn[1],u\u003d[Math.sin(e),-Math.cos(e),0],i\u003d0,o\u003d0;hc.reset();for(var a\u003d0,c\u003dt.length;c\u003ea;++a){var s\u003dt[a],l\u003ds.length;if(l)for(var f\u003ds[0],h\u003df[0],g\u003df[1]/2+Sa/4,p\u003dMath.sin(g),v\u003dMath.cos(g),d\u003d1;;){d\u003d\u003d\u003dl\u0026\u0026(d\u003d0),n\u003ds[d];var m\u003dn[0],y\u003dn[1]/2+Sa/4,x\u003dMath.sin(y),M\u003dMath.cos(y),_\u003dm-h,b\u003doa(_)\u003eSa,w\u003dp*x;if(hc.add(Math.atan2(w*Math.sin(_),v*M+w*Math.cos(_))),i+\u003db?_+(_\u003e\u003d0?ka:-ka):_,b^h\u003e\u003de^m\u003e\u003de){var S\u003dfe(se(f),se(n));pe(S);var k\u003dfe(u,S);pe(k);var E\u003d(b^_\u003e\u003d0?-1:1)*X(k[2]);(r\u003eE||r\u003d\u003d\u003dE\u0026\u0026(S[0]||S[1]))\u0026\u0026(o+\u003db^_\u003e\u003d0?1:-1)}if(!d++)break;h\u003dm,p\u003dx,v\u003dM,f\u003dn}}return(-Aa\u003ei||Aa\u003ei\u0026\u00260\u003ehc)^1\u0026o}function ze(n){var t,e\u003d0/0,r\u003d0/0,u\u003d0/0;return{lineStart:function(){n.lineStart(),t\u003d1},point:function(i,o){var a\u003di\u003e0?Sa:-Sa,c\u003doa(i-e);oa(c-Sa)\u003cAa?(n.point(e,r\u003d(r+o)/2\u003e0?Ea:-Ea),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(i,r),t\u003d0):u!\u003d\u003da\u0026\u0026c\u003e\u003dSa\u0026\u0026(oa(e-u)\u003cAa\u0026\u0026(e-\u003du*Aa),oa(i-a)\u003cAa\u0026\u0026(i-\u003da*Aa),r\u003dqe(e,r,i,o),n.point(u,r),n.lineEnd(),n.lineStart(),n.point(a,r),t\u003d0),n.point(e\u003di,r\u003do),u\u003da},lineEnd:function(){n.lineEnd(),e\u003dr\u003d0/0},clean:function(){return 2-t}}}function qe(n,t,e,r){var u,i,o\u003dMath.sin(n-e);return oa(o)\u003eAa?Math.atan((Math.sin(t)*(i\u003dMath.cos(r))*Math.sin(e)-Math.sin(r)*(u\u003dMath.cos(t))*Math.sin(n))/(u*i*o)):(t+r)/2}function Te(n,t,e,r){var u;if(null\u003d\u003dn)u\u003de*Ea,r.point(-Sa,u),r.point(0,u),r.point(Sa,u),r.point(Sa,0),r.point(Sa,-u),r.point(0,-u),r.point(-Sa,-u),r.point(-Sa,0),r.point(-Sa,u);else if(oa(n[0]-t[0])\u003eAa){var i\u003dn[0]\u003ct[0]?Sa:-Sa;u\u003de*i/2,r.point(-i,u),r.point(0,u),r.point(i,u)}else r.point(t[0],t[1])}function Re(n){function t(n,t){return Math.cos(n)*Math.cos(t)\u003ei}function e(n){var e,i,c,s,l;return{lineStart:function(){s\u003dc\u003d!1,l\u003d1},point:function(f,h){var g,p\u003d[f,h],v\u003dt(f,h),d\u003do?v?0:u(f,h):v?u(f+(0\u003ef?Sa:-Sa),h):0;if(!e\u0026\u0026(s\u003dc\u003dv)\u0026\u0026n.lineStart(),v!\u003d\u003dc\u0026\u0026(g\u003dr(e,p),(de(e,g)||de(p,g))\u0026\u0026(p[0]+\u003dAa,p[1]+\u003dAa,v\u003dt(p[0],p[1]))),v!\u003d\u003dc)l\u003d0,v?(n.lineStart(),g\u003dr(p,e),n.point(g[0],g[1])):(g\u003dr(e,p),n.point(g[0],g[1]),n.lineEnd()),e\u003dg;else if(a\u0026\u0026e\u0026\u0026o^v){var m;d\u0026i||!(m\u003dr(p,e,!0))||(l\u003d0,o?(n.lineStart(),n.point(m[0][0],m[0][1]),n.point(m[1][0],m[1][1]),n.lineEnd()):(n.point(m[1][0],m[1][1]),n.lineEnd(),n.lineStart(),n.point(m[0][0],m[0][1])))}!v||e\u0026\u0026de(e,p)||n.point(p[0],p[1]),e\u003dp,c\u003dv,i\u003dd},lineEnd:function(){c\u0026\u0026n.lineEnd(),e\u003dnull},clean:function(){return l|(s\u0026\u0026c)\u003c\u003c1}}}function r(n,t,e){var r\u003dse(n),u\u003dse(t),o\u003d[1,0,0],a\u003dfe(r,u),c\u003dle(a,a),s\u003da[0],l\u003dc-s*s;if(!l)return!e\u0026\u0026n;var f\u003di*c/l,h\u003d-i*s/l,g\u003dfe(o,a),p\u003dge(o,f),v\u003dge(a,h);he(p,v);var d\u003dg,m\u003dle(p,d),y\u003dle(d,d),x\u003dm*m-y*(le(p,p)-1);if(!(0\u003ex)){var M\u003dMath.sqrt(x),_\u003dge(d,(-m-M)/y);if(he(_,p),_\u003dve(_),!e)return _;var b,w\u003dn[0],S\u003dt[0],k\u003dn[1],E\u003dt[1];w\u003eS\u0026\u0026(b\u003dw,w\u003dS,S\u003db);var A\u003dS-w,C\u003doa(A-Sa)\u003cAa,N\u003dC||Aa\u003eA;if(!C\u0026\u0026k\u003eE\u0026\u0026(b\u003dk,k\u003dE,E\u003db),N?C?k+E\u003e0^_[1]\u003c(oa(_[0]-w)\u003cAa?k:E):k\u003c\u003d_[1]\u0026\u0026_[1]\u003c\u003dE:A\u003eSa^(w\u003c\u003d_[0]\u0026\u0026_[0]\u003c\u003dS)){var L\u003dge(d,(-m+M)/y);return he(L,p),[_,ve(L)]}}}function u(t,e){var r\u003do?n:Sa-n,u\u003d0;return-r\u003et?u|\u003d1:t\u003er\u0026\u0026(u|\u003d2),-r\u003ee?u|\u003d4:e\u003er\u0026\u0026(u|\u003d8),u}var i\u003dMath.cos(n),o\u003di\u003e0,a\u003doa(i)\u003eAa,c\u003dcr(n,6*Na);return Ee(t,e,c,o?[0,-n]:[-Sa,n-Sa])}function De(n,t,e,r){return function(u){var i,o\u003du.a,a\u003du.b,c\u003do.x,s\u003do.y,l\u003da.x,f\u003da.y,h\u003d0,g\u003d1,p\u003dl-c,v\u003df-s;if(i\u003dn-c,p||!(i\u003e0)){if(i/\u003dp,0\u003ep){if(h\u003ei)return;g\u003ei\u0026\u0026(g\u003di)}else if(p\u003e0){if(i\u003eg)return;i\u003eh\u0026\u0026(h\u003di)}if(i\u003de-c,p||!(0\u003ei)){if(i/\u003dp,0\u003ep){if(i\u003eg)return;i\u003eh\u0026\u0026(h\u003di)}else if(p\u003e0){if(h\u003ei)return;g\u003ei\u0026\u0026(g\u003di)}if(i\u003dt-s,v||!(i\u003e0)){if(i/\u003dv,0\u003ev){if(h\u003ei)return;g\u003ei\u0026\u0026(g\u003di)}else if(v\u003e0){if(i\u003eg)return;i\u003eh\u0026\u0026(h\u003di)}if(i\u003dr-s,v||!(0\u003ei)){if(i/\u003dv,0\u003ev){if(i\u003eg)return;i\u003eh\u0026\u0026(h\u003di)}else if(v\u003e0){if(h\u003ei)return;g\u003ei\u0026\u0026(g\u003di)}return h\u003e0\u0026\u0026(u.a\u003d{x:c+h*p,y:s+h*v}),1\u003eg\u0026\u0026(u.b\u003d{x:c+g*p,y:s+g*v}),u}}}}}}function Pe(n,t,e,r){function u(r,u){return oa(r[0]-n)\u003cAa?u\u003e0?0:3:oa(r[0]-e)\u003cAa?u\u003e0?2:1:oa(r[1]-t)\u003cAa?u\u003e0?1:0:u\u003e0?3:2}function i(n,t){return o(n.x,t.x)}function o(n,t){var e\u003du(n,1),r\u003du(t,1);return e!\u003d\u003dr?e-r:0\u003d\u003d\u003de?t[1]-n[1]:1\u003d\u003d\u003de?n[0]-t[0]:2\u003d\u003d\u003de?n[1]-t[1]:t[0]-n[0]}return function(a){function c(n){for(var t\u003d0,e\u003dd.length,r\u003dn[1],u\u003d0;e\u003eu;++u)for(var i,o\u003d1,a\u003dd[u],c\u003da.length,s\u003da[0];c\u003eo;++o)i\u003da[o],s[1]\u003c\u003dr?i[1]\u003er\u0026\u0026Z(s,i,n)\u003e0\u0026\u0026++t:i[1]\u003c\u003dr\u0026\u0026Z(s,i,n)\u003c0\u0026\u0026--t,s\u003di;return 0!\u003d\u003dt}function s(i,a,c,s){var l\u003d0,f\u003d0;if(null\u003d\u003di||(l\u003du(i,c))!\u003d\u003d(f\u003du(a,c))||o(i,a)\u003c0^c\u003e0){do s.point(0\u003d\u003d\u003dl||3\u003d\u003d\u003dl?n:e,l\u003e1?r:t);while((l\u003d(l+c+4)%4)!\u003d\u003df)}else s.point(a[0],a[1])}function l(u,i){return u\u003e\u003dn\u0026\u0026e\u003e\u003du\u0026\u0026i\u003e\u003dt\u0026\u0026r\u003e\u003di}function f(n,t){l(n,t)\u0026\u0026a.point(n,t)}function h(){N.point\u003dp,d\u0026\u0026d.push(m\u003d[]),S\u003d!0,w\u003d!1,_\u003db\u003d0/0}function g(){v\u0026\u0026(p(y,x),M\u0026\u0026w\u0026\u0026A.rejoin(),v.push(A.buffer())),N.point\u003df,w\u0026\u0026a.lineEnd()}function p(n,t){n\u003dMath.max(-Ac,Math.min(Ac,n)),t\u003dMath.max(-Ac,Math.min(Ac,t));var e\u003dl(n,t);if(d\u0026\u0026m.push([n,t]),S)y\u003dn,x\u003dt,M\u003de,S\u003d!1,e\u0026\u0026(a.lineStart(),a.point(n,t));else if(e\u0026\u0026w)a.point(n,t);else{var r\u003d{a:{x:_,y:b},b:{x:n,y:t}};C(r)?(w||(a.lineStart(),a.point(r.a.x,r.a.y)),a.point(r.b.x,r.b.y),e||a.lineEnd(),k\u003d!1):e\u0026\u0026(a.lineStart(),a.point(n,t),k\u003d!1)}_\u003dn,b\u003dt,w\u003de}var v,d,m,y,x,M,_,b,w,S,k,E\u003da,A\u003dCe(),C\u003dDe(n,t,e,r),N\u003d{point:f,lineStart:h,lineEnd:g,polygonStart:function(){a\u003dA,v\u003d[],d\u003d[],k\u003d!0},polygonEnd:function(){a\u003dE,v\u003dXo.merge(v);var t\u003dc([n,r]),e\u003dk\u0026\u0026t,u\u003dv.length;(e||u)\u0026\u0026(a.polygonStart(),e\u0026\u0026(a.lineStart(),s(null,null,1,a),a.lineEnd()),u\u0026\u0026we(v,i,t,s,a),a.polygonEnd()),v\u003dd\u003dm\u003dnull}};return N}}function Ue(n,t){function e(e,r){return e\u003dn(e,r),t(e[0],e[1])}return n.invert\u0026\u0026t.invert\u0026\u0026(e.invert\u003dfunction(e,r){return e\u003dt.invert(e,r),e\u0026\u0026n.invert(e[0],e[1])}),e}function je(n){var t\u003d0,e\u003dSa/3,r\u003dnr(n),u\u003dr(t,e);return u.parallels\u003dfunction(n){return arguments.length?r(t\u003dn[0]*Sa/180,e\u003dn[1]*Sa/180):[180*(t/Sa),180*(e/Sa)]},u}function He(n,t){function e(n,t){var e\u003dMath.sqrt(i-2*u*Math.sin(t))/u;return[e*Math.sin(n*\u003du),o-e*Math.cos(n)]}var r\u003dMath.sin(n),u\u003d(r+Math.sin(t))/2,i\u003d1+r*(2*u-r),o\u003dMath.sqrt(i)/u;return e.invert\u003dfunction(n,t){var e\u003do-t;return[Math.atan2(n,e)/u,X((i-(n*n+e*e)*u*u)/(2*u))]},e}function Fe(){function n(n,t){Nc+\u003du*n-r*t,r\u003dn,u\u003dt}var t,e,r,u;Rc.point\u003dfunction(i,o){Rc.point\u003dn,t\u003dr\u003di,e\u003du\u003do},Rc.lineEnd\u003dfunction(){n(t,e)}}function Oe(n,t){Lc\u003en\u0026\u0026(Lc\u003dn),n\u003eqc\u0026\u0026(qc\u003dn),zc\u003et\u0026\u0026(zc\u003dt),t\u003eTc\u0026\u0026(Tc\u003dt)}function Ye(){function n(n,t){o.push(\"M\",n,\",\",t,i)}function t(n,t){o.push(\"M\",n,\",\",t),a.point\u003de}function e(n,t){o.push(\"L\",n,\",\",t)}function r(){a.point\u003dn}function u(){o.push(\"Z\")}var i\u003dIe(4.5),o\u003d[],a\u003d{point:n,lineStart:function(){a.point\u003dt},lineEnd:r,polygonStart:function(){a.lineEnd\u003du},polygonEnd:function(){a.lineEnd\u003dr,a.point\u003dn},pointRadius:function(n){return i\u003dIe(n),a},result:function(){if(o.length){var n\u003do.join(\"\");return o\u003d[],n}}};return a}function Ie(n){return\"m0,\"+n+\"a\"+n+\",\"+n+\" 0 1,1 0,\"+-2*n+\"a\"+n+\",\"+n+\" 0 1,1 0,\"+2*n+\"z\"}function Ze(n,t){dc+\u003dn,mc+\u003dt,++yc}function Ve(){function n(n,r){var u\u003dn-t,i\u003dr-e,o\u003dMath.sqrt(u*u+i*i);xc+\u003do*(t+n)/2,Mc+\u003do*(e+r)/2,_c+\u003do,Ze(t\u003dn,e\u003dr)}var t,e;Pc.point\u003dfunction(r,u){Pc.point\u003dn,Ze(t\u003dr,e\u003du)}}function Xe(){Pc.point\u003dZe}function $e(){function n(n,t){var e\u003dn-r,i\u003dt-u,o\u003dMath.sqrt(e*e+i*i);xc+\u003do*(r+n)/2,Mc+\u003do*(u+t)/2,_c+\u003do,o\u003du*n-r*t,bc+\u003do*(r+n),wc+\u003do*(u+t),Sc+\u003d3*o,Ze(r\u003dn,u\u003dt)}var t,e,r,u;Pc.point\u003dfunction(i,o){Pc.point\u003dn,Ze(t\u003dr\u003di,e\u003du\u003do)},Pc.lineEnd\u003dfunction(){n(t,e)}}function Be(n){function t(t,e){n.moveTo(t,e),n.arc(t,e,o,0,ka)}function e(t,e){n.moveTo(t,e),a.point\u003dr}function r(t,e){n.lineTo(t,e)}function u(){a.point\u003dt}function i(){n.closePath()}var o\u003d4.5,a\u003d{point:t,lineStart:function(){a.point\u003de},lineEnd:u,polygonStart:function(){a.lineEnd\u003di},polygonEnd:function(){a.lineEnd\u003du,a.point\u003dt},pointRadius:function(n){return o\u003dn,a},result:g};return a}function We(n){function t(n){return(a?r:e)(n)}function e(t){return Ke(t,function(e,r){e\u003dn(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e\u003dn(e,r),t.point(e[0],e[1])}function r(){x\u003d0/0,S.point\u003di,t.lineStart()}function i(e,r){var i\u003dse([e,r]),o\u003dn(e,r);u(x,M,y,_,b,w,x\u003do[0],M\u003do[1],y\u003de,_\u003di[0],b\u003di[1],w\u003di[2],a,t),t.point(x,M)}function o(){S.point\u003de,t.lineEnd()}function c(){r(),S.point\u003ds,S.lineEnd\u003dl}function s(n,t){i(f\u003dn,h\u003dt),g\u003dx,p\u003dM,v\u003d_,d\u003db,m\u003dw,S.point\u003di}function l(){u(x,M,y,_,b,w,g,p,f,v,d,m,a,t),S.lineEnd\u003do,o()}var f,h,g,p,v,d,m,y,x,M,_,b,w,S\u003d{point:e,lineStart:r,lineEnd:o,polygonStart:function(){t.polygonStart(),S.lineStart\u003dc},polygonEnd:function(){t.polygonEnd(),S.lineStart\u003dr}};return S}function u(t,e,r,a,c,s,l,f,h,g,p,v,d,m){var y\u003dl-t,x\u003df-e,M\u003dy*y+x*x;if(M\u003e4*i\u0026\u0026d--){var _\u003da+g,b\u003dc+p,w\u003ds+v,S\u003dMath.sqrt(_*_+b*b+w*w),k\u003dMath.asin(w/\u003dS),E\u003doa(oa(w)-1)\u003cAa||oa(r-h)\u003cAa?(r+h)/2:Math.atan2(b,_),A\u003dn(E,k),C\u003dA[0],N\u003dA[1],L\u003dC-t,z\u003dN-e,q\u003dx*L-y*z;(q*q/M\u003ei||oa((y*L+x*z)/M-.5)\u003e.3||o\u003ea*g+c*p+s*v)\u0026\u0026(u(t,e,r,a,c,s,C,N,E,_/\u003dS,b/\u003dS,w,d,m),m.point(C,N),u(C,N,E,_,b,w,l,f,h,g,p,v,d,m))}}var i\u003d.5,o\u003dMath.cos(30*Na),a\u003d16;return t.precision\u003dfunction(n){return arguments.length?(a\u003d(i\u003dn*n)\u003e0\u0026\u002616,t):Math.sqrt(i)},t}function Je(n){var t\u003dWe(function(t,e){return n([t*La,e*La])});return function(n){return tr(t(n))}}function Ge(n){this.stream\u003dn}function Ke(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function Qe(n){return nr(function(){return n})()}function nr(n){function t(n){return n\u003da(n[0]*Na,n[1]*Na),[n[0]*h+c,s-n[1]*h]}function e(n){return n\u003da.invert((n[0]-c)/h,(s-n[1])/h),n\u0026\u0026[n[0]*La,n[1]*La]}function r(){a\u003dUe(o\u003dur(m,y,x),i);var n\u003di(v,d);return c\u003dg-n[0]*h,s\u003dp+n[1]*h,u()}function u(){return l\u0026\u0026(l.valid\u003d!1,l\u003dnull),t}var i,o,a,c,s,l,f\u003dWe(function(n,t){return n\u003di(n,t),[n[0]*h+c,s-n[1]*h]}),h\u003d150,g\u003d480,p\u003d250,v\u003d0,d\u003d0,m\u003d0,y\u003d0,x\u003d0,M\u003dEc,_\u003dbt,b\u003dnull,w\u003dnull;return t.stream\u003dfunction(n){return l\u0026\u0026(l.valid\u003d!1),l\u003dtr(M(o,f(_(n)))),l.valid\u003d!0,l},t.clipAngle\u003dfunction(n){return arguments.length?(M\u003dnull\u003d\u003dn?(b\u003dn,Ec):Re((b\u003d+n)*Na),u()):b"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "},t.clipExtent\u003dfunction(n){return arguments.length?(w\u003dn,_\u003dn?Pe(n[0][0],n[0][1],n[1][0],n[1][1]):bt,u()):w},t.scale\u003dfunction(n){return arguments.length?(h\u003d+n,r()):h},t.translate\u003dfunction(n){return arguments.length?(g\u003d+n[0],p\u003d+n[1],r()):[g,p]},t.center\u003dfunction(n){return arguments.length?(v\u003dn[0]%360*Na,d\u003dn[1]%360*Na,r()):[v*La,d*La]},t.rotate\u003dfunction(n){return arguments.length?(m\u003dn[0]%360*Na,y\u003dn[1]%360*Na,x\u003dn.length\u003e2?n[2]%360*Na:0,r()):[m*La,y*La,x*La]},Xo.rebind(t,f,\"precision\"),function(){return i\u003dn.apply(this,arguments),t.invert\u003di.invert\u0026\u0026e,r()}}function tr(n){return Ke(n,function(t,e){n.point(t*Na,e*Na)})}function er(n,t){return[n,t]}function rr(n,t){return[n\u003eSa?n-ka:-Sa\u003en?n+ka:n,t]}function ur(n,t,e){return n?t||e?Ue(or(n),ar(t,e)):or(n):t||e?ar(t,e):rr}function ir(n){return function(t,e){return t+\u003dn,[t\u003eSa?t-ka:-Sa\u003et?t+ka:t,e]}}function or(n){var t\u003dir(n);return t.invert\u003dir(-n),t}function ar(n,t){function e(n,t){var e\u003dMath.cos(t),a\u003dMath.cos(n)*e,c\u003dMath.sin(n)*e,s\u003dMath.sin(t),l\u003ds*r+a*u;return[Math.atan2(c*i-l*o,a*r-s*u),X(l*i+c*o)]}var r\u003dMath.cos(n),u\u003dMath.sin(n),i\u003dMath.cos(t),o\u003dMath.sin(t);return e.invert\u003dfunction(n,t){var e\u003dMath.cos(t),a\u003dMath.cos(n)*e,c\u003dMath.sin(n)*e,s\u003dMath.sin(t),l\u003ds*i-c*o;return[Math.atan2(c*i+s*o,a*r+l*u),X(l*r-a*u)]},e}function cr(n,t){var e\u003dMath.cos(n),r\u003dMath.sin(n);return function(u,i,o,a){var c\u003do*t;null!\u003du?(u\u003dsr(e,u),i\u003dsr(e,i),(o\u003e0?i\u003eu:u\u003ei)\u0026\u0026(u+\u003do*ka)):(u\u003dn+o*ka,i\u003dn-.5*c);for(var s,l\u003du;o\u003e0?l\u003ei:i\u003el;l-\u003dc)a.point((s\u003dve([e,-r*Math.cos(l),-r*Math.sin(l)]))[0],s[1])}}function sr(n,t){var e\u003dse(t);e[0]-\u003dn,pe(e);var r\u003dV(-e[1]);return((-e[2]\u003c0?-r:r)+2*Math.PI-Aa)%(2*Math.PI)}function lr(n,t,e){var r\u003dXo.range(n,t-Aa,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function fr(n,t,e){var r\u003dXo.range(n,t-Aa,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function hr(n){return n.source}function gr(n){return n.target}function pr(n,t,e,r){var u\u003dMath.cos(t),i\u003dMath.sin(t),o\u003dMath.cos(r),a\u003dMath.sin(r),c\u003du*Math.cos(n),s\u003du*Math.sin(n),l\u003do*Math.cos(e),f\u003do*Math.sin(e),h\u003d2*Math.asin(Math.sqrt(J(r-t)+u*o*J(e-n))),g\u003d1/Math.sin(h),p\u003dh?function(n){var t\u003dMath.sin(n*\u003dh)*g,e\u003dMath.sin(h-n)*g,r\u003de*c+t*l,u\u003de*s+t*f,o\u003de*i+t*a;return[Math.atan2(u,r)*La,Math.atan2(o,Math.sqrt(r*r+u*u))*La]}:function(){return[n*La,t*La]};return p.distance\u003dh,p}function vr(){function n(n,u){var i\u003dMath.sin(u*\u003dNa),o\u003dMath.cos(u),a\u003doa((n*\u003dNa)-t),c\u003dMath.cos(a);Uc+\u003dMath.atan2(Math.sqrt((a\u003do*Math.sin(a))*a+(a\u003dr*i-e*o*c)*a),e*i+r*o*c),t\u003dn,e\u003di,r\u003do}var t,e,r;jc.point\u003dfunction(u,i){t\u003du*Na,e\u003dMath.sin(i*\u003dNa),r\u003dMath.cos(i),jc.point\u003dn},jc.lineEnd\u003dfunction(){jc.point\u003djc.lineEnd\u003dg}}function dr(n,t){function e(t,e){var r\u003dMath.cos(t),u\u003dMath.cos(e),i\u003dn(r*u);return[i*u*Math.sin(t),i*Math.sin(e)]}return e.invert\u003dfunction(n,e){var r\u003dMath.sqrt(n*n+e*e),u\u003dt(r),i\u003dMath.sin(u),o\u003dMath.cos(u);return[Math.atan2(n*i,r*o),Math.asin(r\u0026\u0026e*i/r)]},e}function mr(n,t){function e(n,t){var e\u003doa(oa(t)-Ea)\u003cAa?0:o/Math.pow(u(t),i);return[e*Math.sin(i*n),o-e*Math.cos(i*n)]}var r\u003dMath.cos(n),u\u003dfunction(n){return Math.tan(Sa/4+n/2)},i\u003dn\u003d\u003d\u003dt?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(u(t)/u(n)),o\u003dr*Math.pow(u(n),i)/i;return i?(e.invert\u003dfunction(n,t){var e\u003do-t,r\u003dI(i)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/i,2*Math.atan(Math.pow(o/r,1/i))-Ea]},e):xr}function yr(n,t){function e(n,t){var e\u003di-t;return[e*Math.sin(u*n),i-e*Math.cos(u*n)]}var r\u003dMath.cos(n),u\u003dn\u003d\u003d\u003dt?Math.sin(n):(r-Math.cos(t))/(t-n),i\u003dr/u+n;return oa(u)\u003cAa?er:(e.invert\u003dfunction(n,t){var e\u003di-t;return[Math.atan2(n,e)/u,i-I(u)*Math.sqrt(n*n+e*e)]},e)}function xr(n,t){return[n,Math.log(Math.tan(Sa/4+t/2))]}function Mr(n){var t,e\u003dQe(n),r\u003de.scale,u\u003de.translate,i\u003de.clipExtent;return e.scale\u003dfunction(){var n\u003dr.apply(e,arguments);return n\u003d\u003d\u003de?t?e.clipExtent(null):e:n},e.translate\u003dfunction(){var n\u003du.apply(e,arguments);return n\u003d\u003d\u003de?t?e.clipExtent(null):e:n},e.clipExtent\u003dfunction(n){var o\u003di.apply(e,arguments);if(o\u003d\u003d\u003de){if(t\u003dnull\u003d\u003dn){var a\u003dSa*r(),c\u003du();i([[c[0]-a,c[1]-a],[c[0]+a,c[1]+a]])}}else t\u0026\u0026(o\u003dnull);return o},e.clipExtent(null)}function _r(n,t){return[Math.log(Math.tan(Sa/4+t/2)),-n]}function br(n){return n[0]}function wr(n){return n[1]}function Sr(n){for(var t\u003dn.length,e\u003d[0,1],r\u003d2,u\u003d2;t\u003eu;u++){for(;r\u003e1\u0026\u0026Z(n[e[r-2]],n[e[r-1]],n[u])\u003c\u003d0;)--r;e[r++]\u003du}return e.slice(0,r)}function kr(n,t){return n[0]-t[0]||n[1]-t[1]}function Er(n,t,e){return(e[0]-t[0])*(n[1]-t[1])\u003c(e[1]-t[1])*(n[0]-t[0])}function Ar(n,t,e,r){var u\u003dn[0],i\u003de[0],o\u003dt[0]-u,a\u003dr[0]-i,c\u003dn[1],s\u003de[1],l\u003dt[1]-c,f\u003dr[1]-s,h\u003d(a*(c-s)-f*(u-i))/(f*o-a*l);return[u+h*o,c+h*l]}function Cr(n){var t\u003dn[0],e\u003dn[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Nr(){Jr(this),this.edge\u003dthis.site\u003dthis.circle\u003dnull}function Lr(n){var t\u003dJc.pop()||new Nr;return t.site\u003dn,t}function zr(n){Or(n),$c.remove(n),Jc.push(n),Jr(n)}function qr(n){var t\u003dn.circle,e\u003dt.x,r\u003dt.cy,u\u003d{x:e,y:r},i\u003dn.P,o\u003dn.N,a\u003d[n];zr(n);for(var c\u003di;c.circle\u0026\u0026oa(e-c.circle.x)\u003cAa\u0026\u0026oa(r-c.circle.cy)\u003cAa;)i\u003dc.P,a.unshift(c),zr(c),c\u003di;a.unshift(c),Or(c);for(var s\u003do;s.circle\u0026\u0026oa(e-s.circle.x)\u003cAa\u0026\u0026oa(r-s.circle.cy)\u003cAa;)o\u003ds.N,a.push(s),zr(s),s\u003do;a.push(s),Or(s);var l,f\u003da.length;for(l\u003d1;f\u003el;++l)s\u003da[l],c\u003da[l-1],$r(s.edge,c.site,s.site,u);c\u003da[0],s\u003da[f-1],s.edge\u003dVr(c.site,s.site,null,u),Fr(c),Fr(s)}function Tr(n){for(var t,e,r,u,i\u003dn.x,o\u003dn.y,a\u003d$c._;a;)if(r\u003dRr(a,o)-i,r\u003eAa)a\u003da.L;else{if(u\u003di-Dr(a,o),!(u\u003eAa)){r\u003e-Aa?(t\u003da.P,e\u003da):u\u003e-Aa?(t\u003da,e\u003da.N):t\u003de\u003da;break}if(!a.R){t\u003da;break}a\u003da.R}var c\u003dLr(n);if($c.insert(t,c),t||e){if(t\u003d\u003d\u003de)return Or(t),e\u003dLr(t.site),$c.insert(c,e),c.edge\u003de.edge\u003dVr(t.site,c.site),Fr(t),Fr(e),void 0;if(!e)return c.edge\u003dVr(t.site,c.site),void 0;Or(t),Or(e);var s\u003dt.site,l\u003ds.x,f\u003ds.y,h\u003dn.x-l,g\u003dn.y-f,p\u003de.site,v\u003dp.x-l,d\u003dp.y-f,m\u003d2*(h*d-g*v),y\u003dh*h+g*g,x\u003dv*v+d*d,M\u003d{x:(d*y-g*x)/m+l,y:(h*x-v*y)/m+f};$r(e.edge,s,p,M),c.edge\u003dVr(s,n,null,M),e.edge\u003dVr(n,p,null,M),Fr(t),Fr(e)}}function Rr(n,t){var e\u003dn.site,r\u003de.x,u\u003de.y,i\u003du-t;if(!i)return r;var o\u003dn.P;if(!o)return-1/0;e\u003do.site;var a\u003de.x,c\u003de.y,s\u003dc-t;if(!s)return a;var l\u003da-r,f\u003d1/i-1/s,h\u003dl/s;return f?(-h+Math.sqrt(h*h-2*f*(l*l/(-2*s)-c+s/2+u-i/2)))/f+r:(r+a)/2}function Dr(n,t){var e\u003dn.N;if(e)return Rr(e,t);var r\u003dn.site;return r.y\u003d\u003d\u003dt?r.x:1/0}function Pr(n){this.site\u003dn,this.edges\u003d[]}function Ur(n){for(var t,e,r,u,i,o,a,c,s,l,f\u003dn[0][0],h\u003dn[1][0],g\u003dn[0][1],p\u003dn[1][1],v\u003dXc,d\u003dv.length;d--;)if(i\u003dv[d],i\u0026\u0026i.prepare())for(a\u003di.edges,c\u003da.length,o\u003d0;c\u003eo;)l\u003da[o].end(),r\u003dl.x,u\u003dl.y,s\u003da[++o%c].start(),t\u003ds.x,e\u003ds.y,(oa(r-t)\u003eAa||oa(u-e)\u003eAa)\u0026\u0026(a.splice(o,0,new Br(Xr(i.site,l,oa(r-f)\u003cAa\u0026\u0026p-u\u003eAa?{x:f,y:oa(t-f)\u003cAa?e:p}:oa(u-p)\u003cAa\u0026\u0026h-r\u003eAa?{x:oa(e-p)\u003cAa?t:h,y:p}:oa(r-h)\u003cAa\u0026\u0026u-g\u003eAa?{x:h,y:oa(t-h)\u003cAa?e:g}:oa(u-g)\u003cAa\u0026\u0026r-f\u003eAa?{x:oa(e-g)\u003cAa?t:f,y:g}:null),i.site,null)),++c)}function jr(n,t){return t.angle-n.angle}function Hr(){Jr(this),this.x\u003dthis.y\u003dthis.arc\u003dthis.site\u003dthis.cy\u003dnull}function Fr(n){var t\u003dn.P,e\u003dn.N;if(t\u0026\u0026e){var r\u003dt.site,u\u003dn.site,i\u003de.site;if(r!\u003d\u003di){var o\u003du.x,a\u003du.y,c\u003dr.x-o,s\u003dr.y-a,l\u003di.x-o,f\u003di.y-a,h\u003d2*(c*f-s*l);if(!(h\u003e\u003d-Ca)){var g\u003dc*c+s*s,p\u003dl*l+f*f,v\u003d(f*g-s*p)/h,d\u003d(c*p-l*g)/h,f\u003dd+a,m\u003dGc.pop()||new Hr;m.arc\u003dn,m.site\u003du,m.x\u003dv+o,m.y\u003df+Math.sqrt(v*v+d*d),m.cy\u003df,n.circle\u003dm;for(var y\u003dnull,x\u003dWc._;x;)if(m.y\u003cx.y||m.y\u003d\u003d\u003dx.y\u0026\u0026m.x\u003c\u003dx.x){if(!x.L){y\u003dx.P;break}x\u003dx.L}else{if(!x.R){y\u003dx;break}x\u003dx.R}Wc.insert(y,m),y||(Bc\u003dm)}}}}function Or(n){var t\u003dn.circle;t\u0026\u0026(t.P||(Bc\u003dt.N),Wc.remove(t),Gc.push(t),Jr(t),n.circle\u003dnull)}function Yr(n){for(var t,e\u003dVc,r\u003dDe(n[0][0],n[0][1],n[1][0],n[1][1]),u\u003de.length;u--;)t\u003de[u],(!Ir(t,n)||!r(t)||oa(t.a.x-t.b.x)\u003cAa\u0026\u0026oa(t.a.y-t.b.y)\u003cAa)\u0026\u0026(t.a\u003dt.b\u003dnull,e.splice(u,1))}function Ir(n,t){var e\u003dn.b;if(e)return!0;var r,u,i\u003dn.a,o\u003dt[0][0],a\u003dt[1][0],c\u003dt[0][1],s\u003dt[1][1],l\u003dn.l,f\u003dn.r,h\u003dl.x,g\u003dl.y,p\u003df.x,v\u003df.y,d\u003d(h+p)/2,m\u003d(g+v)/2;if(v\u003d\u003d\u003dg){if(o\u003ed||d\u003e\u003da)return;if(h\u003ep){if(i){if(i.y\u003e\u003ds)return}else i\u003d{x:d,y:c};e\u003d{x:d,y:s}}else{if(i){if(i.y\u003cc)return}else i\u003d{x:d,y:s};e\u003d{x:d,y:c}}}else if(r\u003d(h-p)/(v-g),u\u003dm-r*d,-1\u003er||r\u003e1)if(h\u003ep){if(i){if(i.y\u003e\u003ds)return}else i\u003d{x:(c-u)/r,y:c};e\u003d{x:(s-u)/r,y:s}}else{if(i){if(i.y\u003cc)return}else i\u003d{x:(s-u)/r,y:s};e\u003d{x:(c-u)/r,y:c}}else if(v\u003eg){if(i){if(i.x\u003e\u003da)return}else i\u003d{x:o,y:r*o+u};e\u003d{x:a,y:r*a+u}}else{if(i){if(i.x\u003co)return}else i\u003d{x:a,y:r*a+u};e\u003d{x:o,y:r*o+u}}return n.a\u003di,n.b\u003de,!0}function Zr(n,t){this.l\u003dn,this.r\u003dt,this.a\u003dthis.b\u003dnull}function Vr(n,t,e,r){var u\u003dnew Zr(n,t);return Vc.push(u),e\u0026\u0026$r(u,n,t,e),r\u0026\u0026$r(u,t,n,r),Xc[n.i].edges.push(new Br(u,n,t)),Xc[t.i].edges.push(new Br(u,t,n)),u}function Xr(n,t,e){var r\u003dnew Zr(n,null);return r.a\u003dt,r.b\u003de,Vc.push(r),r}function $r(n,t,e,r){n.a||n.b?n.l\u003d\u003d\u003de?n.b\u003dr:n.a\u003dr:(n.a\u003dr,n.l\u003dt,n.r\u003de)}function Br(n,t,e){var r\u003dn.a,u\u003dn.b;this.edge\u003dn,this.site\u003dt,this.angle\u003de?Math.atan2(e.y-t.y,e.x-t.x):n.l\u003d\u003d\u003dt?Math.atan2(u.x-r.x,r.y-u.y):Math.atan2(r.x-u.x,u.y-r.y)}function Wr(){this._\u003dnull}function Jr(n){n.U\u003dn.C\u003dn.L\u003dn.R\u003dn.P\u003dn.N\u003dnull}function Gr(n,t){var e\u003dt,r\u003dt.R,u\u003de.U;u?u.L\u003d\u003d\u003de?u.L\u003dr:u.R\u003dr:n._\u003dr,r.U\u003du,e.U\u003dr,e.R\u003dr.L,e.R\u0026\u0026(e.R.U\u003de),r.L\u003de}function Kr(n,t){var e\u003dt,r\u003dt.L,u\u003de.U;u?u.L\u003d\u003d\u003de?u.L\u003dr:u.R\u003dr:n._\u003dr,r.U\u003du,e.U\u003dr,e.L\u003dr.R,e.L\u0026\u0026(e.L.U\u003de),r.R\u003de}function Qr(n){for(;n.L;)n\u003dn.L;return n}function nu(n,t){var e,r,u,i\u003dn.sort(tu).pop();for(Vc\u003d[],Xc\u003dnew Array(n.length),$c\u003dnew Wr,Wc\u003dnew Wr;;)if(u\u003dBc,i\u0026\u0026(!u||i.y\u003cu.y||i.y\u003d\u003d\u003du.y\u0026\u0026i.x\u003cu.x))(i.x!\u003d\u003de||i.y!\u003d\u003dr)\u0026\u0026(Xc[i.i]\u003dnew Pr(i),Tr(i),e\u003di.x,r\u003di.y),i\u003dn.pop();else{if(!u)break;qr(u.arc)}t\u0026\u0026(Yr(t),Ur(t));var o\u003d{cells:Xc,edges:Vc};return $c\u003dWc\u003dVc\u003dXc\u003dnull,o}function tu(n,t){return t.y-n.y||t.x-n.x}function eu(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function ru(n){return n.x}function uu(n){return n.y}function iu(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function ou(n,t,e,r,u,i){if(!n(t,e,r,u,i)){var o\u003d.5*(e+u),a\u003d.5*(r+i),c\u003dt.nodes;c[0]\u0026\u0026ou(n,c[0],e,r,o,a),c[1]\u0026\u0026ou(n,c[1],o,r,u,a),c[2]\u0026\u0026ou(n,c[2],e,a,o,i),c[3]\u0026\u0026ou(n,c[3],o,a,u,i)}}function au(n,t){n\u003dXo.rgb(n),t\u003dXo.rgb(t);var e\u003dn.r,r\u003dn.g,u\u003dn.b,i\u003dt.r-e,o\u003dt.g-r,a\u003dt.b-u;return function(n){return\"#\"+vt(Math.round(e+i*n))+vt(Math.round(r+o*n))+vt(Math.round(u+a*n))}}function cu(n,t){var e,r\u003d{},u\u003d{};for(e in n)e in t?r[e]\u003dfu(n[e],t[e]):u[e]\u003dn[e];for(e in t)e in n||(u[e]\u003dt[e]);return function(n){for(e in r)u[e]\u003dr[e](n);return u}}function su(n,t){return t-\u003dn\u003d+n,function(e){return n+t*e}}function lu(n,t){var e,r,u,i,o,a\u003d0,c\u003d0,s\u003d[],l\u003d[];for(n+\u003d\"\",t+\u003d\"\",Qc.lastIndex\u003d0,r\u003d0;e\u003dQc.exec(t);++r)e.index\u0026\u0026s.push(t.substring(a,c\u003de.index)),l.push({i:s.length,x:e[0]}),s.push(null),a\u003dQc.lastIndex;for(a\u003ct.length\u0026\u0026s.push(t.substring(a)),r\u003d0,i\u003dl.length;(e\u003dQc.exec(n))\u0026\u0026i\u003er;++r)if(o\u003dl[r],o.x\u003d\u003de[0]){if(o.i)if(null\u003d\u003ds[o.i+1])for(s[o.i-1]+\u003do.x,s.splice(o.i,1),u\u003dr+1;i\u003eu;++u)l[u].i--;else for(s[o.i-1]+\u003do.x+s[o.i+1],s.splice(o.i,2),u\u003dr+1;i\u003eu;++u)l[u].i-\u003d2;else if(null\u003d\u003ds[o.i+1])s[o.i]\u003do.x;else for(s[o.i]\u003do.x+s[o.i+1],s.splice(o.i+1,1),u\u003dr+1;i\u003eu;++u)l[u].i--;l.splice(r,1),i--,r--}else o.x\u003dsu(parseFloat(e[0]),parseFloat(o.x));for(;i\u003er;)o\u003dl.pop(),null\u003d\u003ds[o.i+1]?s[o.i]\u003do.x:(s[o.i]\u003do.x+s[o.i+1],s.splice(o.i+1,1)),i--;return 1\u003d\u003d\u003ds.length?null\u003d\u003ds[0]?(o\u003dl[0].x,function(n){return o(n)+\"\"}):function(){return t}:function(n){for(r\u003d0;i\u003er;++r)s[(o\u003dl[r]).i]\u003do.x(n);return s.join(\"\")}}function fu(n,t){for(var e,r\u003dXo.interpolators.length;--r\u003e\u003d0\u0026\u0026!(e\u003dXo.interpolators[r](n,t)););return e}function hu(n,t){var e,r\u003d[],u\u003d[],i\u003dn.length,o\u003dt.length,a\u003dMath.min(n.length,t.length);for(e\u003d0;a\u003ee;++e)r.push(fu(n[e],t[e]));for(;i\u003ee;++e)u[e]\u003dn[e];for(;o\u003ee;++e)u[e]\u003dt[e];return function(n){for(e\u003d0;a\u003ee;++e)u[e]\u003dr[e](n);return u}}function gu(n){return function(t){return 0\u003e\u003dt?0:t\u003e\u003d1?1:n(t)}}function pu(n){return function(t){return 1-n(1-t)}}function vu(n){return function(t){return.5*(.5\u003et?n(2*t):2-n(2-2*t))}}function du(n){return n*n}function mu(n){return n*n*n}function yu(n){if(0\u003e\u003dn)return 0;if(n\u003e\u003d1)return 1;var t\u003dn*n,e\u003dt*n;return 4*(.5\u003en?e:3*(n-t)+e-.75)}function xu(n){return function(t){return Math.pow(t,n)}}function Mu(n){return 1-Math.cos(n*Ea)}function _u(n){return Math.pow(2,10*(n-1))}function bu(n){return 1-Math.sqrt(1-n*n)}function wu(n,t){var e;return arguments.length\u003c2\u0026\u0026(t\u003d.45),arguments.length?e\u003dt/ka*Math.asin(1/n):(n\u003d1,e\u003dt/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*ka/t)}}function Su(n){return n||(n\u003d1.70158),function(t){return t*t*((n+1)*t-n)}}function ku(n){return 1/2.75\u003en?7.5625*n*n:2/2.75\u003en?7.5625*(n-\u003d1.5/2.75)*n+.75:2.5/2.75\u003en?7.5625*(n-\u003d2.25/2.75)*n+.9375:7.5625*(n-\u003d2.625/2.75)*n+.984375}function Eu(n,t){n\u003dXo.hcl(n),t\u003dXo.hcl(t);var e\u003dn.h,r\u003dn.c,u\u003dn.l,i\u003dt.h-e,o\u003dt.c-r,a\u003dt.l-u;return isNaN(o)\u0026\u0026(o\u003d0,r\u003disNaN(r)?t.c:r),isNaN(i)?(i\u003d0,e\u003disNaN(e)?t.h:e):i\u003e180?i-\u003d360:-180\u003ei\u0026\u0026(i+\u003d360),function(n){return rt(e+i*n,r+o*n,u+a*n)+\"\"}}function Au(n,t){n\u003dXo.hsl(n),t\u003dXo.hsl(t);var e\u003dn.h,r\u003dn.s,u\u003dn.l,i\u003dt.h-e,o\u003dt.s-r,a\u003dt.l-u;return isNaN(o)\u0026\u0026(o\u003d0,r\u003disNaN(r)?t.s:r),isNaN(i)?(i\u003d0,e\u003disNaN(e)?t.h:e):i\u003e180?i-\u003d360:-180\u003ei\u0026\u0026(i+\u003d360),function(n){return nt(e+i*n,r+o*n,u+a*n)+\"\"}}function Cu(n,t){n\u003dXo.lab(n),t\u003dXo.lab(t);var e\u003dn.l,r\u003dn.a,u\u003dn.b,i\u003dt.l-e,o\u003dt.a-r,a\u003dt.b-u;return function(n){return ot(e+i*n,r+o*n,u+a*n)+\"\"}}function Nu(n,t){return t-\u003dn,function(e){return Math.round(n+t*e)}}function Lu(n){var t\u003d[n.a,n.b],e\u003d[n.c,n.d],r\u003dqu(t),u\u003dzu(t,e),i\u003dqu(Tu(e,t,-u))||0;t[0]*e[1]\u003ce[0]*t[1]\u0026\u0026(t[0]*\u003d-1,t[1]*\u003d-1,r*\u003d-1,u*\u003d-1),this.rotate\u003d(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*La,this.translate\u003d[n.e,n.f],this.scale\u003d[r,i],this.skew\u003di?Math.atan2(u,i)*La:0}function zu(n,t){return n[0]*t[0]+n[1]*t[1]}function qu(n){var t\u003dMath.sqrt(zu(n,n));return t\u0026\u0026(n[0]/\u003dt,n[1]/\u003dt),t}function Tu(n,t,e){return n[0]+\u003de*t[0],n[1]+\u003de*t[1],n}function Ru(n,t){var e,r\u003d[],u\u003d[],i\u003dXo.transform(n),o\u003dXo.transform(t),a\u003di.translate,c\u003do.translate,s\u003di.rotate,l\u003do.rotate,f\u003di.skew,h\u003do.skew,g\u003di.scale,p\u003do.scale;return a[0]!\u003dc[0]||a[1]!\u003dc[1]?(r.push(\"translate(\",null,\",\",null,\")\"),u.push({i:1,x:su(a[0],c[0])},{i:3,x:su(a[1],c[1])})):c[0]||c[1]?r.push(\"translate(\"+c+\")\"):r.push(\"\"),s!\u003dl?(s-l\u003e180?l+\u003d360:l-s\u003e180\u0026\u0026(s+\u003d360),u.push({i:r.push(r.pop()+\"rotate(\",null,\")\")-2,x:su(s,l)})):l\u0026\u0026r.push(r.pop()+\"rotate(\"+l+\")\"),f!\u003dh?u.push({i:r.push(r.pop()+\"skewX(\",null,\")\")-2,x:su(f,h)}):h\u0026\u0026r.push(r.pop()+\"skewX(\"+h+\")\"),g[0]!\u003dp[0]||g[1]!\u003dp[1]?(e\u003dr.push(r.pop()+\"scale(\",null,\",\",null,\")\"),u.push({i:e-4,x:su(g[0],p[0])},{i:e-2,x:su(g[1],p[1])})):(1!\u003dp[0]||1!\u003dp[1])\u0026\u0026r.push(r.pop()+\"scale(\"+p+\")\"),e\u003du.length,function(n){for(var t,i\u003d-1;++i\u003ce;)r[(t\u003du[i]).i]\u003dt.x(n);return r.join(\"\")}}function Du(n,t){return t\u003dt-(n\u003d+n)?1/(t-n):0,function(e){return(e-n)*t}}function Pu(n,t){return t\u003dt-(n\u003d+n)?1/(t-n):0,function(e){return Math.max(0,Math.min(1,(e-n)*t))}}function Uu(n){for(var t\u003dn.source,e\u003dn.target,r\u003dHu(t,e),u\u003d[t];t!\u003d\u003dr;)t\u003dt.parent,u.push(t);for(var i\u003du.length;e!\u003d\u003dr;)u.splice(i,0,e),e\u003de.parent;return u}function ju(n){for(var t\u003d[],e\u003dn.parent;null!\u003de;)t.push(n),n\u003de,e\u003de.parent;return t.push(n),t}function Hu(n,t){if(n\u003d\u003d\u003dt)return n;for(var e\u003dju(n),r\u003dju(t),u\u003de.pop(),i\u003dr.pop(),o\u003dnull;u\u003d\u003d\u003di;)o\u003du,u\u003de.pop(),i\u003dr.pop();return o}function Fu(n){n.fixed|\u003d2}function Ou(n){n.fixed\u0026\u003d-7}function Yu(n){n.fixed|\u003d4,n.px\u003dn.x,n.py\u003dn.y}function Iu(n){n.fixed\u0026\u003d-5}function Zu(n,t,e){var r\u003d0,u\u003d0;if(n.charge\u003d0,!n.leaf)for(var i,o\u003dn.nodes,a\u003do.length,c\u003d-1;++c\u003ca;)i\u003do[c],null!\u003di\u0026\u0026(Zu(i,t,e),n.charge+\u003di.charge,r+\u003di.charge*i.cx,u+\u003di.charge*i.cy);if(n.point){n.leaf||(n.point.x+\u003dMath.random()-.5,n.point.y+\u003dMath.random()-.5);var s\u003dt*e[n.point.index];n.charge+\u003dn.pointCharge\u003ds,r+\u003ds*n.point.x,u+\u003ds*n.point.y}n.cx\u003dr/n.charge,n.cy\u003du/n.charge}function Vu(n,t){return Xo.rebind(n,t,\"sort\",\"children\",\"value\"),n.nodes\u003dn,n.links\u003dWu,n}function Xu(n){return n.children}function $u(n){return n.value}function Bu(n,t){return t.value-n.value}function Wu(n){return Xo.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function Ju(n){return n.x}function Gu(n){return n.y}function Ku(n,t,e){n.y0\u003dt,n.y\u003de}function Qu(n){return Xo.range(n.length)}function ni(n){for(var t\u003d-1,e\u003dn[0].length,r\u003d[];++t\u003ce;)r[t]\u003d0;return r}function ti(n){for(var t,e\u003d1,r\u003d0,u\u003dn[0][1],i\u003dn.length;i\u003ee;++e)(t\u003dn[e][1])\u003eu\u0026\u0026(r\u003de,u\u003dt);return r}function ei(n){return n.reduce(ri,0)}function ri(n,t){return n+t[1]}function ui(n,t){return ii(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function ii(n,t){for(var e\u003d-1,r\u003d+n[0],u\u003d(n[1]-r)/t,i\u003d[];++e\u003c\u003dt;)i[e]\u003du*e+r;return i}function oi(n){return[Xo.min(n),Xo.max(n)]}function ai(n,t){return n.parent\u003d\u003dt.parent?1:2}function ci(n){var t\u003dn.children;return t\u0026\u0026t.length?t[0]:n._tree.thread}function si(n){var t,e\u003dn.children;return e\u0026\u0026(t\u003de.length)?e[t-1]:n._tree.thread}function li(n,t){var e\u003dn.children;if(e\u0026\u0026(u\u003de.length))for(var r,u,i\u003d-1;++i\u003cu;)t(r\u003dli(e[i],t),n)\u003e0\u0026\u0026(n\u003dr);return n}function fi(n,t){return n.x-t.x}function hi(n,t){return t.x-n.x}function gi(n,t){return n.depth-t.depth}function pi(n,t){function e(n,r){var u\u003dn.children;if(u\u0026\u0026(o\u003du.length))for(var i,o,a\u003dnull,c\u003d-1;++c\u003co;)i\u003du[c],e(i,a),a\u003di;t(n,r)}e(n,null)}function vi(n){for(var t,e\u003d0,r\u003d0,u\u003dn.children,i\u003du.length;--i\u003e\u003d0;)t\u003du[i]._tree,t.prelim+\u003de,t.mod+\u003de,e+\u003dt.shift+(r+\u003dt.change)}function di(n,t,e){n\u003dn._tree,t\u003dt._tree;var r\u003de/(t.number-n.number);n.change+\u003dr,t.change-\u003dr,t.shift+\u003de,t.prelim+\u003de,t.mod+\u003de}function mi(n,t,e){return n._tree.ancestor.parent\u003d\u003dt.parent?n._tree.ancestor:e}function yi(n,t){return n.value-t.value}function xi(n,t){var e\u003dn._pack_next;n._pack_next\u003dt,t._pack_prev\u003dn,t._pack_next\u003de,e._pack_prev\u003dt}function Mi(n,t){n._pack_next\u003dt,t._pack_prev\u003dn}function _i(n,t){var e\u003dt.x-n.x,r\u003dt.y-n.y,u\u003dn.r+t.r;return.999*u*u\u003ee*e+r*r}function bi(n){function t(n){l\u003dMath.min(n.x-n.r,l),f\u003dMath.max(n.x+n.r,f),h\u003dMath.min(n.y-n.r,h),g\u003dMath.max(n.y+n.r,g)}if((e\u003dn.children)\u0026\u0026(s\u003de.length)){var e,r,u,i,o,a,c,s,l\u003d1/0,f\u003d-1/0,h\u003d1/0,g\u003d-1/0;if(e.forEach(wi),r\u003de[0],r.x\u003d-r.r,r.y\u003d0,t(r),s\u003e1\u0026\u0026(u\u003de[1],u.x\u003du.r,u.y\u003d0,t(u),s\u003e2))for(i\u003de[2],Ei(r,u,i),t(i),xi(r,i),r._pack_prev\u003di,xi(i,u),u\u003dr._pack_next,o\u003d3;s\u003eo;o++){Ei(r,u,i\u003de[o]);var p\u003d0,v\u003d1,d\u003d1;for(a\u003du._pack_next;a!\u003d\u003du;a\u003da._pack_next,v++)if(_i(a,i)){p\u003d1;break}if(1\u003d\u003dp)for(c\u003dr._pack_prev;c!\u003d\u003da._pack_prev\u0026\u0026!_i(c,i);c\u003dc._pack_prev,d++);p?(d\u003ev||v\u003d\u003dd\u0026\u0026u.r\u003cr.r?Mi(r,u\u003da):Mi(r\u003dc,u),o--):(xi(r,i),u\u003di,t(i))}var m\u003d(l+f)/2,y\u003d(h+g)/2,x\u003d0;for(o\u003d0;s\u003eo;o++)i\u003de[o],i.x-\u003dm,i.y-\u003dy,x\u003dMath.max(x,i.r+Math.sqrt(i.x*i.x+i.y*i.y));n.r\u003dx,e.forEach(Si)}}function wi(n){n._pack_next\u003dn._pack_prev\u003dn}function Si(n){delete n._pack_next,delete n._pack_prev}function ki(n,t,e,r){var u\u003dn.children;if(n.x\u003dt+\u003dr*n.x,n.y\u003de+\u003dr*n.y,n.r*\u003dr,u)for(var i\u003d-1,o\u003du.length;++i\u003co;)ki(u[i],t,e,r)}function Ei(n,t,e){var r\u003dn.r+e.r,u\u003dt.x-n.x,i\u003dt.y-n.y;if(r\u0026\u0026(u||i)){var o\u003dt.r+e.r,a\u003du*u+i*i;o*\u003do,r*\u003dr;var c\u003d.5+(r-o)/(2*a),s\u003dMath.sqrt(Math.max(0,2*o*(r+a)-(r-\u003da)*r-o*o))/(2*a);e.x\u003dn.x+c*u+s*i,e.y\u003dn.y+c*i-s*u}else e.x\u003dn.x+r,e.y\u003dn.y}function Ai(n){return 1+Xo.max(n,function(n){return n.y})}function Ci(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Ni(n){var t\u003dn.children;return t\u0026\u0026t.length?Ni(t[0]):n}function Li(n){var t,e\u003dn.children;return e\u0026\u0026(t\u003de.length)?Li(e[t-1]):n}function zi(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function qi(n,t){var e\u003dn.x+t[3],r\u003dn.y+t[0],u\u003dn.dx-t[1]-t[3],i\u003dn.dy-t[0]-t[2];return 0\u003eu\u0026\u0026(e+\u003du/2,u\u003d0),0\u003ei\u0026\u0026(r+\u003di/2,i\u003d0),{x:e,y:r,dx:u,dy:i}}function Ti(n){var t\u003dn[0],e\u003dn[n.length-1];return e\u003et?[t,e]:[e,t]}function Ri(n){return n.rangeExtent?n.rangeExtent():Ti(n.range())}function Di(n,t,e,r){var u\u003de(n[0],n[1]),i\u003dr(t[0],t[1]);return function(n){return i(u(n))}}function Pi(n,t){var e,r\u003d0,u\u003dn.length-1,i\u003dn[r],o\u003dn[u];return i\u003eo\u0026\u0026(e\u003dr,r\u003du,u\u003de,e\u003di,i\u003do,o\u003de),n[r]\u003dt.floor(i),n[u]\u003dt.ceil(o),n}function Ui(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:ls}function ji(n,t,e,r){var u\u003d[],i\u003d[],o\u003d0,a\u003dMath.min(n.length,t.length)-1;for(n[a]\u003cn[0]\u0026\u0026(n\u003dn.slice().reverse(),t\u003dt.slice().reverse());++o\u003c\u003da;)u.push(e(n[o-1],n[o])),i.push(r(t[o-1],t[o]));return function(t){var e\u003dXo.bisect(n,t,1,a)-1;return i[e](u[e](t))}}function Hi(n,t,e,r){function u(){var u\u003dMath.min(n.length,t.length)\u003e2?ji:Di,c\u003dr?Pu:Du;return o\u003du(n,t,c,e),a\u003du(t,n,c,fu),i}function i(n){return o(n)}var o,a;return i.invert\u003dfunction(n){return a(n)},i.domain\u003dfunction(t){return arguments.length?(n\u003dt.map(Number),u()):n},i.range\u003dfunction(n){return arguments.length?(t\u003dn,u()):t},i.rangeRound\u003dfunction(n){return i.range(n).interpolate(Nu)},i.clamp\u003dfunction(n){return arguments.length?(r\u003dn,u()):r},i.interpolate\u003dfunction(n){return arguments.length?(e\u003dn,u()):e},i.ticks\u003dfunction(t){return Ii(n,t)},i.tickFormat\u003dfunction(t,e){return Zi(n,t,e)},i.nice\u003dfunction(t){return Oi(n,t),u()},i.copy\u003dfunction(){return Hi(n,t,e,r)},u()}function Fi(n,t){return Xo.rebind(n,t,\"range\",\"rangeRound\",\"interpolate\",\"clamp\")}function Oi(n,t){return Pi(n,Ui(Yi(n,t)[2]))}function Yi(n,t){null\u003d\u003dt\u0026\u0026(t\u003d10);var e\u003dTi(n),r\u003de[1]-e[0],u\u003dMath.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),i\u003dt/r*u;return.15\u003e\u003di?u*\u003d10:.35\u003e\u003di?u*\u003d5:.75\u003e\u003di\u0026\u0026(u*\u003d2),e[0]\u003dMath.ceil(e[0]/u)*u,e[1]\u003dMath.floor(e[1]/u)*u+.5*u,e[2]\u003du,e}function Ii(n,t){return Xo.range.apply(Xo,Yi(n,t))}function Zi(n,t,e){var r\u003dYi(n,t);return Xo.format(e?e.replace(Qa,function(n,t,e,u,i,o,a,c,s,l){return[t,e,u,i,o,a,c,s||\".\"+Xi(l,r),l].join(\"\")}):\",.\"+Vi(r[2])+\"f\")}function Vi(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function Xi(n,t){var e\u003dVi(t[2]);return n in fs?Math.abs(e-Vi(Math.max(Math.abs(t[0]),Math.abs(t[1]))))+ +(\"e\"!\u003d\u003dn):e-2*(\"%\"\u003d\u003d\u003dn)}function $i(n,t,e,r){function u(n){return(e?Math.log(0\u003en?0:n):-Math.log(n\u003e0?0:-n))/Math.log(t)}function i(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function o(t){return n(u(t))}return o.invert\u003dfunction(t){return i(n.invert(t))},o.domain\u003dfunction(t){return arguments.length?(e\u003dt[0]\u003e\u003d0,n.domain((r\u003dt.map(Number)).map(u)),o):r},o.base\u003dfunction(e){return arguments.length?(t\u003d+e,n.domain(r.map(u)),o):t},o.nice\u003dfunction(){var t\u003dPi(r.map(u),e?Math:gs);return n.domain(t),r\u003dt.map(i),o},o.ticks\u003dfunction(){var n\u003dTi(r),o\u003d[],a\u003dn[0],c\u003dn[1],s\u003dMath.floor(u(a)),l\u003dMath.ceil(u(c)),f\u003dt%1?2:t;if(isFinite(l-s)){if(e){for(;l\u003es;s++)for(var h\u003d1;f\u003eh;h++)o.push(i(s)*h);o.push(i(s))}else for(o.push(i(s));s++\u003cl;)for(var h\u003df-1;h\u003e0;h--)o.push(i(s)*h);for(s\u003d0;o[s]\u003ca;s++);for(l\u003do.length;o[l-1]\u003ec;l--);o\u003do.slice(s,l)}return o},o.tickFormat\u003dfunction(n,t){if(!arguments.length)return hs;arguments.length\u003c2?t\u003dhs:\"function\"!\u003dtypeof t\u0026\u0026(t\u003dXo.format(t));var r,a\u003dMath.max(.1,n/o.ticks().length),c\u003de?(r\u003d1e-12,Math.ceil):(r\u003d-1e-12,Math.floor);return function(n){return n/i(c(u(n)+r))\u003c\u003da?t(n):\"\"}},o.copy\u003dfunction(){return $i(n.copy(),t,e,r)},Fi(o,n)}function Bi(n,t,e){function r(t){return n(u(t))}var u\u003dWi(t),i\u003dWi(1/t);return r.invert\u003dfunction(t){return i(n.invert(t))},r.domain\u003dfunction(t){return arguments.length?(n.domain((e\u003dt.map(Number)).map(u)),r):e},r.ticks\u003dfunction(n){return Ii(e,n)},r.tickFormat\u003dfunction(n,t){return Zi(e,n,t)},r.nice\u003dfunction(n){return r.domain(Oi(e,n))},r.exponent\u003dfunction(o){return arguments.length?(u\u003dWi(t\u003do),i\u003dWi(1/t),n.domain(e.map(u)),r):t},r.copy\u003dfunction(){return Bi(n.copy(),t,e)},Fi(r,n)}function Wi(n){return function(t){return 0\u003et?-Math.pow(-t,n):Math.pow(t,n)}}function Ji(n,t){function e(e){return o[((i.get(e)||\"range\"\u003d\u003d\u003dt.t\u0026\u0026i.set(e,n.push(e)))-1)%o.length]}function r(t,e){return Xo.range(n.length).map(function(n){return t+e*n})}var i,o,a;return e.domain\u003dfunction(r){if(!arguments.length)return n;n\u003d[],i\u003dnew u;for(var o,a\u003d-1,c\u003dr.length;++a\u003cc;)i.has(o\u003dr[a])||i.set(o,n.push(o));return e[t.t].apply(e,t.a)},e.range\u003dfunction(n){return arguments.length?(o\u003dn,a\u003d0,t\u003d{t:\"range\",a:arguments},e):o},e.rangePoints\u003dfunction(u,i){arguments.length\u003c2\u0026\u0026(i\u003d0);var c\u003du[0],s\u003du[1],l\u003d(s-c)/(Math.max(1,n.length-1)+i);return o\u003dr(n.length\u003c2?(c+s)/2:c+l*i/2,l),a\u003d0,t\u003d{t:\"rangePoints\",a:arguments},e},e.rangeBands\u003dfunction(u,i,c){arguments.length\u003c2\u0026\u0026(i\u003d0),arguments.length\u003c3\u0026\u0026(c\u003di);var s\u003du[1]\u003cu[0],l\u003du[s-0],f\u003du[1-s],h\u003d(f-l)/(n.length-i+2*c);return o\u003dr(l+h*c,h),s\u0026\u0026o.reverse(),a\u003dh*(1-i),t\u003d{t:\"rangeBands\",a:arguments},e},e.rangeRoundBands\u003dfunction(u,i,c){arguments.length\u003c2\u0026\u0026(i\u003d0),arguments.length\u003c3\u0026\u0026(c\u003di);var s\u003du[1]\u003cu[0],l\u003du[s-0],f\u003du[1-s],h\u003dMath.floor((f-l)/(n.length-i+2*c)),g\u003df-l-(n.length-i)*h;return o\u003dr(l+Math.round(g/2),h),s\u0026\u0026o.reverse(),a\u003dMath.round(h*(1-i)),t\u003d{t:\"rangeRoundBands\",a:arguments},e},e.rangeBand\u003dfunction(){return a},e.rangeExtent\u003dfunction(){return Ti(t.a[0])},e.copy\u003dfunction(){return Ji(n,t)},e.domain(n)}function Gi(n,t){function e(){var e\u003d0,i\u003dt.length;for(u\u003d[];++e\u003ci;)u[e-1]\u003dXo.quantile(n,e/i);return r}function r(n){return isNaN(n\u003d+n)?void 0:t[Xo.bisect(u,n)]}var u;return r.domain\u003dfunction(t){return arguments.length?(n\u003dt.filter(function(n){return!isNaN(n)}).sort(Xo.ascending),e()):n},r.range\u003dfunction(n){return arguments.length?(t\u003dn,e()):t},r.quantiles\u003dfunction(){return u},r.invertExtent\u003dfunction(e){return e\u003dt.indexOf(e),0\u003ee?[0/0,0/0]:[e\u003e0?u[e-1]:n[0],e\u003cu.length?u[e]:n[n.length-1]]},r.copy\u003dfunction(){return Gi(n,t)},e()}function Ki(n,t,e){function r(t){return e[Math.max(0,Math.min(o,Math.floor(i*(t-n))))]}function u(){return i\u003de.length/(t-n),o\u003de.length-1,r}var i,o;return r.domain\u003dfunction(e){return arguments.length?(n\u003d+e[0],t\u003d+e[e.length-1],u()):[n,t]},r.range\u003dfunction(n){return arguments.length?(e\u003dn,u()):e},r.invertExtent\u003dfunction(t){return t\u003de.indexOf(t),t\u003d0\u003et?0/0:t/i+n,[t,t+1/i]},r.copy\u003dfunction(){return Ki(n,t,e)},u()}function Qi(n,t){function e(e){return e\u003e\u003de?t[Xo.bisect(n,e)]:void 0}return e.domain\u003dfunction(t){return arguments.length?(n\u003dt,e):n},e.range\u003dfunction(n){return arguments.length?(t\u003dn,e):t},e.invertExtent\u003dfunction(e){return e\u003dt.indexOf(e),[n[e-1],n[e]]},e.copy\u003dfunction(){return Qi(n,t)},e}function no(n){function t(n){return+n}return t.invert\u003dt,t.domain\u003dt.range\u003dfunction(e){return arguments.length?(n\u003de.map(t),t):n},t.ticks\u003dfunction(t){return Ii(n,t)},t.tickFormat\u003dfunction(t,e){return Zi(n,t,e)},t.copy\u003dfunction(){return no(n)},t}function to(n){return n.innerRadius}function eo(n){return n.outerRadius}function ro(n){return n.startAngle}function uo(n){return n.endAngle}function io(n){function t(t){function o(){s.push(\"M\",i(n(l),a))}for(var c,s\u003d[],l\u003d[],f\u003d-1,h\u003dt.length,g\u003d_t(e),p\u003d_t(r);++f\u003ch;)u.call(this,c\u003dt[f],f)?l.push([+g.call(this,c,f),+p.call(this,c,f)]):l.length\u0026\u0026(o(),l\u003d[]);return l.length\u0026\u0026o(),s.length?s.join(\"\"):null}var e\u003dbr,r\u003dwr,u\u003dbe,i\u003doo,o\u003di.key,a\u003d.7;return t.x\u003dfunction(n){return arguments.length?(e\u003dn,t):e},t.y\u003dfunction(n){return arguments.length?(r\u003dn,t):r},t.defined\u003dfunction(n){return arguments.length?(u\u003dn,t):u},t.interpolate\u003dfunction(n){return arguments.length?(o\u003d\"function\"\u003d\u003dtypeof n?i\u003dn:(i\u003dMs.get(n)||oo).key,t):o},t.tension\u003dfunction(n){return arguments.length?(a\u003dn,t):a},t}function oo(n){return n.join(\"L\")}function ao(n){return oo(n)+\"Z\"}function co(n){for(var t\u003d0,e\u003dn.length,r\u003dn[0],u\u003d[r[0],\",\",r[1]];++t\u003ce;)u.push(\"H\",(r[0]+(r\u003dn[t])[0])/2,\"V\",r[1]);return e\u003e1\u0026\u0026u.push(\"H\",r[0]),u.join(\"\")}function so(n){for(var t\u003d0,e\u003dn.length,r\u003dn[0],u\u003d[r[0],\",\",r[1]];++t\u003ce;)u.push(\"V\",(r\u003dn[t])[1],\"H\",r[0]);return u.join(\"\")}function lo(n){for(var t\u003d0,e\u003dn.length,r\u003dn[0],u\u003d[r[0],\",\",r[1]];++t\u003ce;)u.push(\"H\",(r\u003dn[t])[0],\"V\",r[1]);return u.join(\"\")}function fo(n,t){return n.length\u003c4?oo(n):n[1]+po(n.slice(1,n.length-1),vo(n,t))}function ho(n,t){return n.length\u003c3?oo(n):n[0]+po((n.push(n[0]),n),vo([n[n.length-2]].concat(n,[n[1]]),t))}function go(n,t){return n.length\u003c3?oo(n):n[0]+po(n,vo(n,t))}function po(n,t){if(t.length\u003c1||n.length!\u003dt.length\u0026\u0026n.length!\u003dt.length+2)return oo(n);var e\u003dn.length!\u003dt.length,r\u003d\"\",u\u003dn[0],i\u003dn[1],o\u003dt[0],a\u003do,c\u003d1;if(e\u0026\u0026(r+\u003d\"Q\"+(i[0]-2*o[0]/3)+\",\"+(i[1]-2*o[1]/3)+\",\"+i[0]+\",\"+i[1],u\u003dn[1],c\u003d2),t.length\u003e1){a\u003dt[1],i\u003dn[c],c++,r+\u003d\"C\"+(u[0]+o[0])+\",\"+(u[1]+o[1])+\",\"+(i[0]-a[0])+\",\"+(i[1]-a[1])+\",\"+i[0]+\",\"+i[1];for(var s\u003d2;s\u003ct.length;s++,c++)i\u003dn[c],a\u003dt[s],r+\u003d\"S\"+(i[0]-a[0])+\",\"+(i[1]-a[1])+\",\"+i[0]+\",\"+i[1]}if(e){var l\u003dn[c];r+\u003d\"Q\"+(i[0]+2*a[0]/3)+\",\"+(i[1]+2*a[1]/3)+\",\"+l[0]+\",\"+l[1]}return r}function vo(n,t){for(var e,r\u003d[],u\u003d(1-t)/2,i\u003dn[0],o\u003dn[1],a\u003d1,c\u003dn.length;++a\u003cc;)e\u003di,i\u003do,o\u003dn[a],r.push([u*(o[0]-e[0]),u*(o[1]-e[1])]);return r}function mo(n){if(n.length\u003c3)return oo(n);var t\u003d1,e\u003dn.length,r\u003dn[0],u\u003dr[0],i\u003dr[1],o\u003d[u,u,u,(r\u003dn[1])[0]],a\u003d[i,i,i,r[1]],c\u003d[u,\",\",i,\"L\",_o(ws,o),\",\",_o(ws,a)];for(n.push(n[e-1]);++t\u003c\u003de;)r\u003dn[t],o.shift(),o.push(r[0]),a.shift(),a.push(r[1]),bo(c,o,a);return n.pop(),c.push(\"L\",r),c.join(\"\")}function yo(n){if(n.length\u003c4)return oo(n);for(var t,e\u003d[],r\u003d-1,u\u003dn.length,i\u003d[0],o\u003d[0];++r\u003c3;)t\u003dn[r],i.push(t[0]),o.push(t[1]);for(e.push(_o(ws,i)+\",\"+_o(ws,o)),--r;++r\u003cu;)t\u003dn[r],i.shift(),i.push(t[0]),o.shift(),o.push(t[1]),bo(e,i,o);return e.join(\"\")}function xo(n){for(var t,e,r\u003d-1,u\u003dn.length,i\u003du+4,o\u003d[],a\u003d[];++r\u003c4;)e\u003dn[r%u],o.push(e[0]),a.push(e[1]);for(t\u003d[_o(ws,o),\",\",_o(ws,a)],--r;++r\u003ci;)e\u003dn[r%u],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),bo(t,o,a);return t.join(\"\")}function Mo(n,t){var e\u003dn.length-1;if(e)for(var r,u,i\u003dn[0][0],o\u003dn[0][1],a\u003dn[e][0]-i,c\u003dn[e][1]-o,s\u003d-1;++s\u003c\u003de;)r\u003dn[s],u\u003ds/e,r[0]\u003dt*r[0]+(1-t)*(i+u*a),r[1]\u003dt*r[1]+(1-t)*(o+u*c);return mo(n)}function _o(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function bo(n,t,e){n.push(\"C\",_o(_s,t),\",\",_o(_s,e),\",\",_o(bs,t),\",\",_o(bs,e),\",\",_o(ws,t),\",\",_o(ws,e))}function wo(n,t){return(t[1]-n[1])/(t[0]-n[0])}function So(n){for(var t\u003d0,e\u003dn.length-1,r\u003d[],u\u003dn[0],i\u003dn[1],o\u003dr[0]\u003dwo(u,i);++t\u003ce;)r[t]\u003d(o+(o\u003dwo(u\u003di,i\u003dn[t+1])))/2;return r[t]\u003do,r}function ko(n){for(var t,e,r,u,i\u003d[],o\u003dSo(n),a\u003d-1,c\u003dn.length-1;++a\u003cc;)t\u003dwo(n[a],n[a+1]),oa(t)\u003cAa?o[a]\u003do[a+1]\u003d0:(e\u003do[a]/t,r\u003do[a+1]/t,u\u003de*e+r*r,u\u003e9\u0026\u0026(u\u003d3*t/Math.sqrt(u),o[a]\u003du*e,o[a+1]\u003du*r));for(a\u003d-1;++a\u003c\u003dc;)u\u003d(n[Math.min(c,a+1)][0]-n[Math.max(0,a-1)][0])/(6*(1+o[a]*o[a])),i.push([u||0,o[a]*u||0]);return i}function Eo(n){return n.length\u003c3?oo(n):n[0]+po(n,ko(n))}function Ao(n){for(var t,e,r,u\u003d-1,i\u003dn.length;++u\u003ci;)t\u003dn[u],e\u003dt[0],r\u003dt[1]+ys,t[0]\u003de*Math.cos(r),t[1]\u003de*Math.sin(r);return n}function Co(n){function t(t){function c(){v.push(\"M\",a(n(m),f),l,s(n(d.reverse()),f),\"Z\")}for(var h,g,p,v\u003d[],d\u003d[],m\u003d[],y\u003d-1,x\u003dt.length,M\u003d_t(e),_\u003d_t(u),b\u003de\u003d\u003d\u003dr?function(){return g}:_t(r),w\u003du\u003d\u003d\u003di?function(){return p}:_t(i);++y\u003cx;)o.call(this,h\u003dt[y],y)?(d.push([g\u003d+M.call(this,h,y),p\u003d+_.call(this,h,y)]),m.push([+b.call(this,h,y),+w.call(this,h,y)])):d.length\u0026\u0026(c(),d\u003d[],m\u003d[]);return d.length\u0026\u0026c(),v.length?v.join(\"\"):null}var e\u003dbr,r\u003dbr,u\u003d0,i\u003dwr,o\u003dbe,a\u003doo,c\u003da.key,s\u003da,l\u003d\"L\",f\u003d.7;return t.x\u003dfunction(n){return arguments.length?(e\u003dr\u003dn,t):r},t.x0\u003dfunction(n){return arguments.length?(e\u003dn,t):e},t.x1\u003dfunction(n){return arguments.length?(r\u003dn,t):r},t.y\u003dfunction(n){return arguments.length?(u\u003di\u003dn,t):i},t.y0\u003dfunction(n){return arguments.length?(u\u003dn,t):u},t.y1\u003dfunction(n){return arguments.length?(i\u003dn,t):i},t.defined\u003dfunction(n){return arguments.length?(o\u003dn,t):o},t.interpolate\u003dfunction(n){return arguments.length?(c\u003d\"function\"\u003d\u003dtypeof n?a\u003dn:(a\u003dMs.get(n)||oo).key,s\u003da.reverse||a,l\u003da.closed?\"M\":\"L\",t):c},t.tension\u003dfunction(n){return arguments.length?(f\u003dn,t):f},t}function No(n){return n.radius}function Lo(n){return[n.x,n.y]}function zo(n){return function(){var t\u003dn.apply(this,arguments),e\u003dt[0],r\u003dt[1]+ys;return[e*Math.cos(r),e*Math.sin(r)]}}function qo(){return 64}function To(){return\"circle\"}function Ro(n){var t\u003dMath.sqrt(n/Sa);return\"M0,\"+t+\"A\"+t+\",\"+t+\" 0 1,1 0,\"+-t+\"A\"+t+\",\"+t+\" 0 1,1 0,\"+t+\"Z\"}function Do(n,t){return fa(n,Ns),n.id\u003dt,n}function Po(n,t,e,r){var u\u003dn.id;return R(n,\"function\"\u003d\u003dtypeof e?function(n,i,o){n.__transition__[u].tween.set(t,r(e.call(n,n.__data__,i,o)))}:(e\u003dr(e),function(n){n.__transition__[u].tween.set(t,e)}))}function Uo(n){return null\u003d\u003dn\u0026\u0026(n\u003d\"\"),function(){this.textContent\u003dn}}function jo(n,t,e,r){var i\u003dn.__transition__||(n.__transition__\u003d{active:0,count:0}),o\u003di[e];if(!o){var a\u003dr.time;o\u003di[e]\u003d{tween:new u,time:a,ease:r.ease,delay:r.delay,duration:r.duration},++i.count,Xo.timer(function(r){function u(r){return i.active\u003ee?s():(i.active\u003de,o.event\u0026\u0026o.event.start.call(n,l,t),o.tween.forEach(function(e,r){(r\u003dr.call(n,l,t))\u0026\u0026v.push(r)}),Xo.timer(function(){return p.c\u003dc(r||1)?be:c,1},0,a),void 0)}function c(r){if(i.active!\u003d\u003de)return s();for(var u\u003dr/g,a\u003df(u),c\u003dv.length;c\u003e0;)v[--c].call(n,a);return u\u003e\u003d1?(o.event\u0026\u0026o.event.end.call(n,l,t),s()):void 0}function s(){return--i.count?delete i[e]:delete n.__transition__,1}var l\u003dn.__data__,f\u003do.ease,h\u003do.delay,g\u003do.duration,p\u003dJa,v\u003d[];return p.t\u003dh+a,r\u003e\u003dh?u(r-h):(p.c\u003du,void 0)},0,a)}}function Ho(n,t){n.attr(\"transform\",function(n){return\"translate(\"+t(n)+\",0)\"})}function Fo(n,t){n.attr(\"transform\",function(n){return\"translate(0,\"+t(n)+\")\"})}function Oo(n){return n.toISOString()}function Yo(n,t,e){function r(t){return n(t)}function u(n,e){var r\u003dn[1]-n[0],u\u003dr/e,i\u003dXo.bisect(js,u);return i\u003d\u003djs.length?[t.year,Yi(n.map(function(n){return n/31536e6}),e)[2]]:i?t[u/js[i-1]\u003cjs[i]/u?i-1:i]:[Os,Yi(n,e)[2]]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}return r.invert\u003dfunction(t){return Io(n.invert(t))},r.domain\u003dfunction(t){return arguments.length?(n.domain(t),r):n.domain().map(Io)},r.nice\u003dfunction(n,t){function e(e){return!isNaN(e)\u0026\u0026!n.range(e,Io(+e+1),t).length}var i\u003dr.domain(),o\u003dTi(i),a\u003dnull\u003d\u003dn?u(o,10):\"number\"\u003d\u003dtypeof n\u0026\u0026u(o,n);return a\u0026\u0026(n\u003da[0],t\u003da[1]),r.domain(Pi(i,t\u003e1?{floor:function(t){for(;e(t\u003dn.floor(t));)t\u003dIo(t-1);return t},ceil:function(t){for(;e(t\u003dn.ceil(t));)t\u003dIo(+t+1);return t}}:n))},r.ticks\u003dfunction(n,t){var e\u003dTi(r.domain()),i\u003dnull\u003d\u003dn?u(e,10):\"number\"\u003d\u003dtypeof n?u(e,n):!n.range\u0026\u0026[{range:n},t];return i\u0026\u0026(n\u003di[0],t\u003di[1]),n.range(e[0],Io(+e[1]+1),1\u003et?1:t)},r.tickFormat\u003dfunction(){return e},r.copy\u003dfunction(){return Yo(n.copy(),t,e)},Fi(r,n)}function Io(n){return new Date(n)}function Zo(n){return JSON.parse(n.responseText)}function Vo(n){var t\u003dWo.createRange();return t.selectNode(Wo.body),t.createContextualFragment(n.responseText)}var Xo\u003d{version:\"3.4.2\"};Date.now||(Date.now\u003dfunction(){return+new Date});var $o\u003d[].slice,Bo\u003dfunction(n){return $o.call(n)},Wo\u003ddocument,Jo\u003dWo.documentElement,Go\u003dwindow;try{Bo(Jo.childNodes)[0].nodeType}catch(Ko){Bo\u003dfunction(n){for(var t\u003dn.length,e\u003dnew Array(t);t--;)e[t]\u003dn[t];return e}}try{Wo.createElement(\"div\").style.setProperty(\"opacity\",0,\"\")}catch(Qo){var na\u003dGo.Element.prototype,ta\u003dna.setAttribute,ea\u003dna.setAttributeNS,ra\u003dGo.CSSStyleDeclaration.prototype,ua\u003dra.setProperty;na.setAttribute\u003dfunction(n,t){ta.call(this,n,t+\"\")},na.setAttributeNS\u003dfunction(n,t,e){ea.call(this,n,t,e+\"\")},ra.setProperty\u003dfunction(n,t,e){ua.call(this,n,t+\"\",e)}}Xo.ascending\u003dfunction(n,t){return t\u003en?-1:n\u003et?1:n\u003e\u003dt?0:0/0},Xo.descending\u003dfunction(n,t){return n\u003et?-1:t\u003en?1:t\u003e\u003dn?0:0/0},Xo.min\u003dfunction(n,t){var e,r,u\u003d-1,i\u003dn.length;if(1\u003d\u003d\u003darguments.length){for(;++u\u003ci\u0026\u0026!(null!\u003d(e\u003dn[u])\u0026\u0026e\u003e\u003de);)e\u003dvoid 0;for(;++u\u003ci;)null!\u003d(r\u003dn[u])\u0026\u0026e\u003er\u0026\u0026(e\u003dr)}else{for(;++u\u003ci\u0026\u0026!(null!\u003d(e\u003dt.call(n,n[u],u))\u0026\u0026e\u003e\u003de);)e\u003dvoid 0;for(;++u\u003ci;)null!\u003d(r\u003dt.call(n,n[u],u))\u0026\u0026e\u003er\u0026\u0026(e\u003dr)}return e},Xo.max\u003dfunction(n,t){var e,r,u\u003d-1,i\u003dn.length;if(1\u003d\u003d\u003darguments.length){for(;++u\u003ci\u0026\u0026!(null!\u003d(e\u003dn[u])\u0026\u0026e\u003e\u003de);)e\u003dvoid 0;for(;++u\u003ci;)null!\u003d(r\u003dn[u])\u0026\u0026r\u003ee\u0026\u0026(e\u003dr)}else{for(;++u\u003ci\u0026\u0026!(null!\u003d(e\u003dt.call(n,n[u],u))\u0026\u0026e\u003e\u003de);)e\u003dvoid 0;for(;++u\u003ci;)null!\u003d(r\u003dt.call(n,n[u],u))\u0026\u0026r\u003ee\u0026\u0026(e\u003dr)}return e},Xo.extent\u003dfunction(n,t){var e,r,u,i\u003d-1,o\u003dn.length;if(1\u003d\u003d\u003darguments.length){for(;++i\u003co\u0026\u0026!(null!\u003d(e\u003du\u003dn[i])\u0026\u0026e\u003e\u003de);)e\u003du\u003dvoid 0;for(;++i\u003co;)null!\u003d(r\u003dn[i])\u0026\u0026(e\u003er\u0026\u0026(e\u003dr),r\u003eu\u0026\u0026(u\u003dr))}else{for(;++i\u003co\u0026\u0026!(null!\u003d(e\u003du\u003dt.call(n,n[i],i))\u0026\u0026e\u003e\u003de);)e\u003dvoid 0;for(;++i\u003co;)null!\u003d(r\u003dt.call(n,n[i],i))\u0026\u0026(e\u003er\u0026\u0026(e\u003dr),r\u003eu\u0026\u0026(u\u003dr))}return[e,u]},Xo.sum\u003dfunction(n,t){var e,r\u003d0,u\u003dn.length,i\u003d-1;if(1\u003d\u003d\u003darguments.length)for(;++i\u003cu;)isNaN(e\u003d+n[i])||(r+\u003de);else for(;++i\u003cu;)isNaN(e\u003d+t.call(n,n[i],i))||(r+\u003de);return r},Xo.mean\u003dfunction(t,e){var r,u\u003dt.length,i\u003d0,o\u003d-1,a\u003d0;if(1\u003d\u003d\u003darguments.length)for(;++o\u003cu;)n(r\u003dt[o])\u0026\u0026(i+\u003d(r-i)/++a);else for(;++o\u003cu;)n(r\u003de.call(t,t[o],o))\u0026\u0026(i+\u003d(r-i)/++a);return a?i:void 0},Xo.quantile\u003dfunction(n,t){var e\u003d(n.length-1)*t+1,r\u003dMath.floor(e),u\u003d+n[r-1],i\u003de-r;return i?u+i*(n[r]-u):u},Xo.median\u003dfunction(t,e){return arguments.length\u003e1\u0026\u0026(t\u003dt.map(e)),t\u003dt.filter(n),t.length?Xo.quantile(t.sort(Xo.ascending),.5):void 0},Xo.bisector\u003dfunction(n){return{left:function(t,e,r,u){for(arguments.length\u003c3\u0026\u0026(r\u003d0),arguments.length\u003c4\u0026\u0026(u\u003dt.length);u\u003er;){var i\u003dr+u\u003e\u003e\u003e1;n.call(t,t[i],i)\u003ce?r\u003di+1:u\u003di}return r},right:function(t,e,r,u){for(arguments.length\u003c3\u0026\u0026(r\u003d0),arguments.length\u003c4\u0026\u0026(u\u003dt.length);u\u003er;){var i\u003dr+u\u003e\u003e\u003e1;e\u003cn.call(t,t[i],i)?u\u003di:r\u003di+1}return r}}};var ia\u003dXo.bisector(function(n){return n});Xo.bisectLeft\u003dia.left,Xo.bisect\u003dXo.bisectRight\u003dia.right,Xo.shuffle\u003dfunction(n){for(var t,e,r\u003dn.length;r;)e\u003d0|Math.random()*r--,t\u003dn[r],n[r]\u003dn[e],n[e]\u003dt;return n},Xo.permute\u003dfunction(n,t){for(var e\u003dt.length,r\u003dnew Array(e);e--;)r[e]\u003dn[t[e]];return r},Xo.pairs\u003dfunction(n){for(var t,e\u003d0,r\u003dn.length-1,u\u003dn[0],i\u003dnew Array(0\u003er?0:r);r\u003ee;)i[e]\u003d[t\u003du,u\u003dn[++e]];return i},Xo.zip\u003dfunction(){if(!(u\u003darguments.length))return[];for(var n\u003d-1,e\u003dXo.min(arguments,t),r\u003dnew Array(e);++n\u003ce;)for(var u,i\u003d-1,o\u003dr[n]\u003dnew Array(u);++i\u003cu;)o[i]\u003darguments[i][n];return r},Xo.transpose\u003dfunction(n){return Xo.zip.apply(Xo,n)},Xo.keys\u003dfunction(n){var t\u003d[];for(var e in n)t.push(e);return t},Xo.values\u003dfunction(n){var t\u003d[];for(var e in n)t.push(n[e]);return t},Xo.entries\u003dfunction(n){var t\u003d[];for(var e in n)t.push({key:e,value:n[e]});return t},Xo.merge\u003dfunction(n){for(var t,e,r,u\u003dn.length,i\u003d-1,o\u003d0;++i\u003cu;)o+\u003dn[i].length;for(e\u003dnew Array(o);--u\u003e\u003d0;)for(r\u003dn[u],t\u003dr.length;--t\u003e\u003d0;)e[--o]\u003dr[t];return e};var oa\u003dMath.abs;Xo.range\u003dfunction(n,t,r){if(arguments.length\u003c3\u0026\u0026(r\u003d1,arguments.length\u003c2\u0026\u0026(t\u003dn,n\u003d0)),1/0\u003d\u003d\u003d(t-n)/r)throw new Error(\"infinite range\");var u,i\u003d[],o\u003de(oa(r)),a\u003d-1;if(n*\u003do,t*\u003do,r*\u003do,0\u003er)for(;(u\u003dn+r*++a)\u003et;)i.push(u/o);else for(;(u\u003dn+r*++a)\u003ct;)i.push(u/o);return i},Xo.map\u003dfunction(n){var t\u003dnew u;if(n instanceof u)n.forEach(function(n,e){t.set(n,e)});else for(var e in n)t.set(e,n[e]);return t},r(u,{has:i,get:function(n){return this[aa+n]},set:function(n,t){return this[aa+n]\u003dt},remove:o,keys:a,values:function(){var n\u003d[];return this.forEach(function(t,e){n.push(e)}),n},entries:function(){var n\u003d[];return this.forEach(function(t,e){n.push({key:t,value:e})}),n},size:c,empty:s,forEach:function(n){for(var t in this)t.charCodeAt(0)\u003d\u003d\u003dca\u0026\u0026n.call(this,t.substring(1),this[t])}});var aa\u003d\"\\x00\",ca\u003daa.charCodeAt(0);Xo.nest\u003dfunction(){function n(t,a,c){if(c\u003e\u003do.length)return r?r.call(i,a):e?a.sort(e):a;for(var s,l,f,h,g\u003d-1,p\u003da.length,v\u003do[c++],d\u003dnew u;++g\u003cp;)(h\u003dd.get(s\u003dv(l\u003da[g])))?h.push(l):d.set(s,[l]);return t?(l\u003dt(),f\u003dfunction(e,r){l.set(e,n(t,r,c))}):(l\u003d{},f\u003dfunction(e,r){l[e]\u003dn(t,r,c)}),d.forEach(f),l}function t(n,e){if(e\u003e\u003do.length)return n;var r\u003d[],u\u003da[e++];return n.forEach(function(n,u){r.push({key:n,values:t(u,e)})}),u?r.sort(function(n,t){return u(n.key,t.key)}):r}var e,r,i\u003d{},o\u003d[],a\u003d[];return i.map\u003dfunction(t,e){return n(e,t,0)},i.entries\u003dfunction(e){return t(n(Xo.map,e,0),0)},i.key\u003dfunction(n){return o.push(n),i},i.sortKeys\u003dfunction(n){return a[o.length-1]\u003dn,i},i.sortValues\u003dfunction(n){return e\u003dn,i},i.rollup\u003dfunction(n){return r\u003dn,i},i},Xo.set\u003dfunction(n){var t\u003dnew l;if(n)for(var e\u003d0,r\u003dn.length;r\u003ee;++e)t.add(n[e]);return t},r(l,{has:i,add:function(n){return this[aa+n]\u003d!0,n},remove:function(n){return n\u003daa+n,n in this\u0026\u0026delete this[n]},values:a,size:c,empty:s,forEach:function(n){for(var t in this)t.charCodeAt(0)\u003d\u003d\u003dca\u0026\u0026n.call(this,t.substring(1))}}),Xo.behavior\u003d{},Xo.rebind\u003dfunction(n,t){for(var e,r\u003d1,u\u003darguments.length;++r\u003cu;)n[e\u003darguments[r]]\u003df(n,t,t[e]);return n};var sa\u003d[\"webkit\",\"ms\",\"moz\",\"Moz\",\"o\",\"O\"];Xo.dispatch\u003dfunction(){for(var n\u003dnew p,t\u003d-1,e\u003darguments.length;++t\u003ce;)n[arguments[t]]\u003dv(n);return n},p.prototype.on\u003dfunction(n,t){var e\u003dn.indexOf(\".\"),r\u003d\"\";if(e\u003e\u003d0\u0026\u0026(r\u003dn.substring(e+1),n\u003dn.substring(0,e)),n)return arguments.length\u003c2?this[n].on(r):this[n].on(r,t);if(2\u003d\u003d\u003darguments.length){if(null\u003d\u003dt)for(n in this)this.hasOwnProperty(n)\u0026\u0026this[n].on(r,null);return this}},Xo.event\u003dnull,Xo.requote\u003dfunction(n){return n.replace(la,\"\\\\$\u0026\")};var la\u003d/[\\\\\\^\\$\\*\\+\\?\\|\\[\\]\\(\\)\\.\\{\\}]/g,fa\u003d{}.__proto__?function(n,t){n.__proto__\u003dt}:function(n,t){for(var e in t)n[e]\u003dt[e]},ha\u003dfunction(n,t){return t.querySelector(n)},ga\u003dfunction(n,t){return t.querySelectorAll(n)},pa\u003dJo[h(Jo,\"matchesSelector\")],va\u003dfunction(n,t){return pa.call(n,t)};\"function\"\u003d\u003dtypeof Sizzle\u0026\u0026(ha\u003dfunction(n,t){return Sizzle(n,t)[0]||null},ga\u003dfunction(n,t){return Sizzle.uniqueSort(Sizzle(n,t))},va\u003dSizzle.matchesSelector),Xo.selection\u003dfunction(){return xa};var da\u003dXo.selection.prototype\u003d[];da.select\u003dfunction(n){var t,e,r,u,i\u003d[];n\u003dM(n);for(var o\u003d-1,a\u003dthis.length;++o\u003ca;){i.push(t\u003d[]),t.parentNode\u003d(r\u003dthis[o]).parentNode;for(var c\u003d-1,s\u003dr.length;++c\u003cs;)(u\u003dr[c])?(t.push(e\u003dn.call(u,u.__data__,c,o)),e\u0026\u0026\"__data__\"in u\u0026\u0026(e.__data__\u003du.__data__)):t.push(null)}return x(i)},da.selectAll\u003dfunction(n){var t,e,r\u003d[];n\u003d_(n);for(var u\u003d-1,i\u003dthis.length;++u\u003ci;)for(var o\u003dthis[u],a\u003d-1,c\u003do.length;++a\u003cc;)(e\u003do[a])\u0026\u0026(r.push(t\u003dBo(n.call(e,e.__data__,a,u))),t.parentNode\u003de);return x(r)};var ma\u003d{svg:\"http://www.w3.org/2000/svg\",xhtml:\"http://www.w3.org/1999/xhtml\",xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\",xmlns:\"http://www.w3.org/2000/xmlns/\"};Xo.ns\u003d{prefix:ma,qualify:function(n){var t\u003dn.indexOf(\":\"),e\u003dn;return t\u003e\u003d0\u0026\u0026(e\u003dn.substring(0,t),n\u003dn.substring(t+1)),ma.hasOwnProperty(e)?{space:ma[e],local:n}:n}},da.attr\u003dfunction(n,t){if(arguments.length\u003c2){if(\"string\"\u003d\u003dtypeof n){var e\u003dthis.node();return n\u003dXo.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(b(t,n[t]));return this}return this.each(b(n,t))},da.classed\u003dfunction(n,t){if(arguments.length\u003c2){if(\"string\"\u003d\u003dtypeof n){var e\u003dthis.node(),r\u003d(n\u003dk(n)).length,u\u003d-1;if(t\u003de.classList){for(;++u\u003cr;)if(!t.contains(n[u]))return!1}else for(t\u003de.getAttribute(\"class\");++u\u003cr;)if(!S(n[u]).test(t))return!1;return!0}for(t in n)this.each(E(t,n[t]));return this}return this.each(E(n,t))},da.style\u003dfunction(n,t,e){var r\u003darguments.length;if(3\u003er){if(\"string\"!\u003dtypeof n){2\u003er\u0026\u0026(t\u003d\"\");for(e in n)this.each(C(e,n[e],t));return this}if(2\u003er)return Go.getComputedStyle(this.node(),null).getPropertyValue(n);e\u003d\"\"}return this.each(C(n,t,e))},da.property\u003dfunction(n,t){if(arguments.length\u003c2){if(\"string\"\u003d\u003dtypeof n)return this.node()[n];for(t in n)this.each(N(t,n[t]));return this}return this.each(N(n,t))},da.text\u003dfunction(n){return arguments.length?this.each(\"function\"\u003d\u003dtypeof n?function(){var t\u003dn.apply(this,arguments);this.textContent\u003dnull\u003d\u003dt?\"\":t}:null\u003d\u003dn?function(){this.textContent\u003d\"\"}:function(){this.textContent\u003dn}):this.node().textContent},da.html\u003dfunction(n){return arguments.length?this.each(\"function\"\u003d\u003dtypeof n?function(){var t\u003dn.apply(this,arguments);this.innerHTML\u003dnull\u003d\u003dt?\"\":t}:null\u003d\u003dn?function(){this.innerHTML\u003d\"\"}:function(){this.innerHTML\u003dn}):this.node().innerHTML},da.append\u003dfunction(n){return n\u003dL(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},da.insert\u003dfunction(n,t){return n\u003dL(n),t\u003dM(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},da.remove\u003dfunction(){return this.each(function(){var n\u003dthis.parentNode;n\u0026\u0026n.removeChild(this)})},da.data\u003dfunction(n,t){function e(n,e){var r,i,o,a\u003dn.length,f\u003de.length,h\u003dMath.min(a,f),g\u003dnew Array(f),p\u003dnew Array(f),v\u003dnew Array(a);if(t){var d,m\u003dnew u,y\u003dnew u,x\u003d[];for(r\u003d-1;++r\u003ca;)d\u003dt.call(i\u003dn[r],i.__data__,r),m.has(d)?v[r]\u003di:m.set(d,i),x.push(d);for(r\u003d-1;++r\u003cf;)d\u003dt.call(e,o\u003de[r],r),(i\u003dm.get(d))?(g[r]\u003di,i.__data__\u003do):y.has(d)||(p[r]\u003dz(o)),y.set(d,o),m.remove(d);for(r\u003d-1;++r\u003ca;)m.has(x[r])\u0026\u0026(v[r]\u003dn[r])}else{for(r\u003d-1;++r\u003ch;)i\u003dn[r],o\u003de[r],i?(i.__data__\u003do,g[r]\u003di):p[r]\u003dz(o);for(;f\u003er;++r)p[r]\u003dz(e[r]);for(;a\u003er;++r)v[r]\u003dn[r]}p.update\u003dg,p.parentNode\u003dg.parentNode\u003dv.parentNode\u003dn.parentNode,c.push(p),s.push(g),l.push(v)}var r,i,o\u003d-1,a\u003dthis.length;if(!arguments.length){for(n\u003dnew Array(a\u003d(r\u003dthis[0]).length);++o\u003ca;)(i\u003dr[o])\u0026\u0026(n[o]\u003di.__data__);return n}var c\u003dD([]),s\u003dx([]),l\u003dx([]);if(\"function\"\u003d\u003dtypeof n)for(;++o\u003ca;)e(r\u003dthis[o],n.call(r,r.parentNode.__data__,o));else for(;++o\u003ca;)e(r\u003dthis[o],n);return s.enter\u003dfunction(){return c},s.exit\u003dfunction(){return l},s},da.datum\u003dfunction(n){return arguments.length?this.property(\"__data__\",n):this.property(\"__data__\")},da.filter\u003dfunction(n){var t,e,r,u\u003d[];\"function\"!\u003dtypeof n\u0026\u0026(n\u003dq(n));for(var i\u003d0,o\u003dthis.length;o\u003ei;i++){u.push(t\u003d[]),t.parentNode\u003d(e\u003dthis[i]).parentNode;for(var a\u003d0,c\u003de.length;c\u003ea;a++)(r\u003de[a])\u0026\u0026n.call(r,r.__data__,a,i)\u0026\u0026t.push(r)}return x(u)},da.order\u003dfunction(){for(var n\u003d-1,t\u003dthis.length;++n\u003ct;)for(var e,r\u003dthis[n],u\u003dr.length-1,i\u003dr[u];--u\u003e\u003d0;)(e\u003dr[u])\u0026\u0026(i\u0026\u0026i!\u003d\u003de.nextSibling\u0026\u0026i.parentNode.insertBefore(e,i),i\u003de);return this},da.sort\u003dfunction(n){n\u003dT.apply(this,arguments);for(var t\u003d-1,e\u003dthis.length;++t\u003ce;)this[t].sort(n);return this.order()},da.each\u003dfunction(n){return R(this,function(t,e,r){n.call(t,t.__data__,e,r)})},da.call\u003dfunction(n){var t\u003dBo(arguments);return n.apply(t[0]\u003dthis,t),this},da.empty\u003dfunction(){return!this.node()},da.node\u003dfunction(){for(var n\u003d0,t\u003dthis.length;t\u003en;n++)for(var e\u003dthis[n],r\u003d0,u\u003de.length;u\u003er;r++){var i\u003de[r];if(i)return i}return null},da.size\u003dfunction(){var n\u003d0;return this.each(function(){++n}),n};var ya\u003d[];Xo.selection.enter\u003dD,Xo.selection.enter.prototype\u003dya,ya.append\u003dda.append,ya.empty\u003dda.empty,ya.node\u003dda.node,ya.call\u003dda.call,ya.size\u003dda.size,ya.select\u003dfunction(n){for(var t,e,r,u,i,o\u003d[],a\u003d-1,c\u003dthis.length;++a\u003cc;){r\u003d(u\u003dthis[a]).update,o.push(t\u003d[]),t.parentNode\u003du.parentNode;for(var s\u003d-1,l\u003du.length;++s\u003cl;)(i\u003du[s])?(t.push(r[s]\u003de\u003dn.call(u.parentNode,i.__data__,s,a)),e.__data__\u003di.__data__):t.push(null)}return x(o)},ya.insert\u003dfunction(n,t){return arguments.length\u003c2\u0026\u0026(t\u003dP(this)),da.insert.call(this,n,t)},da.transition\u003dfunction(){for(var n,t,e\u003dks||++Ls,r\u003d[],u\u003dEs||{time:Date.now(),ease:yu,delay:0,duration:250},i\u003d-1,o\u003dthis.length;++i\u003co;){r.push(n\u003d[]);for(var a\u003dthis[i],c\u003d-1,s\u003da.length;++c\u003cs;)(t\u003da[c])\u0026\u0026jo(t,c,e,u),n.push(t)}return Do(r,e)},da.interrupt\u003dfunction(){return this.each(U)},Xo.select\u003dfunction(n){var t\u003d[\"string\"\u003d\u003dtypeof n?ha(n,Wo):n];return t.parentNode\u003dJo,x([t])},Xo.selectAll\u003dfunction(n){var t\u003dBo(\"string\"\u003d\u003dtypeof n?ga(n,Wo):n);return t.parentNode\u003dJo,x([t])};var xa\u003dXo.select(Jo);da.on\u003dfunction(n,t,e){var r\u003darguments.length;if(3\u003er){if(\"string\"!\u003dtypeof n){2\u003er\u0026\u0026(t\u003d!1);for(e in n)this.each(j(e,n[e],t));return this}if(2\u003er)return(r\u003dthis.node()[\"__on\"+n])\u0026\u0026r._;e\u003d!1}return this.each(j(n,t,e))};var Ma\u003dXo.map({mouseenter:\"mouseover\",mouseleave:\"mouseout\"});Ma.forEach(function(n){\"on\"+n in Wo\u0026\u0026Ma.remove(n)});var _a\u003d\"onselectstart\"in Wo?null:h(Jo.style,\"userSelect\"),ba\u003d0;Xo.mouse\u003dfunction(n){return Y(n,m())};var wa\u003d/WebKit/.test(Go.navigator.userAgent)?-1:0;Xo.touches\u003dfunction(n,t){return arguments.length\u003c2\u0026\u0026(t\u003dm().touches),t?Bo(t).map(function(t){var e\u003dY(n,t);return e.identifier\u003dt.identifier,e}):[]},Xo.behavior.drag\u003dfunction(){function n(){this.on(\"mousedown.drag\",o).on(\"touchstart.drag\",a)}function t(){return Xo.event.changedTouches[0].identifier}function e(n,t){return Xo.touches(n).filter(function(n){return n.identifier\u003d\u003d\u003dt})[0]}function r(n,t,e,r){return function(){function o(){var n\u003dt(l,g),e\u003dn[0]-v[0],r\u003dn[1]-v[1];d|\u003de|r,v\u003dn,f({type:\"drag\",x:n[0]+c[0],y:n[1]+c[1],dx:e,dy:r})}function a(){m.on(e+\".\"+p,null).on(r+\".\"+p,null),y(d\u0026\u0026Xo.event.target\u003d\u003d\u003dh),f({type:\"dragend\"})}var c,s\u003dthis,l\u003ds.parentNode,f\u003du.of(s,arguments),h\u003dXo.event.target,g\u003dn(),p\u003dnull\u003d\u003dg?\"drag\":\"drag-\"+g,v\u003dt(l,g),d\u003d0,m\u003dXo.select(Go).on(e+\".\"+p,o).on(r+\".\"+p,a),y\u003dO();i?(c\u003di.apply(s,arguments),c\u003d[c.x-v[0],c.y-v[1]]):c\u003d[0,0],f({type:\"dragstart\"})}}var u\u003dy(n,\"drag\",\"dragstart\",\"dragend\"),i\u003dnull,o\u003dr(g,Xo.mouse,\"mousemove\",\"mouseup\"),a\u003dr(t,e,\"touchmove\",\"touchend\");return n.origin\u003dfunction(t){return arguments.length?(i\u003dt,n):i},Xo.rebind(n,u,\"on\")};var Sa\u003dMath.PI,ka\u003d2*Sa,Ea\u003dSa/2,Aa\u003d1e-6,Ca\u003dAa*Aa,Na\u003dSa/180,La\u003d180/Sa,za\u003dMath.SQRT2,qa\u003d2,Ta\u003d4;Xo.interpolateZoom\u003dfunction(n,t){function e(n){var t\u003dn*y;if(m){var e\u003dB(v),o\u003di/(qa*h)*(e*W(za*t+v)-$(v));return[r+o*s,u+o*l,i*e/B(za*t+v)]}return[r+n*s,u+n*l,i*Math.exp(za*t)]}var r\u003dn[0],u\u003dn[1],i\u003dn[2],o\u003dt[0],a\u003dt[1],c\u003dt[2],s\u003do-r,l\u003da-u,f\u003ds*s+l*l,h\u003dMath.sqrt(f),g\u003d(c*c-i*i+Ta*f)/(2*i*qa*h),p\u003d(c*c-i*i-Ta*f)/(2*c*qa*h),v\u003dMath.log(Math.sqrt(g*g+1)-g),d\u003dMath.log(Math.sqrt(p*p+1)-p),m\u003dd-v,y\u003d(m||Math.log(c/i))/za;return e.duration\u003d1e3*y,e},Xo.behavior.zoom\u003dfunction(){function n(n){n.on(A,s).on(Pa+\".zoom\",f).on(C,h).on(\"dblclick.zoom\",g).on(L,l)}function t(n){return[(n[0]-S.x)/S.k,(n[1]-S.y)/S.k]}function e(n){return[n[0]*S.k+S.x,n[1]*S.k+S.y]}function r(n){S.k\u003dMath.max(E[0],Math.min(E[1],n))}function u(n,t){t\u003de(t),S.x+\u003dn[0]-t[0],S.y+\u003dn[1]-t[1]}function i(){_\u0026\u0026_.domain(M.range().map(function(n){return(n-S.x)/S.k}).map(M.invert)),w\u0026\u0026w.domain(b.range().map(function(n){return(n-S.y)/S.k}).map(b.invert))}function o(n){n({type:\"zoomstart\"})}function a(n){i(),n({type:\"zoom\",scale:S.k,translate:[S.x,S.y]})}function c(n){n({type:\"zoomend\"})}function s(){function n(){l\u003d1,u(Xo.mouse(r),g),a(i)}function e(){f.on(C,Go\u003d\u003d\u003dr?h:null).on(N,null),p(l\u0026\u0026Xo.event.target\u003d\u003d\u003ds),c(i)}var r\u003dthis,i\u003dz.of(r,arguments),s\u003dXo.event.target,l\u003d0,f\u003dXo.select(Go).on(C,n).on(N,e),g\u003dt(Xo.mouse(r)),p\u003dO();U.call(r),o(i)}function l(){function n(){var n\u003dXo.touches(g);return h\u003dS.k,n.forEach(function(n){n.identifier in v\u0026\u0026(v[n.identifier]\u003dt(n))}),n}function e(){for(var t\u003dXo.event.changedTouches,e\u003d0,i\u003dt.length;i\u003ee;++e)v[t[e].identifier]\u003dnull;var o\u003dn(),c\u003dDate.now();if(1\u003d\u003d\u003do.length){if(500\u003ec-x){var s\u003do[0],l\u003dv[s.identifier];r(2*S.k),u(s,l),d(),a(p)}x\u003dc}else if(o.length\u003e1){var s\u003do[0],f\u003do[1],h\u003ds[0]-f[0],g\u003ds[1]-f[1];m\u003dh*h+g*g}}function i(){for(var n,t,e,i,o\u003dXo.touches(g),c\u003d0,s\u003do.length;s\u003ec;++c,i\u003dnull)if(e\u003do[c],i\u003dv[e.identifier]){if(t)break;n\u003de,t\u003di}if(i){var l\u003d(l\u003de[0]-n[0])*l+(l\u003de[1]-n[1])*l,f\u003dm\u0026\u0026Math.sqrt(l/m);n\u003d[(n[0]+e[0])/2,(n[1]+e[1])/2],t\u003d[(t[0]+i[0])/2,(t[1]+i[1])/2],r(f*h)}x\u003dnull,u(n,t),a(p)}function f(){if(Xo.event.touches.length){for(var t\u003dXo.event.changedTouches,e\u003d0,r\u003dt.length;r\u003ee;++e)delete v[t[e].identifier];for(var u in v)return void n()}b.on(M,null).on(_,null),w.on(A,s).on(L,l),k(),c(p)}var h,g\u003dthis,p\u003dz.of(g,arguments),v\u003d{},m\u003d0,y\u003dXo.event.changedTouches[0].identifier,M\u003d\"touchmove.zoom-\"+y,_\u003d\"touchend.zoom-\"+y,b\u003dXo.select(Go).on(M,i).on(_,f),w\u003dXo.select(g).on(A,null).on(L,e),k\u003dO();U.call(g),e(),o(p)}function f(){var n\u003dz.of(this,arguments);m?clearTimeout(m):(U.call(this),o(n)),m\u003dsetTimeout(function(){m\u003dnull,c(n)},50),d();var e\u003dv||Xo.mouse(this);p||(p\u003dt(e)),r(Math.pow(2,.002*Ra())*S.k),u(e,p),a(n)}function h(){p\u003dnull}function g(){var n\u003dz.of(this,arguments),e\u003dXo.mouse(this),i\u003dt(e),s\u003dMath.log(S.k)/Math.LN2;o(n),r(Math.pow(2,Xo.event.shiftKey?Math.ceil(s)-1:Math.floor(s)+1)),u(e,i),a(n),c(n)}var p,v,m,x,M,_,b,w,S\u003d{x:0,y:0,k:1},k\u003d[960,500],E\u003dDa,A\u003d\"mousedown.zoom\",C\u003d\"mousemove.zoom\",N\u003d\"mouseup.zoom\",L\u003d\"touchstart.zoom\",z\u003dy(n,\"zoomstart\",\"zoom\",\"zoomend\");return n.event\u003dfunction(n){n.each(function(){var n\u003dz.of(this,arguments),t\u003dS;ks?Xo.select(this).transition().each(\"start.zoom\",function(){S\u003dthis.__chart__||{x:0,y:0,k:1},o(n)}).tween(\"zoom:zoom\",function(){var e\u003dk[0],r\u003dk[1],u\u003de/2,i\u003dr/2,o\u003dXo.interpolateZoom([(u-S.x)/S.k,(i-S.y)/S.k,e/S.k],[(u-t.x)/t.k,(i-t.y)/t.k,e/t.k]);return function(t){var r\u003do(t),c\u003de/r[2];this.__chart__\u003dS\u003d{x:u-r[0]*c,y:i-r[1]*c,k:c},a(n)}}).each(\"end.zoom\",function(){c(n)}):(this.__chart__\u003dS,o(n),a(n),c(n))})},n.translate\u003dfunction(t){return arguments.length?(S\u003d{x:+t[0],y:+t[1],k:S.k},i(),n):[S.x,S.y]},n.scale\u003dfunction(t){return arguments.length?(S\u003d{x:S.x,y:S.y,k:+t},i(),n):S.k},n.scaleExtent\u003dfunction(t){return arguments.length?(E\u003dnull\u003d\u003dt?Da:[+t[0],+t[1]],n):E},n.center\u003dfunction(t){return arguments.length?(v\u003dt\u0026\u0026[+t[0],+t[1]],n):v},n.size\u003dfunction(t){return arguments.length?(k\u003dt\u0026\u0026[+t[0],+t[1]],n):k},n.x\u003dfunction(t){return arguments.length?(_\u003dt,M\u003dt.copy(),S\u003d{x:0,y:0,k:1},n):_},n.y\u003dfunction(t){return arguments.length?(w\u003dt,b\u003dt.copy(),S\u003d{x:0,y:0,k:1},n):w},Xo.rebind(n,z,\"on\")};var Ra,Da\u003d[0,1/0],Pa\u003d\"onwheel\"in Wo?(Ra\u003dfunction(){return-Xo.event.deltaY*(Xo.event.deltaMode?120:1)},\"wheel\"):\"onmousewheel\"in Wo?(Ra\u003dfunction(){return Xo.event.wheelDelta},\"mousewheel\"):(Ra\u003dfunction(){return-Xo.event.detail},\"MozMousePixelScroll\");G.prototype.toString\u003dfunction(){return this.rgb()+\"\"},Xo.hsl\u003dfunction(n,t,e){return 1\u003d\u003d\u003darguments.length?n instanceof Q?K(n.h,n.s,n.l):dt(\"\"+n,mt,K):K(+n,+t,+e)};var Ua\u003dQ.prototype\u003dnew G;Ua.brighter\u003dfunction(n){return n\u003dMath.pow(.7,arguments.length?n:1),K(this.h,this.s,this.l/n)},Ua.darker\u003dfunction(n){return n\u003dMath.pow(.7,arguments.length?n:1),K(this.h,this.s,n*this.l)},Ua.rgb\u003dfunction(){return nt(this.h,this.s,this.l)},Xo.hcl\u003dfunction(n,t,e){return 1\u003d\u003d\u003darguments.length?n instanceof et?tt(n.h,n.c,n.l):n instanceof it?at(n.l,n.a,n.b):at((n\u003dyt((n\u003dXo.rgb(n)).r,n.g,n.b)).l,n.a,n.b):tt(+n,+t,+e)};var ja\u003det.prototype\u003dnew G;ja.brighter\u003dfunction(n){return tt(this.h,this.c,Math.min(100,this.l+Ha*(arguments.length?n:1)))},ja.darker\u003dfunction(n){return tt(this.h,this.c,Math.max(0,this.l-Ha*(arguments.length?n:1)))},ja.rgb\u003dfunction(){return rt(this.h,this.c,this.l).rgb()},Xo.lab\u003dfunction(n,t,e){return 1\u003d\u003d\u003darguments.length?n instanceof it?ut(n.l,n.a,n.b):n instanceof et?rt(n.l,n.c,n.h):yt((n\u003dXo.rgb(n)).r,n.g,n.b):ut(+n,+t,+e)};var Ha\u003d18,Fa\u003d.95047,Oa\u003d1,Ya\u003d1.08883,Ia\u003dit.prototype\u003dnew G;Ia.brighter\u003dfunction(n){return ut(Math.min(100,this.l+Ha*(arguments.length?n:1)),this.a,this.b)},Ia.darker\u003dfunction(n){return ut(Math.max(0,this.l-Ha*(arguments.length?n:1)),this.a,this.b)},Ia.rgb\u003dfunction(){return ot(this.l,this.a,this.b)},Xo.rgb\u003dfunction(n,t,e){return 1\u003d\u003d\u003darguments.length?n instanceof pt?gt(n.r,n.g,n.b):dt(\"\"+n,gt,nt):gt(~~n,~~t,~~e)};var Za\u003dpt.prototype\u003dnew G;Za.brighter\u003dfunction(n){n\u003dMath.pow(.7,arguments.length?n:1);var t\u003dthis.r,e\u003dthis.g,r\u003dthis.b,u\u003d30;return t||e||r?(t\u0026\u0026u\u003et\u0026\u0026(t\u003du),e\u0026\u0026u\u003ee\u0026\u0026(e\u003du),r\u0026\u0026u\u003er\u0026\u0026(r\u003du),gt(Math.min(255,~~(t/n)),Math.min(255,~~(e/n)),Math.min(255,~~(r/n)))):gt(u,u,u)},Za.darker\u003dfunction(n){return n\u003dMath.pow(.7,arguments.length?n:1),gt(~~(n*this.r),~~(n*this.g),~~(n*this.b))},Za.hsl\u003dfunction(){return mt(this.r,this.g,this.b)},Za.toString\u003dfunction(){return\"#\"+vt(this.r)+vt(this.g)+vt(this.b)};var Va\u003dXo.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});Va.forEach(function(n,t){Va.set(n,ft(t))}),Xo.functor\u003d_t,Xo.xhr\u003dwt(bt),Xo.dsv\u003dfunction(n,t){function e(n,e,i){arguments.length\u003c3\u0026\u0026(i\u003de,e\u003dnull);var o\u003dSt(n,t,null\u003d\u003de?r:u(e),i);return o.row\u003dfunction(n){return arguments.length?o.response(null\u003d\u003d(e\u003dn)?r:u(n)):e},o}function r(n){return e.parse(n.responseText)}function u(n){return function(t){return e.parse(t.responseText,n)}}function i(t){return t.map(o).join(n)}function o(n){return a.test(n)?\u0027\"\u0027+n.replace(/\\\"/g,\u0027\"\"\u0027)+\u0027\"\u0027:n}var a\u003dnew RegExp(\u0027[\"\u0027+n+\"\\n]\"),c\u003dn.charCodeAt(0);return e.parse\u003dfunction(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var u\u003dnew Function(\"d\",\"return {\"+n.map(function(n,t){return JSON.stringify(n)+\": d[\"+t+\"]\"}).join(\",\")+\"}\");r\u003dt?function(n,e){return t(u(n),e)}:u})},e.parseRows\u003dfunction(n,t){function e(){if(l\u003e\u003ds)return o;if(u)return u\u003d!1,i;var t\u003dl;if(34\u003d\u003d\u003dn.charCodeAt(t)){for(var e\u003dt;e++\u003cs;)if(34\u003d\u003d\u003dn.charCodeAt(e)){if(34!\u003d\u003dn.charCodeAt(e+1))break;++e}l\u003de+2;var r\u003dn.charCodeAt(e+1);return 13\u003d\u003d\u003dr?(u\u003d!0,10\u003d\u003d\u003dn.charCodeAt(e+2)\u0026\u0026++l):10\u003d\u003d\u003dr\u0026\u0026(u\u003d!0),n.substring(t+1,e).replace(/\"\"/g,\u0027\"\u0027)}for(;s\u003el;){var r\u003dn.charCodeAt(l++),a\u003d1;if(10\u003d\u003d\u003dr)u\u003d!0;else if(13\u003d\u003d\u003dr)u\u003d!0,10\u003d\u003d\u003dn.charCodeAt(l)\u0026\u0026(++l,++a);else if(r!\u003d\u003dc)continue;return n.substring(t,l-a)}return n.substring(t)}for(var r,u,i\u003d{},o\u003d{},a\u003d[],s\u003dn.length,l\u003d0,f\u003d0;(r\u003de())!\u003d\u003do;){for(var h\u003d[];r!\u003d\u003di\u0026\u0026r!\u003d\u003do;)h.push(r),r\u003de();(!t||(h\u003dt(h,f++)))\u0026\u0026a.push(h)}return a},e.format\u003dfunction(t){if(Array.isArray(t[0]))return e.formatRows(t);var r\u003dnew l,u\u003d[];return t.forEach(function(n){for(var t in n)r.has(t)||u.push(r.add(t))}),[u.map(o).join(n)].concat(t.map(function(t){return u.map(function(n){return o(t[n])}).join(n)})).join(\"\\n\")},e.formatRows\u003dfunction(n){return n.map(i).join(\"\\n\")},e},Xo.csv\u003dXo.dsv(\",\",\"text/csv\"),Xo.tsv\u003dXo.dsv(\"\t\",\"text/tab-separated-values\");var Xa,$a,Ba,Wa,Ja,Ga\u003dGo[h(Go,\"requestAnimationFrame\")]||function(n){setTimeout(n,17)};Xo.timer\u003dfunction(n,t,e){var r\u003darguments.length;2\u003er\u0026\u0026(t\u003d0),3\u003er\u0026\u0026(e\u003dDate.now());var u\u003de+t,i\u003d{c:n,t:u,f:!1,n:null};$a?$a.n\u003di:Xa\u003di,$a\u003di,Ba||(Wa\u003dclearTimeout(Wa),Ba\u003d1,Ga(Et))},Xo.timer.flush\u003dfunction(){At(),Ct()},Xo.round\u003dfunction(n,t){return t?Math.round(n*(t\u003dMath.pow(10,t)))/t:Math.round(n)};var Ka\u003d[\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\\xb5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"].map(Lt);Xo.formatPrefix\u003dfunction(n,t){var e\u003d0;return n\u0026\u0026(0\u003en\u0026\u0026(n*\u003d-1),t\u0026\u0026(n\u003dXo.round(n,Nt(n,t))),e\u003d1+Math.floor(1e-12+Math.log(n)/Math.LN10),e\u003dMath.max(-24,Math.min(24,3*Math.floor((0\u003e\u003de?e+1:e-1)/3)))),Ka[8+e/3]};var Qa\u003d/(?:([^{])?([\u003c\u003e\u003d^]))?([+\\- ])?([$#])?(0)?(\\d+)?(,)?(\\.-?\\d+)?([a-z%])?/i,nc\u003dXo.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n\u003dXo.round(n,Nt(n,t))).toFixed(Math.max(0,Math.min(20,Nt(n*(1+1e-15),t))))}}),tc\u003dXo.time\u003d{},ec\u003dDate;Tt.prototype\u003d{getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){rc.setUTCDate.apply(this._,arguments)},setDay:function(){rc.setUTCDay.apply(this._,arguments)},setFullYear:function(){rc.setUTCFullYear.apply(this._,arguments)},setHours:function(){rc.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){rc.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){rc.setUTCMinutes.apply(this._,arguments)},setMonth:function(){rc.setUTCMonth.apply(this._,arguments)},setSeconds:function(){rc.setUTCSeconds.apply(this._,arguments)},setTime:function(){rc.setTime.apply(this._,arguments)}};var rc\u003dDate.prototype;tc.year\u003dRt(function(n){return n\u003dtc.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),tc.years\u003dtc.year.range,tc.years.utc\u003dtc.year.utc.range,tc.day\u003dRt(function(n){var t\u003dnew ec(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),tc.days\u003dtc.day.range,tc.days.utc\u003dtc.day.utc.range,tc.dayOfYear\u003dfunction(n){var t\u003dtc.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},[\"sunday\",\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\"].forEach(function(n,t){t\u003d7-t;var e\u003dtc[n]\u003dRt(function(n){return(n\u003dtc.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e\u003dtc.year(n).getDay();return Math.floor((tc.dayOfYear(n)+(e+t)%7)/7)-(e!\u003d\u003dt)});tc[n+\"s\"]\u003de.range,tc[n+\"s\"].utc\u003de.utc.range,tc[n+\"OfYear\"]\u003dfunction(n){var e\u003dtc.year(n).getDay();return Math.floor((tc.dayOfYear(n)+(e+t)%7)/7)}}),tc.week\u003dtc.sunday,tc.weeks\u003dtc.sunday.range,tc.weeks.utc\u003dtc.sunday.utc.range,tc.weekOfYear\u003dtc.sundayOfYear;var uc\u003d{\"-\":\"\",_:\" \",0:\"0\"},ic\u003d/^\\s*\\d+/,oc\u003d/^%/;Xo.locale\u003dfunction(n){return{numberFormat:zt(n),timeFormat:Pt(n)}};var ac\u003dXo.locale({decimal:\".\",thousands:\",\",grouping:[3],currency:[\"$\",\"\"],dateTime:\"%a %b %e %X %Y\",date:\"%m/%d/%Y\",time:\"%H:%M:%S\",periods:[\"AM\",\"PM\"],days:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],shortDays:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],months:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],shortMonths:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]});Xo.format\u003dac.numberFormat,Xo.geo\u003d{},re.prototype\u003d{s:0,t:0,add:function(n){ue(n,this.t,cc),ue(cc.s,this.s,this),this.s?this.t+\u003dcc.t:this.s\u003dcc.t},reset:function(){this.s\u003dthis.t\u003d0},valueOf:function(){return this.s}};var cc\u003dnew re;Xo.geo.stream\u003dfunction(n,t){n\u0026\u0026sc.hasOwnProperty(n.type)?sc[n.type](n,t):ie(n,t)};var sc\u003d{Feature:function(n,t){ie(n.geometry,t)},FeatureCollection:function(n,t){for(var e\u003dn.features,r\u003d-1,u\u003de.length;++r\u003cu;)ie(e[r].geometry,t)}},lc\u003d{Sphere:function(n,t){t.sphere()},Point:function(n,t){n\u003dn.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e\u003dn.coordinates,r\u003d-1,u\u003de.length;++r\u003cu;)n\u003de[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){oe(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e\u003dn.coordinates,r\u003d-1,u\u003de.length;++r\u003cu;)oe(e[r],t,0)},Polygon:function(n,t){ae(n.coordinates,t)},MultiPolygon:function(n,t){for(var e\u003dn.coordinates,r\u003d-1,u\u003de.length;++r\u003cu;)ae(e[r],t)},GeometryCollection:function(n,t){for(var e\u003dn.geometries,r\u003d-1,u\u003de.length;++r\u003cu;)ie(e[r],t)}};Xo.geo.area\u003dfunction(n){return fc\u003d0,Xo.geo.stream(n,gc),fc};var fc,hc\u003dnew re,gc\u003d{sphere:function(){fc+\u003d4*Sa},point:g,lineStart:g,lineEnd:g,polygonStart:function(){hc.reset(),gc.lineStart\u003dce},polygonEnd:function(){var n\u003d2*hc;fc+\u003d0\u003en?4*Sa+n:n,gc.lineStart\u003dgc.lineEnd\u003dgc.point\u003dg}};Xo.geo.bounds\u003dfunction(){function n(n,t){x.push(M\u003d[l\u003dn,h\u003dn]),f\u003et\u0026\u0026(f\u003dt),t\u003eg\u0026\u0026(g\u003dt)}function t(t,e){var r\u003dse([t*Na,e*Na]);if(m){var u\u003dfe(m,r),i\u003d[u[1],-u[0],0],o\u003dfe(i,u);pe(o),o\u003dve(o);var c\u003dt-p,s\u003dc\u003e0?1:-1,v\u003do[0]*La*s,d\u003doa(c)\u003e180;if(d^(v\u003es*p\u0026\u0026s*t\u003ev)){var y\u003do[1]*La;y\u003eg\u0026\u0026(g\u003dy)}else if(v\u003d(v+360)%360-180,d^(v\u003es*p\u0026\u0026s*t\u003ev)){var y\u003d-o[1]*La;f\u003ey\u0026\u0026(f\u003dy)}else f\u003ee\u0026\u0026(f\u003de),e\u003eg\u0026\u0026(g\u003de);d?p\u003et?a(l,t)\u003ea(l,h)\u0026\u0026(h\u003dt):a(t,h)\u003ea(l,h)\u0026\u0026(l\u003dt):h\u003e\u003dl?(l\u003et\u0026\u0026(l\u003dt),t\u003eh\u0026\u0026(h\u003dt)):t\u003ep?a(l,t)\u003ea(l,h)\u0026\u0026(h\u003dt):a(t,h)\u003ea(l,h)\u0026\u0026(l\u003dt)}else n(t,e);m\u003dr,p\u003dt}function e(){_.point\u003dt}function r(){M[0]\u003dl,M[1]\u003dh,_.point\u003dn,m\u003dnull}function u(n,e){if(m){var r\u003dn-p;y+\u003doa(r)\u003e180?r+(r\u003e0?360:-360):r}else v\u003dn,d\u003de;gc.point(n,e),t(n,e)}function i(){gc.lineStart()}function o(){u(v,d),gc.lineEnd(),oa(y)\u003eAa\u0026\u0026(l\u003d-(h\u003d180)),M[0]\u003dl,M[1]\u003dh,m\u003dnull}function a(n,t){return(t-\u003dn)\u003c0?t+360:t}function c(n,t){return n[0]-t[0]}function s(n,t){return t[0]\u003c\u003dt[1]?t[0]\u003c\u003dn\u0026\u0026n\u003c\u003dt[1]:n\u003ct[0]||t[1]\u003cn}var l,f,h,g,p,v,d,m,y,x,M,_\u003d{point:n,lineStart:e,lineEnd:r,polygonStart:function(){_.point\u003du,_.lineStart\u003di,_.lineEnd\u003do,y\u003d0,gc.polygonStart()},polygonEnd:function(){gc.polygonEnd(),_.point\u003dn,_.lineStart\u003de,_.lineEnd\u003dr,0\u003ehc?(l\u003d-(h\u003d180),f\u003d-(g\u003d90)):y\u003eAa?g\u003d90:-Aa\u003ey\u0026\u0026(f\u003d-90),M[0]\u003dl,M[1]\u003dh"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}};return function(n){g\u003dh\u003d-(l\u003df\u003d1/0),x\u003d[],Xo.geo.stream(n,_);var t\u003dx.length;if(t){x.sort(c);for(var e,r\u003d1,u\u003dx[0],i\u003d[u];t\u003er;++r)e\u003dx[r],s(e[0],u)||s(e[1],u)?(a(u[0],e[1])\u003ea(u[0],u[1])\u0026\u0026(u[1]\u003de[1]),a(e[0],u[1])\u003ea(u[0],u[1])\u0026\u0026(u[0]\u003de[0])):i.push(u\u003de);for(var o,e,p\u003d-1/0,t\u003di.length-1,r\u003d0,u\u003di[t];t\u003e\u003dr;u\u003de,++r)e\u003di[r],(o\u003da(u[1],e[0]))\u003ep\u0026\u0026(p\u003do,l\u003de[0],h\u003du[1])}return x\u003dM\u003dnull,1/0\u003d\u003d\u003dl||1/0\u003d\u003d\u003df?[[0/0,0/0],[0/0,0/0]]:[[l,f],[h,g]]}}(),Xo.geo.centroid\u003dfunction(n){pc\u003dvc\u003ddc\u003dmc\u003dyc\u003dxc\u003dMc\u003d_c\u003dbc\u003dwc\u003dSc\u003d0,Xo.geo.stream(n,kc);var t\u003dbc,e\u003dwc,r\u003dSc,u\u003dt*t+e*e+r*r;return Ca\u003eu\u0026\u0026(t\u003dxc,e\u003dMc,r\u003d_c,Aa\u003evc\u0026\u0026(t\u003ddc,e\u003dmc,r\u003dyc),u\u003dt*t+e*e+r*r,Ca\u003eu)?[0/0,0/0]:[Math.atan2(e,t)*La,X(r/Math.sqrt(u))*La]};var pc,vc,dc,mc,yc,xc,Mc,_c,bc,wc,Sc,kc\u003d{sphere:g,point:me,lineStart:xe,lineEnd:Me,polygonStart:function(){kc.lineStart\u003d_e},polygonEnd:function(){kc.lineStart\u003dxe}},Ec\u003dEe(be,ze,Te,[-Sa,-Sa/2]),Ac\u003d1e9;Xo.geo.clipExtent\u003dfunction(){var n,t,e,r,u,i,o\u003d{stream:function(n){return u\u0026\u0026(u.valid\u003d!1),u\u003di(n),u.valid\u003d!0,u},extent:function(a){return arguments.length?(i\u003dPe(n\u003d+a[0][0],t\u003d+a[0][1],e\u003d+a[1][0],r\u003d+a[1][1]),u\u0026\u0026(u.valid\u003d!1,u\u003dnull),o):[[n,t],[e,r]]}};return o.extent([[0,0],[960,500]])},(Xo.geo.conicEqualArea\u003dfunction(){return je(He)}).raw\u003dHe,Xo.geo.albers\u003dfunction(){return Xo.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},Xo.geo.albersUsa\u003dfunction(){function n(n){var i\u003dn[0],o\u003dn[1];return t\u003dnull,e(i,o),t||(r(i,o),t)||u(i,o),t}var t,e,r,u,i\u003dXo.geo.albers(),o\u003dXo.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),a\u003dXo.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c\u003d{point:function(n,e){t\u003d[n,e]}};return n.invert\u003dfunction(n){var t\u003di.scale(),e\u003di.translate(),r\u003d(n[0]-e[0])/t,u\u003d(n[1]-e[1])/t;return(u\u003e\u003d.12\u0026\u0026.234\u003eu\u0026\u0026r\u003e\u003d-.425\u0026\u0026-.214\u003er?o:u\u003e\u003d.166\u0026\u0026.234\u003eu\u0026\u0026r\u003e\u003d-.214\u0026\u0026-.115\u003er?a:i).invert(n)},n.stream\u003dfunction(n){var t\u003di.stream(n),e\u003do.stream(n),r\u003da.stream(n);return{point:function(n,u){t.point(n,u),e.point(n,u),r.point(n,u)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision\u003dfunction(t){return arguments.length?(i.precision(t),o.precision(t),a.precision(t),n):i.precision()},n.scale\u003dfunction(t){return arguments.length?(i.scale(t),o.scale(.35*t),a.scale(t),n.translate(i.translate())):i.scale()},n.translate\u003dfunction(t){if(!arguments.length)return i.translate();var s\u003di.scale(),l\u003d+t[0],f\u003d+t[1];return e\u003di.translate(t).clipExtent([[l-.455*s,f-.238*s],[l+.455*s,f+.238*s]]).stream(c).point,r\u003do.translate([l-.307*s,f+.201*s]).clipExtent([[l-.425*s+Aa,f+.12*s+Aa],[l-.214*s-Aa,f+.234*s-Aa]]).stream(c).point,u\u003da.translate([l-.205*s,f+.212*s]).clipExtent([[l-.214*s+Aa,f+.166*s+Aa],[l-.115*s-Aa,f+.234*s-Aa]]).stream(c).point,n},n.scale(1070)};var Cc,Nc,Lc,zc,qc,Tc,Rc\u003d{point:g,lineStart:g,lineEnd:g,polygonStart:function(){Nc\u003d0,Rc.lineStart\u003dFe},polygonEnd:function(){Rc.lineStart\u003dRc.lineEnd\u003dRc.point\u003dg,Cc+\u003doa(Nc/2)}},Dc\u003d{point:Oe,lineStart:g,lineEnd:g,polygonStart:g,polygonEnd:g},Pc\u003d{point:Ze,lineStart:Ve,lineEnd:Xe,polygonStart:function(){Pc.lineStart\u003d$e},polygonEnd:function(){Pc.point\u003dZe,Pc.lineStart\u003dVe,Pc.lineEnd\u003dXe}};Xo.geo.path\u003dfunction(){function n(n){return n\u0026\u0026(\"function\"\u003d\u003dtypeof a\u0026\u0026i.pointRadius(+a.apply(this,arguments)),o\u0026\u0026o.valid||(o\u003du(i)),Xo.geo.stream(n,o)),i.result()}function t(){return o\u003dnull,n}var e,r,u,i,o,a\u003d4.5;return n.area\u003dfunction(n){return Cc\u003d0,Xo.geo.stream(n,u(Rc)),Cc},n.centroid\u003dfunction(n){return dc\u003dmc\u003dyc\u003dxc\u003dMc\u003d_c\u003dbc\u003dwc\u003dSc\u003d0,Xo.geo.stream(n,u(Pc)),Sc?[bc/Sc,wc/Sc]:_c?[xc/_c,Mc/_c]:yc?[dc/yc,mc/yc]:[0/0,0/0]},n.bounds\u003dfunction(n){return qc\u003dTc\u003d-(Lc\u003dzc\u003d1/0),Xo.geo.stream(n,u(Dc)),[[Lc,zc],[qc,Tc]]},n.projection\u003dfunction(n){return arguments.length?(u\u003d(e\u003dn)?n.stream||Je(n):bt,t()):e},n.context\u003dfunction(n){return arguments.length?(i\u003dnull\u003d\u003d(r\u003dn)?new Ye:new Be(n),\"function\"!\u003dtypeof a\u0026\u0026i.pointRadius(a),t()):r},n.pointRadius\u003dfunction(t){return arguments.length?(a\u003d\"function\"\u003d\u003dtypeof t?t:(i.pointRadius(+t),+t),n):a},n.projection(Xo.geo.albersUsa()).context(null)},Xo.geo.transform\u003dfunction(n){return{stream:function(t){var e\u003dnew Ge(t);for(var r in n)e[r]\u003dn[r];return e}}},Ge.prototype\u003d{point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},Xo.geo.projection\u003dQe,Xo.geo.projectionMutator\u003dnr,(Xo.geo.equirectangular\u003dfunction(){return Qe(er)}).raw\u003der.invert\u003der,Xo.geo.rotation\u003dfunction(n){function t(t){return t\u003dn(t[0]*Na,t[1]*Na),t[0]*\u003dLa,t[1]*\u003dLa,t}return n\u003dur(n[0]%360*Na,n[1]*Na,n.length\u003e2?n[2]*Na:0),t.invert\u003dfunction(t){return t\u003dn.invert(t[0]*Na,t[1]*Na),t[0]*\u003dLa,t[1]*\u003dLa,t},t},rr.invert\u003der,Xo.geo.circle\u003dfunction(){function n(){var n\u003d\"function\"\u003d\u003dtypeof r?r.apply(this,arguments):r,t\u003dur(-n[0]*Na,-n[1]*Na,0).invert,u\u003d[];return e(null,null,1,{point:function(n,e){u.push(n\u003dt(n,e)),n[0]*\u003dLa,n[1]*\u003dLa}}),{type:\"Polygon\",coordinates:[u]}}var t,e,r\u003d[0,0],u\u003d6;return n.origin\u003dfunction(t){return arguments.length?(r\u003dt,n):r},n.angle\u003dfunction(r){return arguments.length?(e\u003dcr((t\u003d+r)*Na,u*Na),n):t},n.precision\u003dfunction(r){return arguments.length?(e\u003dcr(t*Na,(u\u003d+r)*Na),n):u},n.angle(90)},Xo.geo.distance\u003dfunction(n,t){var e,r\u003d(t[0]-n[0])*Na,u\u003dn[1]*Na,i\u003dt[1]*Na,o\u003dMath.sin(r),a\u003dMath.cos(r),c\u003dMath.sin(u),s\u003dMath.cos(u),l\u003dMath.sin(i),f\u003dMath.cos(i);return Math.atan2(Math.sqrt((e\u003df*o)*e+(e\u003ds*l-c*f*a)*e),c*l+s*f*a)},Xo.geo.graticule\u003dfunction(){function n(){return{type:\"MultiLineString\",coordinates:t()}}function t(){return Xo.range(Math.ceil(i/d)*d,u,d).map(h).concat(Xo.range(Math.ceil(s/m)*m,c,m).map(g)).concat(Xo.range(Math.ceil(r/p)*p,e,p).filter(function(n){return oa(n%d)\u003eAa}).map(l)).concat(Xo.range(Math.ceil(a/v)*v,o,v).filter(function(n){return oa(n%m)\u003eAa}).map(f))}var e,r,u,i,o,a,c,s,l,f,h,g,p\u003d10,v\u003dp,d\u003d90,m\u003d360,y\u003d2.5;return n.lines\u003dfunction(){return t().map(function(n){return{type:\"LineString\",coordinates:n}})},n.outline\u003dfunction(){return{type:\"Polygon\",coordinates:[h(i).concat(g(c).slice(1),h(u).reverse().slice(1),g(s).reverse().slice(1))]}},n.extent\u003dfunction(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent\u003dfunction(t){return arguments.length?(i\u003d+t[0][0],u\u003d+t[1][0],s\u003d+t[0][1],c\u003d+t[1][1],i\u003eu\u0026\u0026(t\u003di,i\u003du,u\u003dt),s\u003ec\u0026\u0026(t\u003ds,s\u003dc,c\u003dt),n.precision(y)):[[i,s],[u,c]]},n.minorExtent\u003dfunction(t){return arguments.length?(r\u003d+t[0][0],e\u003d+t[1][0],a\u003d+t[0][1],o\u003d+t[1][1],r\u003ee\u0026\u0026(t\u003dr,r\u003de,e\u003dt),a\u003eo\u0026\u0026(t\u003da,a\u003do,o\u003dt),n.precision(y)):[[r,a],[e,o]]},n.step\u003dfunction(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep\u003dfunction(t){return arguments.length?(d\u003d+t[0],m\u003d+t[1],n):[d,m]},n.minorStep\u003dfunction(t){return arguments.length?(p\u003d+t[0],v\u003d+t[1],n):[p,v]},n.precision\u003dfunction(t){return arguments.length?(y\u003d+t,l\u003dlr(a,o,90),f\u003dfr(r,e,y),h\u003dlr(s,c,90),g\u003dfr(i,u,y),n):y},n.majorExtent([[-180,-90+Aa],[180,90-Aa]]).minorExtent([[-180,-80-Aa],[180,80+Aa]])},Xo.geo.greatArc\u003dfunction(){function n(){return{type:\"LineString\",coordinates:[t||r.apply(this,arguments),e||u.apply(this,arguments)]}}var t,e,r\u003dhr,u\u003dgr;return n.distance\u003dfunction(){return Xo.geo.distance(t||r.apply(this,arguments),e||u.apply(this,arguments))},n.source\u003dfunction(e){return arguments.length?(r\u003de,t\u003d\"function\"\u003d\u003dtypeof e?null:e,n):r},n.target\u003dfunction(t){return arguments.length?(u\u003dt,e\u003d\"function\"\u003d\u003dtypeof t?null:t,n):u},n.precision\u003dfunction(){return arguments.length?n:0},n},Xo.geo.interpolate\u003dfunction(n,t){return pr(n[0]*Na,n[1]*Na,t[0]*Na,t[1]*Na)},Xo.geo.length\u003dfunction(n){return Uc\u003d0,Xo.geo.stream(n,jc),Uc};var Uc,jc\u003d{sphere:g,point:g,lineStart:vr,lineEnd:g,polygonStart:g,polygonEnd:g},Hc\u003ddr(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(Xo.geo.azimuthalEqualArea\u003dfunction(){return Qe(Hc)}).raw\u003dHc;var Fc\u003ddr(function(n){var t\u003dMath.acos(n);return t\u0026\u0026t/Math.sin(t)},bt);(Xo.geo.azimuthalEquidistant\u003dfunction(){return Qe(Fc)}).raw\u003dFc,(Xo.geo.conicConformal\u003dfunction(){return je(mr)}).raw\u003dmr,(Xo.geo.conicEquidistant\u003dfunction(){return je(yr)}).raw\u003dyr;var Oc\u003ddr(function(n){return 1/n},Math.atan);(Xo.geo.gnomonic\u003dfunction(){return Qe(Oc)}).raw\u003dOc,xr.invert\u003dfunction(n,t){return[n,2*Math.atan(Math.exp(t))-Ea]},(Xo.geo.mercator\u003dfunction(){return Mr(xr)}).raw\u003dxr;var Yc\u003ddr(function(){return 1},Math.asin);(Xo.geo.orthographic\u003dfunction(){return Qe(Yc)}).raw\u003dYc;var Ic\u003ddr(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(Xo.geo.stereographic\u003dfunction(){return Qe(Ic)}).raw\u003dIc,_r.invert\u003dfunction(n,t){return[-t,2*Math.atan(Math.exp(n))-Ea]},(Xo.geo.transverseMercator\u003dfunction(){var n\u003dMr(_r),t\u003dn.center,e\u003dn.rotate;return n.center\u003dfunction(n){return n?t([-n[1],n[0]]):(n\u003dt(),[-n[1],n[0]])},n.rotate\u003dfunction(n){return n?e([n[0],n[1],n.length\u003e2?n[2]+90:90]):(n\u003de(),[n[0],n[1],n[2]-90])},n.rotate([0,0])}).raw\u003d_r,Xo.geom\u003d{},Xo.geom.hull\u003dfunction(n){function t(n){if(n.length\u003c3)return[];var t,u\u003d_t(e),i\u003d_t(r),o\u003dn.length,a\u003d[],c\u003d[];for(t\u003d0;o\u003et;t++)a.push([+u.call(this,n[t],t),+i.call(this,n[t],t),t]);for(a.sort(kr),t\u003d0;o\u003et;t++)c.push([a[t][0],-a[t][1]]);var s\u003dSr(a),l\u003dSr(c),f\u003dl[0]\u003d\u003d\u003ds[0],h\u003dl[l.length-1]\u003d\u003d\u003ds[s.length-1],g\u003d[];for(t\u003ds.length-1;t\u003e\u003d0;--t)g.push(n[a[s[t]][2]]);for(t\u003d+f;t\u003cl.length-h;++t)g.push(n[a[l[t]][2]]);return g}var e\u003dbr,r\u003dwr;return arguments.length?t(n):(t.x\u003dfunction(n){return arguments.length?(e\u003dn,t):e},t.y\u003dfunction(n){return arguments.length?(r\u003dn,t):r},t)},Xo.geom.polygon\u003dfunction(n){return fa(n,Zc),n};var Zc\u003dXo.geom.polygon.prototype\u003d[];Zc.area\u003dfunction(){for(var n,t\u003d-1,e\u003dthis.length,r\u003dthis[e-1],u\u003d0;++t\u003ce;)n\u003dr,r\u003dthis[t],u+\u003dn[1]*r[0]-n[0]*r[1];return.5*u},Zc.centroid\u003dfunction(n){var t,e,r\u003d-1,u\u003dthis.length,i\u003d0,o\u003d0,a\u003dthis[u-1];for(arguments.length||(n\u003d-1/(6*this.area()));++r\u003cu;)t\u003da,a\u003dthis[r],e\u003dt[0]*a[1]-a[0]*t[1],i+\u003d(t[0]+a[0])*e,o+\u003d(t[1]+a[1])*e;return[i*n,o*n]},Zc.clip\u003dfunction(n){for(var t,e,r,u,i,o,a\u003dCr(n),c\u003d-1,s\u003dthis.length-Cr(this),l\u003dthis[s-1];++c\u003cs;){for(t\u003dn.slice(),n.length\u003d0,u\u003dthis[c],i\u003dt[(r\u003dt.length-a)-1],e\u003d-1;++e\u003cr;)o\u003dt[e],Er(o,l,u)?(Er(i,l,u)||n.push(Ar(i,o,l,u)),n.push(o)):Er(i,l,u)\u0026\u0026n.push(Ar(i,o,l,u)),i\u003do;a\u0026\u0026n.push(n[0]),l\u003du}return n};var Vc,Xc,$c,Bc,Wc,Jc\u003d[],Gc\u003d[];Pr.prototype.prepare\u003dfunction(){for(var n,t\u003dthis.edges,e\u003dt.length;e--;)n\u003dt[e].edge,n.b\u0026\u0026n.a||t.splice(e,1);return t.sort(jr),t.length},Br.prototype\u003d{start:function(){return this.edge.l\u003d\u003d\u003dthis.site?this.edge.a:this.edge.b},end:function(){return this.edge.l\u003d\u003d\u003dthis.site?this.edge.b:this.edge.a}},Wr.prototype\u003d{insert:function(n,t){var e,r,u;if(n){if(t.P\u003dn,t.N\u003dn.N,n.N\u0026\u0026(n.N.P\u003dt),n.N\u003dt,n.R){for(n\u003dn.R;n.L;)n\u003dn.L;n.L\u003dt}else n.R\u003dt;e\u003dn}else this._?(n\u003dQr(this._),t.P\u003dnull,t.N\u003dn,n.P\u003dn.L\u003dt,e\u003dn):(t.P\u003dt.N\u003dnull,this._\u003dt,e\u003dnull);for(t.L\u003dt.R\u003dnull,t.U\u003de,t.C\u003d!0,n\u003dt;e\u0026\u0026e.C;)r\u003de.U,e\u003d\u003d\u003dr.L?(u\u003dr.R,u\u0026\u0026u.C?(e.C\u003du.C\u003d!1,r.C\u003d!0,n\u003dr):(n\u003d\u003d\u003de.R\u0026\u0026(Gr(this,e),n\u003de,e\u003dn.U),e.C\u003d!1,r.C\u003d!0,Kr(this,r))):(u\u003dr.L,u\u0026\u0026u.C?(e.C\u003du.C\u003d!1,r.C\u003d!0,n\u003dr):(n\u003d\u003d\u003de.L\u0026\u0026(Kr(this,e),n\u003de,e\u003dn.U),e.C\u003d!1,r.C\u003d!0,Gr(this,r))),e\u003dn.U;this._.C\u003d!1},remove:function(n){n.N\u0026\u0026(n.N.P\u003dn.P),n.P\u0026\u0026(n.P.N\u003dn.N),n.N\u003dn.P\u003dnull;var t,e,r,u\u003dn.U,i\u003dn.L,o\u003dn.R;if(e\u003di?o?Qr(o):i:o,u?u.L\u003d\u003d\u003dn?u.L\u003de:u.R\u003de:this._\u003de,i\u0026\u0026o?(r\u003de.C,e.C\u003dn.C,e.L\u003di,i.U\u003de,e!\u003d\u003do?(u\u003de.U,e.U\u003dn.U,n\u003de.R,u.L\u003dn,e.R\u003do,o.U\u003de):(e.U\u003du,u\u003de,n\u003de.R)):(r\u003dn.C,n\u003de),n\u0026\u0026(n.U\u003du),!r){if(n\u0026\u0026n.C)return n.C\u003d!1,void 0;do{if(n\u003d\u003d\u003dthis._)break;if(n\u003d\u003d\u003du.L){if(t\u003du.R,t.C\u0026\u0026(t.C\u003d!1,u.C\u003d!0,Gr(this,u),t\u003du.R),t.L\u0026\u0026t.L.C||t.R\u0026\u0026t.R.C){t.R\u0026\u0026t.R.C||(t.L.C\u003d!1,t.C\u003d!0,Kr(this,t),t\u003du.R),t.C\u003du.C,u.C\u003dt.R.C\u003d!1,Gr(this,u),n\u003dthis._;break}}else if(t\u003du.L,t.C\u0026\u0026(t.C\u003d!1,u.C\u003d!0,Kr(this,u),t\u003du.L),t.L\u0026\u0026t.L.C||t.R\u0026\u0026t.R.C){t.L\u0026\u0026t.L.C||(t.R.C\u003d!1,t.C\u003d!0,Gr(this,t),t\u003du.L),t.C\u003du.C,u.C\u003dt.L.C\u003d!1,Kr(this,u),n\u003dthis._;break}t.C\u003d!0,n\u003du,u\u003du.U}while(!n.C);n\u0026\u0026(n.C\u003d!1)}}},Xo.geom.voronoi\u003dfunction(n){function t(n){var t\u003dnew Array(n.length),r\u003da[0][0],u\u003da[0][1],i\u003da[1][0],o\u003da[1][1];return nu(e(n),a).cells.forEach(function(e,a){var c\u003de.edges,s\u003de.site,l\u003dt[a]\u003dc.length?c.map(function(n){var t\u003dn.start();return[t.x,t.y]}):s.x\u003e\u003dr\u0026\u0026s.x\u003c\u003di\u0026\u0026s.y\u003e\u003du\u0026\u0026s.y\u003c\u003do?[[r,o],[i,o],[i,u],[r,u]]:[];l.point\u003dn[a]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(i(n,t)/Aa)*Aa,y:Math.round(o(n,t)/Aa)*Aa,i:t}})}var r\u003dbr,u\u003dwr,i\u003dr,o\u003du,a\u003dKc;return n?t(n):(t.links\u003dfunction(n){return nu(e(n)).edges.filter(function(n){return n.l\u0026\u0026n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles\u003dfunction(n){var t\u003d[];return nu(e(n)).cells.forEach(function(e,r){for(var u,i,o\u003de.site,a\u003de.edges.sort(jr),c\u003d-1,s\u003da.length,l\u003da[s-1].edge,f\u003dl.l\u003d\u003d\u003do?l.r:l.l;++c\u003cs;)u\u003dl,i\u003df,l\u003da[c].edge,f\u003dl.l\u003d\u003d\u003do?l.r:l.l,r\u003ci.i\u0026\u0026r\u003cf.i\u0026\u0026eu(o,i,f)\u003c0\u0026\u0026t.push([n[r],n[i.i],n[f.i]])}),t},t.x\u003dfunction(n){return arguments.length?(i\u003d_t(r\u003dn),t):r},t.y\u003dfunction(n){return arguments.length?(o\u003d_t(u\u003dn),t):u},t.clipExtent\u003dfunction(n){return arguments.length?(a\u003dnull\u003d\u003dn?Kc:n,t):a\u003d\u003d\u003dKc?null:a},t.size\u003dfunction(n){return arguments.length?t.clipExtent(n\u0026\u0026[[0,0],n]):a\u003d\u003d\u003dKc?null:a\u0026\u0026a[1]},t)};var Kc\u003d[[-1e6,-1e6],[1e6,1e6]];Xo.geom.delaunay\u003dfunction(n){return Xo.geom.voronoi().triangles(n)},Xo.geom.quadtree\u003dfunction(n,t,e,r,u){function i(n){function i(n,t,e,r,u,i,o,a){if(!isNaN(e)\u0026\u0026!isNaN(r))if(n.leaf){var c\u003dn.x,l\u003dn.y;if(null!\u003dc)if(oa(c-e)+oa(l-r)\u003c.01)s(n,t,e,r,u,i,o,a);else{var f\u003dn.point;n.x\u003dn.y\u003dn.point\u003dnull,s(n,f,c,l,u,i,o,a),s(n,t,e,r,u,i,o,a)}else n.x\u003de,n.y\u003dr,n.point\u003dt}else s(n,t,e,r,u,i,o,a)}function s(n,t,e,r,u,o,a,c){var s\u003d.5*(u+a),l\u003d.5*(o+c),f\u003de\u003e\u003ds,h\u003dr\u003e\u003dl,g\u003d(h\u003c\u003c1)+f;n.leaf\u003d!1,n\u003dn.nodes[g]||(n.nodes[g]\u003diu()),f?u\u003ds:a\u003ds,h?o\u003dl:c\u003dl,i(n,t,e,r,u,o,a,c)}var l,f,h,g,p,v,d,m,y,x\u003d_t(a),M\u003d_t(c);if(null!\u003dt)v\u003dt,d\u003de,m\u003dr,y\u003du;else if(m\u003dy\u003d-(v\u003dd\u003d1/0),f\u003d[],h\u003d[],p\u003dn.length,o)for(g\u003d0;p\u003eg;++g)l\u003dn[g],l.x\u003cv\u0026\u0026(v\u003dl.x),l.y\u003cd\u0026\u0026(d\u003dl.y),l.x\u003em\u0026\u0026(m\u003dl.x),l.y\u003ey\u0026\u0026(y\u003dl.y),f.push(l.x),h.push(l.y);else for(g\u003d0;p\u003eg;++g){var _\u003d+x(l\u003dn[g],g),b\u003d+M(l,g);v\u003e_\u0026\u0026(v\u003d_),d\u003eb\u0026\u0026(d\u003db),_\u003em\u0026\u0026(m\u003d_),b\u003ey\u0026\u0026(y\u003db),f.push(_),h.push(b)}var w\u003dm-v,S\u003dy-d;w\u003eS?y\u003dd+w:m\u003dv+S;var k\u003diu();if(k.add\u003dfunction(n){i(k,n,+x(n,++g),+M(n,g),v,d,m,y)},k.visit\u003dfunction(n){ou(n,k,v,d,m,y)},g\u003d-1,null\u003d\u003dt){for(;++g\u003cp;)i(k,n[g],f[g],h[g],v,d,m,y);--g}else n.forEach(k.add);return f\u003dh\u003dn\u003dl\u003dnull,k}var o,a\u003dbr,c\u003dwr;return(o\u003darguments.length)?(a\u003dru,c\u003duu,3\u003d\u003d\u003do\u0026\u0026(u\u003de,r\u003dt,e\u003dt\u003d0),i(n)):(i.x\u003dfunction(n){return arguments.length?(a\u003dn,i):a},i.y\u003dfunction(n){return arguments.length?(c\u003dn,i):c},i.extent\u003dfunction(n){return arguments.length?(null\u003d\u003dn?t\u003de\u003dr\u003du\u003dnull:(t\u003d+n[0][0],e\u003d+n[0][1],r\u003d+n[1][0],u\u003d+n[1][1]),i):null\u003d\u003dt?null:[[t,e],[r,u]]},i.size\u003dfunction(n){return arguments.length?(null\u003d\u003dn?t\u003de\u003dr\u003du\u003dnull:(t\u003de\u003d0,r\u003d+n[0],u\u003d+n[1]),i):null\u003d\u003dt?null:[r-t,u-e]},i)},Xo.interpolateRgb\u003dau,Xo.interpolateObject\u003dcu,Xo.interpolateNumber\u003dsu,Xo.interpolateString\u003dlu;var Qc\u003d/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g;Xo.interpolate\u003dfu,Xo.interpolators\u003d[function(n,t){var e\u003dtypeof t;return(\"string\"\u003d\u003d\u003de?Va.has(t)||/^(#|rgb\\(|hsl\\()/.test(t)?au:lu:t instanceof G?au:\"object\"\u003d\u003d\u003de?Array.isArray(t)?hu:cu:su)(n,t)}],Xo.interpolateArray\u003dhu;var ns\u003dfunction(){return bt},ts\u003dXo.map({linear:ns,poly:xu,quad:function(){return du},cubic:function(){return mu},sin:function(){return Mu},exp:function(){return _u},circle:function(){return bu},elastic:wu,back:Su,bounce:function(){return ku}}),es\u003dXo.map({\"in\":bt,out:pu,\"in-out\":vu,\"out-in\":function(n){return vu(pu(n))}});Xo.ease\u003dfunction(n){var t\u003dn.indexOf(\"-\"),e\u003dt\u003e\u003d0?n.substring(0,t):n,r\u003dt\u003e\u003d0?n.substring(t+1):\"in\";return e\u003dts.get(e)||ns,r\u003des.get(r)||bt,gu(r(e.apply(null,$o.call(arguments,1))))},Xo.interpolateHcl\u003dEu,Xo.interpolateHsl\u003dAu,Xo.interpolateLab\u003dCu,Xo.interpolateRound\u003dNu,Xo.transform\u003dfunction(n){var t\u003dWo.createElementNS(Xo.ns.prefix.svg,\"g\");return(Xo.transform\u003dfunction(n){if(null!\u003dn){t.setAttribute(\"transform\",n);var e\u003dt.transform.baseVal.consolidate()}return new Lu(e?e.matrix:rs)})(n)},Lu.prototype.toString\u003dfunction(){return\"translate(\"+this.translate+\")rotate(\"+this.rotate+\")skewX(\"+this.skew+\")scale(\"+this.scale+\")\"};var rs\u003d{a:1,b:0,c:0,d:1,e:0,f:0};Xo.interpolateTransform\u003dRu,Xo.layout\u003d{},Xo.layout.bundle\u003dfunction(){return function(n){for(var t\u003d[],e\u003d-1,r\u003dn.length;++e\u003cr;)t.push(Uu(n[e]));return t}},Xo.layout.chord\u003dfunction(){function n(){var n,s,f,h,g,p\u003d{},v\u003d[],d\u003dXo.range(i),m\u003d[];for(e\u003d[],r\u003d[],n\u003d0,h\u003d-1;++h\u003ci;){for(s\u003d0,g\u003d-1;++g\u003ci;)s+\u003du[h][g];v.push(s),m.push(Xo.range(i)),n+\u003ds}for(o\u0026\u0026d.sort(function(n,t){return o(v[n],v[t])}),a\u0026\u0026m.forEach(function(n,t){n.sort(function(n,e){return a(u[t][n],u[t][e])})}),n\u003d(ka-l*i)/n,s\u003d0,h\u003d-1;++h\u003ci;){for(f\u003ds,g\u003d-1;++g\u003ci;){var y\u003dd[h],x\u003dm[y][g],M\u003du[y][x],_\u003ds,b\u003ds+\u003dM*n;p[y+\"-\"+x]\u003d{index:y,subindex:x,startAngle:_,endAngle:b,value:M}}r[y]\u003d{index:y,startAngle:f,endAngle:s,value:(s-f)/n},s+\u003dl}for(h\u003d-1;++h\u003ci;)for(g\u003dh-1;++g\u003ci;){var w\u003dp[h+\"-\"+g],S\u003dp[g+\"-\"+h];(w.value||S.value)\u0026\u0026e.push(w.value\u003cS.value?{source:S,target:w}:{source:w,target:S})}c\u0026\u0026t()}function t(){e.sort(function(n,t){return c((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,u,i,o,a,c,s\u003d{},l\u003d0;return s.matrix\u003dfunction(n){return arguments.length?(i\u003d(u\u003dn)\u0026\u0026u.length,e\u003dr\u003dnull,s):u},s.padding\u003dfunction(n){return arguments.length?(l\u003dn,e\u003dr\u003dnull,s):l},s.sortGroups\u003dfunction(n){return arguments.length?(o\u003dn,e\u003dr\u003dnull,s):o},s.sortSubgroups\u003dfunction(n){return arguments.length?(a\u003dn,e\u003dnull,s):a},s.sortChords\u003dfunction(n){return arguments.length?(c\u003dn,e\u0026\u0026t(),s):c},s.chords\u003dfunction(){return e||n(),e},s.groups\u003dfunction(){return r||n(),r},s},Xo.layout.force\u003dfunction(){function n(n){return function(t,e,r,u){if(t.point!\u003d\u003dn){var i\u003dt.cx-n.x,o\u003dt.cy-n.y,a\u003du-e,c\u003di*i+o*o;if(c\u003ea*a/d){if(p\u003ec){var s\u003dt.charge/c;n.px-\u003di*s,n.py-\u003do*s}return!0}if(t.point\u0026\u0026c\u0026\u0026p\u003ec){var s\u003dt.pointCharge/c;n.px-\u003di*s,n.py-\u003do*s}}return!t.charge}}function t(n){n.px\u003dXo.event.x,n.py\u003dXo.event.y,a.resume()}var e,r,u,i,o,a\u003d{},c\u003dXo.dispatch(\"start\",\"tick\",\"end\"),s\u003d[1,1],l\u003d.9,f\u003dus,h\u003dis,g\u003d-30,p\u003dos,v\u003d.1,d\u003d.64,m\u003d[],y\u003d[];return a.tick\u003dfunction(){if((r*\u003d.99)\u003c.005)return c.end({type:\"end\",alpha:r\u003d0}),!0;var t,e,a,f,h,p,d,x,M,_\u003dm.length,b\u003dy.length;for(e\u003d0;b\u003ee;++e)a\u003dy[e],f\u003da.source,h\u003da.target,x\u003dh.x-f.x,M\u003dh.y-f.y,(p\u003dx*x+M*M)\u0026\u0026(p\u003dr*i[e]*((p\u003dMath.sqrt(p))-u[e])/p,x*\u003dp,M*\u003dp,h.x-\u003dx*(d\u003df.weight/(h.weight+f.weight)),h.y-\u003dM*d,f.x+\u003dx*(d\u003d1-d),f.y+\u003dM*d);if((d\u003dr*v)\u0026\u0026(x\u003ds[0]/2,M\u003ds[1]/2,e\u003d-1,d))for(;++e\u003c_;)a\u003dm[e],a.x+\u003d(x-a.x)*d,a.y+\u003d(M-a.y)*d;if(g)for(Zu(t\u003dXo.geom.quadtree(m),r,o),e\u003d-1;++e\u003c_;)(a\u003dm[e]).fixed||t.visit(n(a));for(e\u003d-1;++e\u003c_;)a\u003dm[e],a.fixed?(a.x\u003da.px,a.y\u003da.py):(a.x-\u003d(a.px-(a.px\u003da.x))*l,a.y-\u003d(a.py-(a.py\u003da.y))*l);c.tick({type:\"tick\",alpha:r})},a.nodes\u003dfunction(n){return arguments.length?(m\u003dn,a):m},a.links\u003dfunction(n){return arguments.length?(y\u003dn,a):y},a.size\u003dfunction(n){return arguments.length?(s\u003dn,a):s},a.linkDistance\u003dfunction(n){return arguments.length?(f\u003d\"function\"\u003d\u003dtypeof n?n:+n,a):f},a.distance\u003da.linkDistance,a.linkStrength\u003dfunction(n){return arguments.length?(h\u003d\"function\"\u003d\u003dtypeof n?n:+n,a):h},a.friction\u003dfunction(n){return arguments.length?(l\u003d+n,a):l},a.charge\u003dfunction(n){return arguments.length?(g\u003d\"function\"\u003d\u003dtypeof n?n:+n,a):g},a.chargeDistance\u003dfunction(n){return arguments.length?(p\u003dn*n,a):Math.sqrt(p)},a.gravity\u003dfunction(n){return arguments.length?(v\u003d+n,a):v},a.theta\u003dfunction(n){return arguments.length?(d\u003dn*n,a):Math.sqrt(d)},a.alpha\u003dfunction(n){return arguments.length?(n\u003d+n,r?r\u003dn\u003e0?n:0:n\u003e0\u0026\u0026(c.start({type:\"start\",alpha:r\u003dn}),Xo.timer(a.tick)),a):r},a.start\u003dfunction(){function n(n,r){if(!e){for(e\u003dnew Array(c),a\u003d0;c\u003ea;++a)e[a]\u003d[];for(a\u003d0;s\u003ea;++a){var u\u003dy[a];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var i,o\u003de[t],a\u003d-1,s\u003do.length;++a\u003cs;)if(!isNaN(i\u003do[a][n]))return i;return Math.random()*r}var t,e,r,c\u003dm.length,l\u003dy.length,p\u003ds[0],v\u003ds[1];for(t\u003d0;c\u003et;++t)(r\u003dm[t]).index\u003dt,r.weight\u003d0;for(t\u003d0;l\u003et;++t)r\u003dy[t],\"number\"\u003d\u003dtypeof r.source\u0026\u0026(r.source\u003dm[r.source]),\"number\"\u003d\u003dtypeof r.target\u0026\u0026(r.target\u003dm[r.target]),++r.source.weight,++r.target.weight;for(t\u003d0;c\u003et;++t)r\u003dm[t],isNaN(r.x)\u0026\u0026(r.x\u003dn(\"x\",p)),isNaN(r.y)\u0026\u0026(r.y\u003dn(\"y\",v)),isNaN(r.px)\u0026\u0026(r.px\u003dr.x),isNaN(r.py)\u0026\u0026(r.py\u003dr.y);if(u\u003d[],\"function\"\u003d\u003dtypeof f)for(t\u003d0;l\u003et;++t)u[t]\u003d+f.call(this,y[t],t);else for(t\u003d0;l\u003et;++t)u[t]\u003df;if(i\u003d[],\"function\"\u003d\u003dtypeof h)for(t\u003d0;l\u003et;++t)i[t]\u003d+h.call(this,y[t],t);else for(t\u003d0;l\u003et;++t)i[t]\u003dh;if(o\u003d[],\"function\"\u003d\u003dtypeof g)for(t\u003d0;c\u003et;++t)o[t]\u003d+g.call(this,m[t],t);else for(t\u003d0;c\u003et;++t)o[t]\u003dg;return a.resume()},a.resume\u003dfunction(){return a.alpha(.1)},a.stop\u003dfunction(){return a.alpha(0)},a.drag\u003dfunction(){return e||(e\u003dXo.behavior.drag().origin(bt).on(\"dragstart.force\",Fu).on(\"drag.force\",t).on(\"dragend.force\",Ou)),arguments.length?(this.on(\"mouseover.force\",Yu).on(\"mouseout.force\",Iu).call(e),void 0):e},Xo.rebind(a,c,\"on\")};var us\u003d20,is\u003d1,os\u003d1/0;Xo.layout.hierarchy\u003dfunction(){function n(t,o,a){var c\u003du.call(e,t,o);if(t.depth\u003do,a.push(t),c\u0026\u0026(s\u003dc.length)){for(var s,l,f\u003d-1,h\u003dt.children\u003dnew Array(s),g\u003d0,p\u003do+1;++f\u003cs;)l\u003dh[f]\u003dn(c[f],p,a),l.parent\u003dt,g+\u003dl.value;r\u0026\u0026h.sort(r),i\u0026\u0026(t.value\u003dg)}else delete t.children,i\u0026\u0026(t.value\u003d+i.call(e,t,o)||0);return t}function t(n,r){var u\u003dn.children,o\u003d0;if(u\u0026\u0026(a\u003du.length))for(var a,c\u003d-1,s\u003dr+1;++c\u003ca;)o+\u003dt(u[c],s);else i\u0026\u0026(o\u003d+i.call(e,n,r)||0);return i\u0026\u0026(n.value\u003do),o}function e(t){var e\u003d[];return n(t,0,e),e}var r\u003dBu,u\u003dXu,i\u003d$u;return e.sort\u003dfunction(n){return arguments.length?(r\u003dn,e):r},e.children\u003dfunction(n){return arguments.length?(u\u003dn,e):u},e.value\u003dfunction(n){return arguments.length?(i\u003dn,e):i},e.revalue\u003dfunction(n){return t(n,0),n},e},Xo.layout.partition\u003dfunction(){function n(t,e,r,u){var i\u003dt.children;if(t.x\u003de,t.y\u003dt.depth*u,t.dx\u003dr,t.dy\u003du,i\u0026\u0026(o\u003di.length)){var o,a,c,s\u003d-1;for(r\u003dt.value?r/t.value:0;++s\u003co;)n(a\u003di[s],e,c\u003da.value*r,u),e+\u003dc}}function t(n){var e\u003dn.children,r\u003d0;if(e\u0026\u0026(u\u003de.length))for(var u,i\u003d-1;++i\u003cu;)r\u003dMath.max(r,t(e[i]));return 1+r}function e(e,i){var o\u003dr.call(this,e,i);return n(o[0],0,u[0],u[1]/t(o[0])),o}var r\u003dXo.layout.hierarchy(),u\u003d[1,1];return e.size\u003dfunction(n){return arguments.length?(u\u003dn,e):u},Vu(e,r)},Xo.layout.pie\u003dfunction(){function n(i){var o\u003di.map(function(e,r){return+t.call(n,e,r)}),a\u003d+(\"function\"\u003d\u003dtypeof r?r.apply(this,arguments):r),c\u003d((\"function\"\u003d\u003dtypeof u?u.apply(this,arguments):u)-a)/Xo.sum(o),s\u003dXo.range(i.length);null!\u003de\u0026\u0026s.sort(e\u003d\u003d\u003das?function(n,t){return o[t]-o[n]}:function(n,t){return e(i[n],i[t])});var l\u003d[];return s.forEach(function(n){var t;l[n]\u003d{data:i[n],value:t\u003do[n],startAngle:a,endAngle:a+\u003dt*c}}),l}var t\u003dNumber,e\u003das,r\u003d0,u\u003dka;return n.value\u003dfunction(e){return arguments.length?(t\u003de,n):t},n.sort\u003dfunction(t){return arguments.length?(e\u003dt,n):e},n.startAngle\u003dfunction(t){return arguments.length?(r\u003dt,n):r},n.endAngle\u003dfunction(t){return arguments.length?(u\u003dt,n):u},n};var as\u003d{};Xo.layout.stack\u003dfunction(){function n(a,c){var s\u003da.map(function(e,r){return t.call(n,e,r)}),l\u003ds.map(function(t){return t.map(function(t,e){return[i.call(n,t,e),o.call(n,t,e)]})}),f\u003de.call(n,l,c);s\u003dXo.permute(s,f),l\u003dXo.permute(l,f);var h,g,p,v\u003dr.call(n,l,c),d\u003ds.length,m\u003ds[0].length;for(g\u003d0;m\u003eg;++g)for(u.call(n,s[0][g],p\u003dv[g],l[0][g][1]),h\u003d1;d\u003eh;++h)u.call(n,s[h][g],p+\u003dl[h-1][g][1],l[h][g][1]);return a}var t\u003dbt,e\u003dQu,r\u003dni,u\u003dKu,i\u003dJu,o\u003dGu;return n.values\u003dfunction(e){return arguments.length?(t\u003de,n):t},n.order\u003dfunction(t){return arguments.length?(e\u003d\"function\"\u003d\u003dtypeof t?t:cs.get(t)||Qu,n):e},n.offset\u003dfunction(t){return arguments.length?(r\u003d\"function\"\u003d\u003dtypeof t?t:ss.get(t)||ni,n):r},n.x\u003dfunction(t){return arguments.length?(i\u003dt,n):i},n.y\u003dfunction(t){return arguments.length?(o\u003dt,n):o},n.out\u003dfunction(t){return arguments.length?(u\u003dt,n):u},n};var cs\u003dXo.map({\"inside-out\":function(n){var t,e,r\u003dn.length,u\u003dn.map(ti),i\u003dn.map(ei),o\u003dXo.range(r).sort(function(n,t){return u[n]-u[t]}),a\u003d0,c\u003d0,s\u003d[],l\u003d[];for(t\u003d0;r\u003et;++t)e\u003do[t],c\u003ea?(a+\u003di[e],s.push(e)):(c+\u003di[e],l.push(e));return l.reverse().concat(s)},reverse:function(n){return Xo.range(n.length).reverse()},\"default\":Qu}),ss\u003dXo.map({silhouette:function(n){var t,e,r,u\u003dn.length,i\u003dn[0].length,o\u003d[],a\u003d0,c\u003d[];for(e\u003d0;i\u003ee;++e){for(t\u003d0,r\u003d0;u\u003et;t++)r+\u003dn[t][e][1];r\u003ea\u0026\u0026(a\u003dr),o.push(r)}for(e\u003d0;i\u003ee;++e)c[e]\u003d(a-o[e])/2;return c},wiggle:function(n){var t,e,r,u,i,o,a,c,s,l\u003dn.length,f\u003dn[0],h\u003df.length,g\u003d[];for(g[0]\u003dc\u003ds\u003d0,e\u003d1;h\u003ee;++e){for(t\u003d0,u\u003d0;l\u003et;++t)u+\u003dn[t][e][1];for(t\u003d0,i\u003d0,a\u003df[e][0]-f[e-1][0];l\u003et;++t){for(r\u003d0,o\u003d(n[t][e][1]-n[t][e-1][1])/(2*a);t\u003er;++r)o+\u003d(n[r][e][1]-n[r][e-1][1])/a;i+\u003do*n[t][e][1]}g[e]\u003dc-\u003du?i/u*a:0,s\u003ec\u0026\u0026(s\u003dc)}for(e\u003d0;h\u003ee;++e)g[e]-\u003ds;return g},expand:function(n){var t,e,r,u\u003dn.length,i\u003dn[0].length,o\u003d1/u,a\u003d[];for(e\u003d0;i\u003ee;++e){for(t\u003d0,r\u003d0;u\u003et;t++)r+\u003dn[t][e][1];if(r)for(t\u003d0;u\u003et;t++)n[t][e][1]/\u003dr;else for(t\u003d0;u\u003et;t++)n[t][e][1]\u003do}for(e\u003d0;i\u003ee;++e)a[e]\u003d0;return a},zero:ni});Xo.layout.histogram\u003dfunction(){function n(n,i){for(var o,a,c\u003d[],s\u003dn.map(e,this),l\u003dr.call(this,s,i),f\u003du.call(this,l,s,i),i\u003d-1,h\u003ds.length,g\u003df.length-1,p\u003dt?1:1/h;++i\u003cg;)o\u003dc[i]\u003d[],o.dx\u003df[i+1]-(o.x\u003df[i]),o.y\u003d0;if(g\u003e0)for(i\u003d-1;++i\u003ch;)a\u003ds[i],a\u003e\u003dl[0]\u0026\u0026a\u003c\u003dl[1]\u0026\u0026(o\u003dc[Xo.bisect(f,a,1,g)-1],o.y+\u003dp,o.push(n[i]));return c}var t\u003d!0,e\u003dNumber,r\u003doi,u\u003dui;return n.value\u003dfunction(t){return arguments.length?(e\u003dt,n):e},n.range\u003dfunction(t){return arguments.length?(r\u003d_t(t),n):r},n.bins\u003dfunction(t){return arguments.length?(u\u003d\"number\"\u003d\u003dtypeof t?function(n){return ii(n,t)}:_t(t),n):u},n.frequency\u003dfunction(e){return arguments.length?(t\u003d!!e,n):t},n},Xo.layout.tree\u003dfunction(){function n(n,i){function o(n,t){var r\u003dn.children,u\u003dn._tree;if(r\u0026\u0026(i\u003dr.length)){for(var i,a,s,l\u003dr[0],f\u003dl,h\u003d-1;++h\u003ci;)s\u003dr[h],o(s,a),f\u003dc(s,a,f),a\u003ds;vi(n);var g\u003d.5*(l._tree.prelim+s._tree.prelim);t?(u.prelim\u003dt._tree.prelim+e(n,t),u.mod\u003du.prelim-g):u.prelim\u003dg}else t\u0026\u0026(u.prelim\u003dt._tree.prelim+e(n,t))}function a(n,t){n.x\u003dn._tree.prelim+t;var e\u003dn.children;if(e\u0026\u0026(r\u003de.length)){var r,u\u003d-1;for(t+\u003dn._tree.mod;++u\u003cr;)a(e[u],t)}}function c(n,t,r){if(t){for(var u,i\u003dn,o\u003dn,a\u003dt,c\u003dn.parent.children[0],s\u003di._tree.mod,l\u003do._tree.mod,f\u003da._tree.mod,h\u003dc._tree.mod;a\u003dsi(a),i\u003dci(i),a\u0026\u0026i;)c\u003dci(c),o\u003dsi(o),o._tree.ancestor\u003dn,u\u003da._tree.prelim+f-i._tree.prelim-s+e(a,i),u\u003e0\u0026\u0026(di(mi(a,n,r),n,u),s+\u003du,l+\u003du),f+\u003da._tree.mod,s+\u003di._tree.mod,h+\u003dc._tree.mod,l+\u003do._tree.mod;a\u0026\u0026!si(o)\u0026\u0026(o._tree.thread\u003da,o._tree.mod+\u003df-l),i\u0026\u0026!ci(c)\u0026\u0026(c._tree.thread\u003di,c._tree.mod+\u003ds-h,r\u003dn)}return r}var s\u003dt.call(this,n,i),l\u003ds[0];pi(l,function(n,t){n._tree\u003d{ancestor:n,prelim:0,mod:0,change:0,shift:0,number:t?t._tree.number+1:0}}),o(l),a(l,-l._tree.prelim);var f\u003dli(l,hi),h\u003dli(l,fi),g\u003dli(l,gi),p\u003df.x-e(f,h)/2,v\u003dh.x+e(h,f)/2,d\u003dg.depth||1;return pi(l,u?function(n){n.x*\u003dr[0],n.y\u003dn.depth*r[1],delete n._tree}:function(n){n.x\u003d(n.x-p)/(v-p)*r[0],n.y\u003dn.depth/d*r[1],delete n._tree}),s}var t\u003dXo.layout.hierarchy().sort(null).value(null),e\u003dai,r\u003d[1,1],u\u003d!1;return n.separation\u003dfunction(t){return arguments.length?(e\u003dt,n):e},n.size\u003dfunction(t){return arguments.length?(u\u003dnull\u003d\u003d(r\u003dt),n):u?null:r},n.nodeSize\u003dfunction(t){return arguments.length?(u\u003dnull!\u003d(r\u003dt),n):u?r:null},Vu(n,t)},Xo.layout.pack\u003dfunction(){function n(n,i){var o\u003de.call(this,n,i),a\u003do[0],c\u003du[0],s\u003du[1],l\u003dnull\u003d\u003dt?Math.sqrt:\"function\"\u003d\u003dtypeof t?t:function(){return t};if(a.x\u003da.y\u003d0,pi(a,function(n){n.r\u003d+l(n.value)}),pi(a,bi),r){var f\u003dr*(t?1:Math.max(2*a.r/c,2*a.r/s))/2;pi(a,function(n){n.r+\u003df}),pi(a,bi),pi(a,function(n){n.r-\u003df})}return ki(a,c/2,s/2,t?1:1/Math.max(2*a.r/c,2*a.r/s)),o}var t,e\u003dXo.layout.hierarchy().sort(yi),r\u003d0,u\u003d[1,1];return n.size\u003dfunction(t){return arguments.length?(u\u003dt,n):u},n.radius\u003dfunction(e){return arguments.length?(t\u003dnull\u003d\u003de||\"function\"\u003d\u003dtypeof e?e:+e,n):t},n.padding\u003dfunction(t){return arguments.length?(r\u003d+t,n):r},Vu(n,e)},Xo.layout.cluster\u003dfunction(){function n(n,i){var o,a\u003dt.call(this,n,i),c\u003da[0],s\u003d0;pi(c,function(n){var t\u003dn.children;t\u0026\u0026t.length?(n.x\u003dCi(t),n.y\u003dAi(t)):(n.x\u003do?s+\u003de(n,o):0,n.y\u003d0,o\u003dn)});var l\u003dNi(c),f\u003dLi(c),h\u003dl.x-e(l,f)/2,g\u003df.x+e(f,l)/2;return pi(c,u?function(n){n.x\u003d(n.x-c.x)*r[0],n.y\u003d(c.y-n.y)*r[1]}:function(n){n.x\u003d(n.x-h)/(g-h)*r[0],n.y\u003d(1-(c.y?n.y/c.y:1))*r[1]}),a}var t\u003dXo.layout.hierarchy().sort(null).value(null),e\u003dai,r\u003d[1,1],u\u003d!1;return n.separation\u003dfunction(t){return arguments.length?(e\u003dt,n):e},n.size\u003dfunction(t){return arguments.length?(u\u003dnull\u003d\u003d(r\u003dt),n):u?null:r},n.nodeSize\u003dfunction(t){return arguments.length?(u\u003dnull!\u003d(r\u003dt),n):u?r:null},Vu(n,t)},Xo.layout.treemap\u003dfunction(){function n(n,t){for(var e,r,u\u003d-1,i\u003dn.length;++u\u003ci;)r\u003d(e\u003dn[u]).value*(0\u003et?0:t),e.area\u003disNaN(r)||0\u003e\u003dr?0:r}function t(e){var i\u003de.children;if(i\u0026\u0026i.length){var o,a,c,s\u003df(e),l\u003d[],h\u003di.slice(),p\u003d1/0,v\u003d\"slice\"\u003d\u003d\u003dg?s.dx:\"dice\"\u003d\u003d\u003dg?s.dy:\"slice-dice\"\u003d\u003d\u003dg?1\u0026e.depth?s.dy:s.dx:Math.min(s.dx,s.dy);for(n(h,s.dx*s.dy/e.value),l.area\u003d0;(c\u003dh.length)\u003e0;)l.push(o\u003dh[c-1]),l.area+\u003do.area,\"squarify\"!\u003d\u003dg||(a\u003dr(l,v))\u003c\u003dp?(h.pop(),p\u003da):(l.area-\u003dl.pop().area,u(l,v,s,!1),v\u003dMath.min(s.dx,s.dy),l.length\u003dl.area\u003d0,p\u003d1/0);l.length\u0026\u0026(u(l,v,s,!0),l.length\u003dl.area\u003d0),i.forEach(t)}}function e(t){var r\u003dt.children;if(r\u0026\u0026r.length){var i,o\u003df(t),a\u003dr.slice(),c\u003d[];for(n(a,o.dx*o.dy/t.value),c.area\u003d0;i\u003da.pop();)c.push(i),c.area+\u003di.area,null!\u003di.z\u0026\u0026(u(c,i.z?o.dx:o.dy,o,!a.length),c.length\u003dc.area\u003d0);r.forEach(e)}}function r(n,t){for(var e,r\u003dn.area,u\u003d0,i\u003d1/0,o\u003d-1,a\u003dn.length;++o\u003ca;)(e\u003dn[o].area)\u0026\u0026(i\u003ee\u0026\u0026(i\u003de),e\u003eu\u0026\u0026(u\u003de));return r*\u003dr,t*\u003dt,r?Math.max(t*u*p/r,r/(t*i*p)):1/0}function u(n,t,e,r){var u,i\u003d-1,o\u003dn.length,a\u003de.x,s\u003de.y,l\u003dt?c(n.area/t):0;if(t\u003d\u003de.dx){for((r||l\u003ee.dy)\u0026\u0026(l\u003de.dy);++i\u003co;)u\u003dn[i],u.x\u003da,u.y\u003ds,u.dy\u003dl,a+\u003du.dx\u003dMath.min(e.x+e.dx-a,l?c(u.area/l):0);u.z\u003d!0,u.dx+\u003de.x+e.dx-a,e.y+\u003dl,e.dy-\u003dl}else{for((r||l\u003ee.dx)\u0026\u0026(l\u003de.dx);++i\u003co;)u\u003dn[i],u.x\u003da,u.y\u003ds,u.dx\u003dl,s+\u003du.dy\u003dMath.min(e.y+e.dy-s,l?c(u.area/l):0);u.z\u003d!1,u.dy+\u003de.y+e.dy-s,e.x+\u003dl,e.dx-\u003dl}}function i(r){var u\u003do||a(r),i\u003du[0];return i.x\u003d0,i.y\u003d0,i.dx\u003ds[0],i.dy\u003ds[1],o\u0026\u0026a.revalue(i),n([i],i.dx*i.dy/i.value),(o?e:t)(i),h\u0026\u0026(o\u003du),u}var o,a\u003dXo.layout.hierarchy(),c\u003dMath.round,s\u003d[1,1],l\u003dnull,f\u003dzi,h\u003d!1,g\u003d\"squarify\",p\u003d.5*(1+Math.sqrt(5));return i.size\u003dfunction(n){return arguments.length?(s\u003dn,i):s},i.padding\u003dfunction(n){function t(t){var e\u003dn.call(i,t,t.depth);return null\u003d\u003de?zi(t):qi(t,\"number\"\u003d\u003dtypeof e?[e,e,e,e]:e)}function e(t){return qi(t,n)}if(!arguments.length)return l;var r;return f\u003dnull\u003d\u003d(l\u003dn)?zi:\"function\"\u003d\u003d(r\u003dtypeof n)?t:\"number\"\u003d\u003d\u003dr?(n\u003d[n,n,n,n],e):e,i},i.round\u003dfunction(n){return arguments.length?(c\u003dn?Math.round:Number,i):c!\u003dNumber},i.sticky\u003dfunction(n){return arguments.length?(h\u003dn,o\u003dnull,i):h},i.ratio\u003dfunction(n){return arguments.length?(p\u003dn,i):p},i.mode\u003dfunction(n){return arguments.length?(g\u003dn+\"\",i):g},Vu(i,a)},Xo.random\u003d{normal:function(n,t){var e\u003darguments.length;return 2\u003ee\u0026\u0026(t\u003d1),1\u003ee\u0026\u0026(n\u003d0),function(){var e,r,u;do e\u003d2*Math.random()-1,r\u003d2*Math.random()-1,u\u003de*e+r*r;while(!u||u\u003e1);return n+t*e*Math.sqrt(-2*Math.log(u)/u)}},logNormal:function(){var n\u003dXo.random.normal.apply(Xo,arguments);return function(){return Math.exp(n())}},bates:function(n){var t\u003dXo.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t\u003d0,e\u003d0;n\u003ee;e++)t+\u003dMath.random();return t}}},Xo.scale\u003d{};var ls\u003d{floor:bt,ceil:bt};Xo.scale.linear\u003dfunction(){return Hi([0,1],[0,1],fu,!1)};var fs\u003d{s:1,g:1,p:1,r:1,e:1};Xo.scale.log\u003dfunction(){return $i(Xo.scale.linear().domain([0,1]),10,!0,[1,10])};var hs\u003dXo.format(\".0e\"),gs\u003d{floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};Xo.scale.pow\u003dfunction(){return Bi(Xo.scale.linear(),1,[0,1])},Xo.scale.sqrt\u003dfunction(){return Xo.scale.pow().exponent(.5)},Xo.scale.ordinal\u003dfunction(){return Ji([],{t:\"range\",a:[[]]})},Xo.scale.category10\u003dfunction(){return Xo.scale.ordinal().range(ps)},Xo.scale.category20\u003dfunction(){return Xo.scale.ordinal().range(vs)},Xo.scale.category20b\u003dfunction(){return Xo.scale.ordinal().range(ds)},Xo.scale.category20c\u003dfunction(){return Xo.scale.ordinal().range(ms)};var ps\u003d[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(ht),vs\u003d[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(ht),ds\u003d[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(ht),ms\u003d[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(ht);Xo.scale.quantile\u003dfunction(){return Gi([],[])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "},Xo.scale.quantize\u003dfunction(){return Ki(0,1,[0,1])},Xo.scale.threshold\u003dfunction(){return Qi([.5],[0,1])},Xo.scale.identity\u003dfunction(){return no([0,1])},Xo.svg\u003d{},Xo.svg.arc\u003dfunction(){function n(){var n\u003dt.apply(this,arguments),i\u003de.apply(this,arguments),o\u003dr.apply(this,arguments)+ys,a\u003du.apply(this,arguments)+ys,c\u003d(o\u003ea\u0026\u0026(c\u003do,o\u003da,a\u003dc),a-o),s\u003dSa\u003ec?\"0\":\"1\",l\u003dMath.cos(o),f\u003dMath.sin(o),h\u003dMath.cos(a),g\u003dMath.sin(a);return c\u003e\u003dxs?n?\"M0,\"+i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+-i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+i+\"M0,\"+n+\"A\"+n+\",\"+n+\" 0 1,0 0,\"+-n+\"A\"+n+\",\"+n+\" 0 1,0 0,\"+n+\"Z\":\"M0,\"+i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+-i+\"A\"+i+\",\"+i+\" 0 1,1 0,\"+i+\"Z\":n?\"M\"+i*l+\",\"+i*f+\"A\"+i+\",\"+i+\" 0 \"+s+\",1 \"+i*h+\",\"+i*g+\"L\"+n*h+\",\"+n*g+\"A\"+n+\",\"+n+\" 0 \"+s+\",0 \"+n*l+\",\"+n*f+\"Z\":\"M\"+i*l+\",\"+i*f+\"A\"+i+\",\"+i+\" 0 \"+s+\",1 \"+i*h+\",\"+i*g+\"L0,0\"+\"Z\"}var t\u003dto,e\u003deo,r\u003dro,u\u003duo;return n.innerRadius\u003dfunction(e){return arguments.length?(t\u003d_t(e),n):t},n.outerRadius\u003dfunction(t){return arguments.length?(e\u003d_t(t),n):e},n.startAngle\u003dfunction(t){return arguments.length?(r\u003d_t(t),n):r},n.endAngle\u003dfunction(t){return arguments.length?(u\u003d_t(t),n):u},n.centroid\u003dfunction(){var n\u003d(t.apply(this,arguments)+e.apply(this,arguments))/2,i\u003d(r.apply(this,arguments)+u.apply(this,arguments))/2+ys;return[Math.cos(i)*n,Math.sin(i)*n]},n};var ys\u003d-Ea,xs\u003dka-Aa;Xo.svg.line\u003dfunction(){return io(bt)};var Ms\u003dXo.map({linear:oo,\"linear-closed\":ao,step:co,\"step-before\":so,\"step-after\":lo,basis:mo,\"basis-open\":yo,\"basis-closed\":xo,bundle:Mo,cardinal:go,\"cardinal-open\":fo,\"cardinal-closed\":ho,monotone:Eo});Ms.forEach(function(n,t){t.key\u003dn,t.closed\u003d/-closed$/.test(n)});var _s\u003d[0,2/3,1/3,0],bs\u003d[0,1/3,2/3,0],ws\u003d[0,1/6,2/3,1/6];Xo.svg.line.radial\u003dfunction(){var n\u003dio(Ao);return n.radius\u003dn.x,delete n.x,n.angle\u003dn.y,delete n.y,n},so.reverse\u003dlo,lo.reverse\u003dso,Xo.svg.area\u003dfunction(){return Co(bt)},Xo.svg.area.radial\u003dfunction(){var n\u003dCo(Ao);return n.radius\u003dn.x,delete n.x,n.innerRadius\u003dn.x0,delete n.x0,n.outerRadius\u003dn.x1,delete n.x1,n.angle\u003dn.y,delete n.y,n.startAngle\u003dn.y0,delete n.y0,n.endAngle\u003dn.y1,delete n.y1,n},Xo.svg.chord\u003dfunction(){function n(n,a){var c\u003dt(this,i,n,a),s\u003dt(this,o,n,a);return\"M\"+c.p0+r(c.r,c.p1,c.a1-c.a0)+(e(c,s)?u(c.r,c.p1,c.r,c.p0):u(c.r,c.p1,s.r,s.p0)+r(s.r,s.p1,s.a1-s.a0)+u(s.r,s.p1,c.r,c.p0))+\"Z\"}function t(n,t,e,r){var u\u003dt.call(n,e,r),i\u003da.call(n,u,r),o\u003dc.call(n,u,r)+ys,l\u003ds.call(n,u,r)+ys;return{r:i,a0:o,a1:l,p0:[i*Math.cos(o),i*Math.sin(o)],p1:[i*Math.cos(l),i*Math.sin(l)]}}function e(n,t){return n.a0\u003d\u003dt.a0\u0026\u0026n.a1\u003d\u003dt.a1}function r(n,t,e){return\"A\"+n+\",\"+n+\" 0 \"+ +(e\u003eSa)+\",1 \"+t}function u(n,t,e,r){return\"Q 0,0 \"+r}var i\u003dhr,o\u003dgr,a\u003dNo,c\u003dro,s\u003duo;return n.radius\u003dfunction(t){return arguments.length?(a\u003d_t(t),n):a},n.source\u003dfunction(t){return arguments.length?(i\u003d_t(t),n):i},n.target\u003dfunction(t){return arguments.length?(o\u003d_t(t),n):o},n.startAngle\u003dfunction(t){return arguments.length?(c\u003d_t(t),n):c},n.endAngle\u003dfunction(t){return arguments.length?(s\u003d_t(t),n):s},n},Xo.svg.diagonal\u003dfunction(){function n(n,u){var i\u003dt.call(this,n,u),o\u003de.call(this,n,u),a\u003d(i.y+o.y)/2,c\u003d[i,{x:i.x,y:a},{x:o.x,y:a},o];return c\u003dc.map(r),\"M\"+c[0]+\"C\"+c[1]+\" \"+c[2]+\" \"+c[3]}var t\u003dhr,e\u003dgr,r\u003dLo;return n.source\u003dfunction(e){return arguments.length?(t\u003d_t(e),n):t},n.target\u003dfunction(t){return arguments.length?(e\u003d_t(t),n):e},n.projection\u003dfunction(t){return arguments.length?(r\u003dt,n):r},n},Xo.svg.diagonal.radial\u003dfunction(){var n\u003dXo.svg.diagonal(),t\u003dLo,e\u003dn.projection;return n.projection\u003dfunction(n){return arguments.length?e(zo(t\u003dn)):t},n},Xo.svg.symbol\u003dfunction(){function n(n,r){return(Ss.get(t.call(this,n,r))||Ro)(e.call(this,n,r))}var t\u003dTo,e\u003dqo;return n.type\u003dfunction(e){return arguments.length?(t\u003d_t(e),n):t},n.size\u003dfunction(t){return arguments.length?(e\u003d_t(t),n):e},n};var Ss\u003dXo.map({circle:Ro,cross:function(n){var t\u003dMath.sqrt(n/5)/2;return\"M\"+-3*t+\",\"+-t+\"H\"+-t+\"V\"+-3*t+\"H\"+t+\"V\"+-t+\"H\"+3*t+\"V\"+t+\"H\"+t+\"V\"+3*t+\"H\"+-t+\"V\"+t+\"H\"+-3*t+\"Z\"},diamond:function(n){var t\u003dMath.sqrt(n/(2*Cs)),e\u003dt*Cs;return\"M0,\"+-t+\"L\"+e+\",0\"+\" 0,\"+t+\" \"+-e+\",0\"+\"Z\"},square:function(n){var t\u003dMath.sqrt(n)/2;return\"M\"+-t+\",\"+-t+\"L\"+t+\",\"+-t+\" \"+t+\",\"+t+\" \"+-t+\",\"+t+\"Z\"},\"triangle-down\":function(n){var t\u003dMath.sqrt(n/As),e\u003dt*As/2;return\"M0,\"+e+\"L\"+t+\",\"+-e+\" \"+-t+\",\"+-e+\"Z\"},\"triangle-up\":function(n){var t\u003dMath.sqrt(n/As),e\u003dt*As/2;return\"M0,\"+-e+\"L\"+t+\",\"+e+\" \"+-t+\",\"+e+\"Z\"}});Xo.svg.symbolTypes\u003dSs.keys();var ks,Es,As\u003dMath.sqrt(3),Cs\u003dMath.tan(30*Na),Ns\u003d[],Ls\u003d0;Ns.call\u003dda.call,Ns.empty\u003dda.empty,Ns.node\u003dda.node,Ns.size\u003dda.size,Xo.transition\u003dfunction(n){return arguments.length?ks?n.transition():n:xa.transition()},Xo.transition.prototype\u003dNs,Ns.select\u003dfunction(n){var t,e,r,u\u003dthis.id,i\u003d[];n\u003dM(n);for(var o\u003d-1,a\u003dthis.length;++o\u003ca;){i.push(t\u003d[]);for(var c\u003dthis[o],s\u003d-1,l\u003dc.length;++s\u003cl;)(r\u003dc[s])\u0026\u0026(e\u003dn.call(r,r.__data__,s,o))?(\"__data__\"in r\u0026\u0026(e.__data__\u003dr.__data__),jo(e,s,u,r.__transition__[u]),t.push(e)):t.push(null)}return Do(i,u)},Ns.selectAll\u003dfunction(n){var t,e,r,u,i,o\u003dthis.id,a\u003d[];n\u003d_(n);for(var c\u003d-1,s\u003dthis.length;++c\u003cs;)for(var l\u003dthis[c],f\u003d-1,h\u003dl.length;++f\u003ch;)if(r\u003dl[f]){i\u003dr.__transition__[o],e\u003dn.call(r,r.__data__,f,c),a.push(t\u003d[]);for(var g\u003d-1,p\u003de.length;++g\u003cp;)(u\u003de[g])\u0026\u0026jo(u,g,o,i),t.push(u)}return Do(a,o)},Ns.filter\u003dfunction(n){var t,e,r,u\u003d[];\"function\"!\u003dtypeof n\u0026\u0026(n\u003dq(n));for(var i\u003d0,o\u003dthis.length;o\u003ei;i++){u.push(t\u003d[]);for(var e\u003dthis[i],a\u003d0,c\u003de.length;c\u003ea;a++)(r\u003de[a])\u0026\u0026n.call(r,r.__data__,a,i)\u0026\u0026t.push(r)}return Do(u,this.id)},Ns.tween\u003dfunction(n,t){var e\u003dthis.id;return arguments.length\u003c2?this.node().__transition__[e].tween.get(n):R(this,null\u003d\u003dt?function(t){t.__transition__[e].tween.remove(n)}:function(r){r.__transition__[e].tween.set(n,t)})},Ns.attr\u003dfunction(n,t){function e(){this.removeAttribute(a)}function r(){this.removeAttributeNS(a.space,a.local)}function u(n){return null\u003d\u003dn?e:(n+\u003d\"\",function(){var t,e\u003dthis.getAttribute(a);return e!\u003d\u003dn\u0026\u0026(t\u003do(e,n),function(n){this.setAttribute(a,t(n))})})}function i(n){return null\u003d\u003dn?r:(n+\u003d\"\",function(){var t,e\u003dthis.getAttributeNS(a.space,a.local);return e!\u003d\u003dn\u0026\u0026(t\u003do(e,n),function(n){this.setAttributeNS(a.space,a.local,t(n))})})}if(arguments.length\u003c2){for(t in n)this.attr(t,n[t]);return this}var o\u003d\"transform\"\u003d\u003dn?Ru:fu,a\u003dXo.ns.qualify(n);return Po(this,\"attr.\"+n,t,a.local?i:u)},Ns.attrTween\u003dfunction(n,t){function e(n,e){var r\u003dt.call(this,n,e,this.getAttribute(u));return r\u0026\u0026function(n){this.setAttribute(u,r(n))}}function r(n,e){var r\u003dt.call(this,n,e,this.getAttributeNS(u.space,u.local));return r\u0026\u0026function(n){this.setAttributeNS(u.space,u.local,r(n))}}var u\u003dXo.ns.qualify(n);return this.tween(\"attr.\"+n,u.local?r:e)},Ns.style\u003dfunction(n,t,e){function r(){this.style.removeProperty(n)}function u(t){return null\u003d\u003dt?r:(t+\u003d\"\",function(){var r,u\u003dGo.getComputedStyle(this,null).getPropertyValue(n);return u!\u003d\u003dt\u0026\u0026(r\u003dfu(u,t),function(t){this.style.setProperty(n,r(t),e)})})}var i\u003darguments.length;if(3\u003ei){if(\"string\"!\u003dtypeof n){2\u003ei\u0026\u0026(t\u003d\"\");for(e in n)this.style(e,n[e],t);return this}e\u003d\"\"}return Po(this,\"style.\"+n,t,u)},Ns.styleTween\u003dfunction(n,t,e){function r(r,u){var i\u003dt.call(this,r,u,Go.getComputedStyle(this,null).getPropertyValue(n));return i\u0026\u0026function(t){this.style.setProperty(n,i(t),e)}}return arguments.length\u003c3\u0026\u0026(e\u003d\"\"),this.tween(\"style.\"+n,r)},Ns.text\u003dfunction(n){return Po(this,\"text\",n,Uo)},Ns.remove\u003dfunction(){return this.each(\"end.transition\",function(){var n;this.__transition__.count\u003c2\u0026\u0026(n\u003dthis.parentNode)\u0026\u0026n.removeChild(this)})},Ns.ease\u003dfunction(n){var t\u003dthis.id;return arguments.length\u003c1?this.node().__transition__[t].ease:(\"function\"!\u003dtypeof n\u0026\u0026(n\u003dXo.ease.apply(Xo,arguments)),R(this,function(e){e.__transition__[t].ease\u003dn}))},Ns.delay\u003dfunction(n){var t\u003dthis.id;return R(this,\"function\"\u003d\u003dtypeof n?function(e,r,u){e.__transition__[t].delay\u003d+n.call(e,e.__data__,r,u)}:(n\u003d+n,function(e){e.__transition__[t].delay\u003dn}))},Ns.duration\u003dfunction(n){var t\u003dthis.id;return R(this,\"function\"\u003d\u003dtypeof n?function(e,r,u){e.__transition__[t].duration\u003dMath.max(1,n.call(e,e.__data__,r,u))}:(n\u003dMath.max(1,n),function(e){e.__transition__[t].duration\u003dn}))},Ns.each\u003dfunction(n,t){var e\u003dthis.id;if(arguments.length\u003c2){var r\u003dEs,u\u003dks;ks\u003de,R(this,function(t,r,u){Es\u003dt.__transition__[e],n.call(t,t.__data__,r,u)}),Es\u003dr,ks\u003du}else R(this,function(r){var u\u003dr.__transition__[e];(u.event||(u.event\u003dXo.dispatch(\"start\",\"end\"))).on(n,t)});return this},Ns.transition\u003dfunction(){for(var n,t,e,r,u\u003dthis.id,i\u003d++Ls,o\u003d[],a\u003d0,c\u003dthis.length;c\u003ea;a++){o.push(n\u003d[]);for(var t\u003dthis[a],s\u003d0,l\u003dt.length;l\u003es;s++)(e\u003dt[s])\u0026\u0026(r\u003dObject.create(e.__transition__[u]),r.delay+\u003dr.duration,jo(e,s,i,r)),n.push(e)}return Do(o,i)},Xo.svg.axis\u003dfunction(){function n(n){n.each(function(){var n,s\u003dXo.select(this),l\u003dthis.__chart__||e,f\u003dthis.__chart__\u003de.copy(),h\u003dnull\u003d\u003dc?f.ticks?f.ticks.apply(f,a):f.domain():c,g\u003dnull\u003d\u003dt?f.tickFormat?f.tickFormat.apply(f,a):bt:t,p\u003ds.selectAll(\".tick\").data(h,f),v\u003dp.enter().insert(\"g\",\".domain\").attr(\"class\",\"tick\").style(\"opacity\",Aa),d\u003dXo.transition(p.exit()).style(\"opacity\",Aa).remove(),m\u003dXo.transition(p).style(\"opacity\",1),y\u003dRi(f),x\u003ds.selectAll(\".domain\").data([0]),M\u003d(x.enter().append(\"path\").attr(\"class\",\"domain\"),Xo.transition(x));v.append(\"line\"),v.append(\"text\");var _\u003dv.select(\"line\"),b\u003dm.select(\"line\"),w\u003dp.select(\"text\").text(g),S\u003dv.select(\"text\"),k\u003dm.select(\"text\");switch(r){case\"bottom\":n\u003dHo,_.attr(\"y2\",u),S.attr(\"y\",Math.max(u,0)+o),b.attr(\"x2\",0).attr(\"y2\",u),k.attr(\"x\",0).attr(\"y\",Math.max(u,0)+o),w.attr(\"dy\",\".71em\").style(\"text-anchor\",\"middle\"),M.attr(\"d\",\"M\"+y[0]+\",\"+i+\"V0H\"+y[1]+\"V\"+i);break;case\"top\":n\u003dHo,_.attr(\"y2\",-u),S.attr(\"y\",-(Math.max(u,0)+o)),b.attr(\"x2\",0).attr(\"y2\",-u),k.attr(\"x\",0).attr(\"y\",-(Math.max(u,0)+o)),w.attr(\"dy\",\"0em\").style(\"text-anchor\",\"middle\"),M.attr(\"d\",\"M\"+y[0]+\",\"+-i+\"V0H\"+y[1]+\"V\"+-i);break;case\"left\":n\u003dFo,_.attr(\"x2\",-u),S.attr(\"x\",-(Math.max(u,0)+o)),b.attr(\"x2\",-u).attr(\"y2\",0),k.attr(\"x\",-(Math.max(u,0)+o)).attr(\"y\",0),w.attr(\"dy\",\".32em\").style(\"text-anchor\",\"end\"),M.attr(\"d\",\"M\"+-i+\",\"+y[0]+\"H0V\"+y[1]+\"H\"+-i);break;case\"right\":n\u003dFo,_.attr(\"x2\",u),S.attr(\"x\",Math.max(u,0)+o),b.attr(\"x2\",u).attr(\"y2\",0),k.attr(\"x\",Math.max(u,0)+o).attr(\"y\",0),w.attr(\"dy\",\".32em\").style(\"text-anchor\",\"start\"),M.attr(\"d\",\"M\"+i+\",\"+y[0]+\"H0V\"+y[1]+\"H\"+i)}if(f.rangeBand){var E\u003df,A\u003dE.rangeBand()/2;l\u003df\u003dfunction(n){return E(n)+A}}else l.rangeBand?l\u003df:d.call(n,f);v.call(n,l),m.call(n,f)})}var t,e\u003dXo.scale.linear(),r\u003dzs,u\u003d6,i\u003d6,o\u003d3,a\u003d[10],c\u003dnull;return n.scale\u003dfunction(t){return arguments.length?(e\u003dt,n):e},n.orient\u003dfunction(t){return arguments.length?(r\u003dt in qs?t+\"\":zs,n):r},n.ticks\u003dfunction(){return arguments.length?(a\u003darguments,n):a},n.tickValues\u003dfunction(t){return arguments.length?(c\u003dt,n):c},n.tickFormat\u003dfunction(e){return arguments.length?(t\u003de,n):t},n.tickSize\u003dfunction(t){var e\u003darguments.length;return e?(u\u003d+t,i\u003d+arguments[e-1],n):u},n.innerTickSize\u003dfunction(t){return arguments.length?(u\u003d+t,n):u},n.outerTickSize\u003dfunction(t){return arguments.length?(i\u003d+t,n):i},n.tickPadding\u003dfunction(t){return arguments.length?(o\u003d+t,n):o},n.tickSubdivide\u003dfunction(){return arguments.length\u0026\u0026n},n};var zs\u003d\"bottom\",qs\u003d{top:1,right:1,bottom:1,left:1};Xo.svg.brush\u003dfunction(){function n(i){i.each(function(){var i\u003dXo.select(this).style(\"pointer-events\",\"all\").style(\"-webkit-tap-highlight-color\",\"rgba(0,0,0,0)\").on(\"mousedown.brush\",u).on(\"touchstart.brush\",u),o\u003di.selectAll(\".background\").data([0]);o.enter().append(\"rect\").attr(\"class\",\"background\").style(\"visibility\",\"hidden\").style(\"cursor\",\"crosshair\"),i.selectAll(\".extent\").data([0]).enter().append(\"rect\").attr(\"class\",\"extent\").style(\"cursor\",\"move\");var a\u003di.selectAll(\".resize\").data(p,bt);a.exit().remove(),a.enter().append(\"g\").attr(\"class\",function(n){return\"resize \"+n}).style(\"cursor\",function(n){return Ts[n]}).append(\"rect\").attr(\"x\",function(n){return/[ew]$/.test(n)?-3:null}).attr(\"y\",function(n){return/^[ns]/.test(n)?-3:null}).attr(\"width\",6).attr(\"height\",6).style(\"visibility\",\"hidden\"),a.style(\"display\",n.empty()?\"none\":null);var l,f\u003dXo.transition(i),h\u003dXo.transition(o);c\u0026\u0026(l\u003dRi(c),h.attr(\"x\",l[0]).attr(\"width\",l[1]-l[0]),e(f)),s\u0026\u0026(l\u003dRi(s),h.attr(\"y\",l[0]).attr(\"height\",l[1]-l[0]),r(f)),t(f)})}function t(n){n.selectAll(\".resize\").attr(\"transform\",function(n){return\"translate(\"+l[+/e$/.test(n)]+\",\"+f[+/^s/.test(n)]+\")\"})}function e(n){n.select(\".extent\").attr(\"x\",l[0]),n.selectAll(\".extent,.n\u003erect,.s\u003erect\").attr(\"width\",l[1]-l[0])}function r(n){n.select(\".extent\").attr(\"y\",f[0]),n.selectAll(\".extent,.e\u003erect,.w\u003erect\").attr(\"height\",f[1]-f[0])}function u(){function u(){32\u003d\u003dXo.event.keyCode\u0026\u0026(C||(x\u003dnull,L[0]-\u003dl[1],L[1]-\u003df[1],C\u003d2),d())}function p(){32\u003d\u003dXo.event.keyCode\u0026\u00262\u003d\u003dC\u0026\u0026(L[0]+\u003dl[1],L[1]+\u003df[1],C\u003d0,d())}function v(){var n\u003dXo.mouse(_),u\u003d!1;M\u0026\u0026(n[0]+\u003dM[0],n[1]+\u003dM[1]),C||(Xo.event.altKey?(x||(x\u003d[(l[0]+l[1])/2,(f[0]+f[1])/2]),L[0]\u003dl[+(n[0]\u003cx[0])],L[1]\u003df[+(n[1]\u003cx[1])]):x\u003dnull),E\u0026\u0026m(n,c,0)\u0026\u0026(e(S),u\u003d!0),A\u0026\u0026m(n,s,1)\u0026\u0026(r(S),u\u003d!0),u\u0026\u0026(t(S),w({type:\"brush\",mode:C?\"move\":\"resize\"}))}function m(n,t,e){var r,u,a\u003dRi(t),c\u003da[0],s\u003da[1],p\u003dL[e],v\u003de?f:l,d\u003dv[1]-v[0];return C\u0026\u0026(c-\u003dp,s-\u003dd+p),r\u003d(e?g:h)?Math.max(c,Math.min(s,n[e])):n[e],C?u\u003d(r+\u003dp)+d:(x\u0026\u0026(p\u003dMath.max(c,Math.min(s,2*x[e]-r))),r\u003ep?(u\u003dr,r\u003dp):u\u003dp),v[0]!\u003dr||v[1]!\u003du?(e?o\u003dnull:i\u003dnull,v[0]\u003dr,v[1]\u003du,!0):void 0}function y(){v(),S.style(\"pointer-events\",\"all\").selectAll(\".resize\").style(\"display\",n.empty()?\"none\":null),Xo.select(\"body\").style(\"cursor\",null),z.on(\"mousemove.brush\",null).on(\"mouseup.brush\",null).on(\"touchmove.brush\",null).on(\"touchend.brush\",null).on(\"keydown.brush\",null).on(\"keyup.brush\",null),N(),w({type:\"brushend\"})}var x,M,_\u003dthis,b\u003dXo.select(Xo.event.target),w\u003da.of(_,arguments),S\u003dXo.select(_),k\u003db.datum(),E\u003d!/^(n|s)$/.test(k)\u0026\u0026c,A\u003d!/^(e|w)$/.test(k)\u0026\u0026s,C\u003db.classed(\"extent\"),N\u003dO(),L\u003dXo.mouse(_),z\u003dXo.select(Go).on(\"keydown.brush\",u).on(\"keyup.brush\",p);if(Xo.event.changedTouches?z.on(\"touchmove.brush\",v).on(\"touchend.brush\",y):z.on(\"mousemove.brush\",v).on(\"mouseup.brush\",y),S.interrupt().selectAll(\"*\").interrupt(),C)L[0]\u003dl[0]-L[0],L[1]\u003df[0]-L[1];else if(k){var q\u003d+/w$/.test(k),T\u003d+/^n/.test(k);M\u003d[l[1-q]-L[0],f[1-T]-L[1]],L[0]\u003dl[q],L[1]\u003df[T]}else Xo.event.altKey\u0026\u0026(x\u003dL.slice());S.style(\"pointer-events\",\"none\").selectAll(\".resize\").style(\"display\",null),Xo.select(\"body\").style(\"cursor\",b.style(\"cursor\")),w({type:\"brushstart\"}),v()}var i,o,a\u003dy(n,\"brushstart\",\"brush\",\"brushend\"),c\u003dnull,s\u003dnull,l\u003d[0,0],f\u003d[0,0],h\u003d!0,g\u003d!0,p\u003dRs[0];return n.event\u003dfunction(n){n.each(function(){var n\u003da.of(this,arguments),t\u003d{x:l,y:f,i:i,j:o},e\u003dthis.__chart__||t;this.__chart__\u003dt,ks?Xo.select(this).transition().each(\"start.brush\",function(){i\u003de.i,o\u003de.j,l\u003de.x,f\u003de.y,n({type:\"brushstart\"})}).tween(\"brush:brush\",function(){var e\u003dhu(l,t.x),r\u003dhu(f,t.y);return i\u003do\u003dnull,function(u){l\u003dt.x\u003de(u),f\u003dt.y\u003dr(u),n({type:\"brush\",mode:\"resize\"})}}).each(\"end.brush\",function(){i\u003dt.i,o\u003dt.j,n({type:\"brush\",mode:\"resize\"}),n({type:\"brushend\"})}):(n({type:\"brushstart\"}),n({type:\"brush\",mode:\"resize\"}),n({type:\"brushend\"}))})},n.x\u003dfunction(t){return arguments.length?(c\u003dt,p\u003dRs[!c\u003c\u003c1|!s],n):c},n.y\u003dfunction(t){return arguments.length?(s\u003dt,p\u003dRs[!c\u003c\u003c1|!s],n):s},n.clamp\u003dfunction(t){return arguments.length?(c\u0026\u0026s?(h\u003d!!t[0],g\u003d!!t[1]):c?h\u003d!!t:s\u0026\u0026(g\u003d!!t),n):c\u0026\u0026s?[h,g]:c?h:s?g:null},n.extent\u003dfunction(t){var e,r,u,a,h;return arguments.length?(c\u0026\u0026(e\u003dt[0],r\u003dt[1],s\u0026\u0026(e\u003de[0],r\u003dr[0]),i\u003d[e,r],c.invert\u0026\u0026(e\u003dc(e),r\u003dc(r)),e\u003er\u0026\u0026(h\u003de,e\u003dr,r\u003dh),(e!\u003dl[0]||r!\u003dl[1])\u0026\u0026(l\u003d[e,r])),s\u0026\u0026(u\u003dt[0],a\u003dt[1],c\u0026\u0026(u\u003du[1],a\u003da[1]),o\u003d[u,a],s.invert\u0026\u0026(u\u003ds(u),a\u003ds(a)),u\u003ea\u0026\u0026(h\u003du,u\u003da,a\u003dh),(u!\u003df[0]||a!\u003df[1])\u0026\u0026(f\u003d[u,a])),n):(c\u0026\u0026(i?(e\u003di[0],r\u003di[1]):(e\u003dl[0],r\u003dl[1],c.invert\u0026\u0026(e\u003dc.invert(e),r\u003dc.invert(r)),e\u003er\u0026\u0026(h\u003de,e\u003dr,r\u003dh))),s\u0026\u0026(o?(u\u003do[0],a\u003do[1]):(u\u003df[0],a\u003df[1],s.invert\u0026\u0026(u\u003ds.invert(u),a\u003ds.invert(a)),u\u003ea\u0026\u0026(h\u003du,u\u003da,a\u003dh))),c\u0026\u0026s?[[e,u],[r,a]]:c?[e,r]:s\u0026\u0026[u,a])},n.clear\u003dfunction(){return n.empty()||(l\u003d[0,0],f\u003d[0,0],i\u003do\u003dnull),n},n.empty\u003dfunction(){return!!c\u0026\u0026l[0]\u003d\u003dl[1]||!!s\u0026\u0026f[0]\u003d\u003df[1]},Xo.rebind(n,a,\"on\")};var Ts\u003d{n:\"ns-resize\",e:\"ew-resize\",s:\"ns-resize\",w:\"ew-resize\",nw:\"nwse-resize\",ne:\"nesw-resize\",se:\"nwse-resize\",sw:\"nesw-resize\"},Rs\u003d[[\"n\",\"e\",\"s\",\"w\",\"nw\",\"ne\",\"se\",\"sw\"],[\"e\",\"w\"],[\"n\",\"s\"],[]],Ds\u003dtc.format\u003dac.timeFormat,Ps\u003dDs.utc,Us\u003dPs(\"%Y-%m-%dT%H:%M:%S.%LZ\");Ds.iso\u003dDate.prototype.toISOString\u0026\u0026+new Date(\"2000-01-01T00:00:00.000Z\")?Oo:Us,Oo.parse\u003dfunction(n){var t\u003dnew Date(n);return isNaN(t)?null:t},Oo.toString\u003dUs.toString,tc.second\u003dRt(function(n){return new ec(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),tc.seconds\u003dtc.second.range,tc.seconds.utc\u003dtc.second.utc.range,tc.minute\u003dRt(function(n){return new ec(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),tc.minutes\u003dtc.minute.range,tc.minutes.utc\u003dtc.minute.utc.range,tc.hour\u003dRt(function(n){var t\u003dn.getTimezoneOffset()/60;return new ec(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),tc.hours\u003dtc.hour.range,tc.hours.utc\u003dtc.hour.utc.range,tc.month\u003dRt(function(n){return n\u003dtc.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),tc.months\u003dtc.month.range,tc.months.utc\u003dtc.month.utc.range;var js\u003d[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Hs\u003d[[tc.second,1],[tc.second,5],[tc.second,15],[tc.second,30],[tc.minute,1],[tc.minute,5],[tc.minute,15],[tc.minute,30],[tc.hour,1],[tc.hour,3],[tc.hour,6],[tc.hour,12],[tc.day,1],[tc.day,2],[tc.week,1],[tc.month,1],[tc.month,3],[tc.year,1]],Fs\u003dDs.multi([[\".%L\",function(n){return n.getMilliseconds()}],[\":%S\",function(n){return n.getSeconds()}],[\"%I:%M\",function(n){return n.getMinutes()}],[\"%I %p\",function(n){return n.getHours()}],[\"%a %d\",function(n){return n.getDay()\u0026\u00261!\u003dn.getDate()}],[\"%b %d\",function(n){return 1!\u003dn.getDate()}],[\"%B\",function(n){return n.getMonth()}],[\"%Y\",be]]),Os\u003d{range:function(n,t,e){return Xo.range(+n,+t,e).map(Io)},floor:bt,ceil:bt};Hs.year\u003dtc.year,tc.scale\u003dfunction(){return Yo(Xo.scale.linear(),Hs,Fs)};var Ys\u003dHs.map(function(n){return[n[0].utc,n[1]]}),Is\u003dPs.multi([[\".%L\",function(n){return n.getUTCMilliseconds()}],[\":%S\",function(n){return n.getUTCSeconds()}],[\"%I:%M\",function(n){return n.getUTCMinutes()}],[\"%I %p\",function(n){return n.getUTCHours()}],[\"%a %d\",function(n){return n.getUTCDay()\u0026\u00261!\u003dn.getUTCDate()}],[\"%b %d\",function(n){return 1!\u003dn.getUTCDate()}],[\"%B\",function(n){return n.getUTCMonth()}],[\"%Y\",be]]);Ys.year\u003dtc.year.utc,tc.scale.utc\u003dfunction(){return Yo(Xo.scale.linear(),Ys,Is)},Xo.text\u003dwt(function(n){return n.responseText}),Xo.json\u003dfunction(n,t){return St(n,\"application/json\",Zo,t)},Xo.html\u003dfunction(n,t){return St(n,\"text/html\",Vo,t)},Xo.xml\u003dwt(function(n){return n.responseXML}),\"function\"\u003d\u003dtypeof define\u0026\u0026define.amd?define(Xo):\"object\"\u003d\u003dtypeof module\u0026\u0026module.exports?module.exports\u003dXo:this.d3\u003dXo}();"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 5
    }
  },
  {
    "path": "docs/stylesheets/js/draw.js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "var width \u003d 500,"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    height \u003d 500,"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    radius \u003d Math.min(width, height) / 2,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    innerRadius \u003d 0.3 * radius;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "var pie \u003d d3.layout.pie()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .sort(null)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .value(function(d) { return d.width; });"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "var tip \u003d d3.tip()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  .attr(\u0027class\u0027, \u0027d3-tip\u0027)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  .offset([0, 0])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  .html(function(d) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    return d.data.label + \": \u003cspan style\u003d\u0027color:orangered\u0027\u003e\" + d.data.score + \"\u003c/span\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  });"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "var arc \u003d d3.svg.arc()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  .innerRadius(innerRadius)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  .outerRadius(function (d) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    return (radius - innerRadius) * (d.data.score / 100.0) + innerRadius;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "var outlineArc \u003d d3.svg.arc()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        .innerRadius(innerRadius)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        .outerRadius(radius);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "var svg \u003d d3.select(\"body\").append(\"svg\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .attr(\"width\", width)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .attr(\"height\", height)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .append(\"g\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "svg.call(tip);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "d3.csv(\u0027aster_data.csv\u0027, function(error, data) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  data.forEach(function(d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    d.id     \u003d  d.id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    d.order  \u003d +d.order;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    d.color  \u003d  d.color;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    d.weight \u003d +d.weight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    d.score  \u003d +d.score;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    d.width  \u003d +d.weight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    d.label  \u003d  d.label;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  // for (var i \u003d 0; i \u003c data.score; i++) { console.log(data[i].id) }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  var path \u003d svg.selectAll(\".solidArc\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .data(pie(data))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .enter().append(\"path\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"fill\", function(d) { return d.data.color; })"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"class\", \"solidArc\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"stroke\", \"gray\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"d\", arc)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .on(\u0027mouseover\u0027, tip.show)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .on(\u0027mouseout\u0027, tip.hide);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  var outerPath \u003d svg.selectAll(\".outlineArc\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .data(pie(data))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .enter().append(\"path\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"fill\", \"none\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"stroke\", \"gray\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"class\", \"outlineArc\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      .attr(\"d\", outlineArc);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  // calculate the weighted mean score"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  var score \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    data.reduce(function(a, b) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      //console.log(\u0027a:\u0027 + a + \u0027, b.score: \u0027 + b.score + \u0027, b.weight: \u0027 + b.weight);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      return a + (b.score * b.weight);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }, 0) /"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    data.reduce(function(a, b) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      return a + b.weight;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }, 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  svg.append(\"svg:text\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .attr(\"class\", \"aster-score\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .attr(\"dy\", \".35em\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .attr(\"text-anchor\", \"middle\") // text-align: right"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    .text(Math.round(score));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 83
    }
  },
  {
    "path": "docs/team/JeremyLoye.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ":profile-caption: :computer:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d Jeremy Loye Hean Wei - Project Portfolio"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d PROJECT: In-Credit-Ble (Finance Tracker)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "_In-Credit-Ble_ is a desktop Finance Tracker that is tailored to help users manage their finances"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "and keep track of their budget in an easy and efficient manner. It is designed for those who"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "prefer to work with a Command Line Interface (CLI), especially for those who prefer to type over"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "using their mouse."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "_In-Credit-Ble_ was developed by a team of five students from the National University of Singapore"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "as part of a Software Engineering module (CS2103T)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " We had to adapt to an existing codebase in Java and develop a functional product in a short"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " span of 13 weeks while learning new software engineering concepts. In this project portfolio,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " I will be documenting my contributions to this project through the major and minor features implemented for _In-Credit-Ble_."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Major enhancement*: added `Budget`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** *_What it does_*: Allows the user to set a Budget for the app. The user can set a budget to keep track"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "of current expenditure and the amount of budget left deducting from the budget set."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** *_Justification_*: This feature is an essential part of the utility of a FinanceTracker. Users want a FinanceTracker"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "to keep track of their finances and set realistic budget targets for their expenditure."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Highlights of feature:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "*** This enhancement can be initially triggered using the `set` command and can be seen when editing records."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "Using the `set` command, users can set a budget for the app. Any spending records added afterwards will deduct"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "automatically from the total budget. The UI will reflect each change in expenditure and reflect the appropriate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "budget left. This feature will take into account editing, adding and deleting of records."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Minor enhancement*: Changing data files for different users through `setfile`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** _What it does_: Allows the user or multiple users to change profiles on a single FinanceTracker without"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "overriding each others\u0027 data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** _Justification_: It is limiting to just have one user profile when there could be multiple users of the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "same FinanceTracker app as multiple users cannot be tracked. A single user could want to maintain multiple"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "FinanceTracker profiles (Record and Budget) for different purposes such as personal and business."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** Highlights of feature:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "*** This feature is called by the `setfile` command. Using this command will cause the designated filename to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "load. If the file was not previously created, a default data set will be created."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "link:https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dJeremyLoye[Collated Code by RepoSense]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "* *Notable Contributions:*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** *_Project Management_*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "*** *Manging Issue Tracker*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "**** Managed issue trackers: https://github.com/CS2103-AY1819S2-W17-3/main/issues/10[#10],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/38[#38],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/40[#40],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/42[#42],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/44[#44],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/45[#45],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/86[#86],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/126[#126]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "** *_Community_*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "*** PRs Reviews:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/90[#90],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/92[#92],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/93[#93],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/104[#104],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/107[#107]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "|_The next section will detail the User Guide we have updated from the original AddressBook User Guide."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "More specifically, it will detail the instructions I added for the features I have implemented."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "include::../UserGuide.adoc[tag\u003dset]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetfile]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "|_The following section will include the sections of my contribution to the Developer Guide."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "The developer guide is a piece of document that showcases my ability to write technical documentation as"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "well as make the code easier to read and add enhancements to._"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbudget]"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 87
    }
  },
  {
    "path": "docs/team/eugeneyl.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d Eugene Yong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "//[#img-ProfilePhoto]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "//image::eugeneyl.png[width\u003d\"75\",float \u003d left]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "--"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "This page aims to showcase my contribution to the project _In-Credit-Ble_ in tandem with the software engineering"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "module (CS2103T)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "--"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d PROJECT: In-Credit-Ble"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "_In-Credit-Ble_ is a Finance Tracker created in order to assist fellow students who have difficulty keeping track of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "their daily expenses due to the multitude of micro-transactions that they encounter in their daily life. By allowing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "users to easily record their transactions and navigate through their numerous expenses, we hope to help to provide our"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "users with a hassle-free way of managing their expenses."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "_In-Credit-Ble_ was developed by a team of five students from the National University of Singapore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "as part of a Software Engineering module (CS2103T). In a short span of 3 months, we have to understand the basic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "structure of a software and adapt the source code of a addressBook into our finance tracker application."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "I will be documenting my contributions to this project through the major and minor features implemented for"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "_In-Credit-Ble_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*Enhancement Added*: I added the ability to find records based on name, category or dates."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*What it does*: The `search` command allows the user to search for records based on keyword that correspond to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "records\u0027 name, category or date depending on the flag that user input. The sum of all results of the search is also"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "displayed to allow user to know how much money he/she has spent on a particular type of transaction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*Justification*: In the midst of numerous records that the user has recorded in the application, this function will"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "allow the user to filter out certain transactions record that he is interested in. Having the sum of these records will"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "also allow the user to know how much money he/she has spent for either a particular category, date or item."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*Highlights*: This enhancement can be triggered using the \u0027search\u0027 command. This feature is also expandable in"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "to filter out different kind of records by adding additional categories in which the user can search with."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*Code Contribution* : Please click on this link"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "to see a sample of my code: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003deugeneyl[Functional Code]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "*Other Contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* Enhancement to existing Feature:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Changed all instances of person to record when adapting the address book application to the finance tracker"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "application. (Pull request https://github.com/CS2103-AY1819S2-W17-3/main/pull/58[#58])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Set the restriction to the input that the `amount` class can take in."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "(Pull Request: https://github.com/CS2103-AY1819S2-W17-3/main/pull/64[#68])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Added the $ prefix to amount displayed on the record card. (Pull Request"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/95[#95])"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Updated the application description in the ReadMe document so that users know what In-Credit-Ble is for."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "(Pull Request: https://github.com/CS2103-AY1819S2-W17-3/main/pull/9[#9])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Created initial diagrams for the design of the applicatiion."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "(Pull Request: https://github.com/CS2103-AY1819S2-W17-3/main/pull/26[#26])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "** Reviewed Pull Requests:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "|_Listed below are sections of my contribution to the User Guide of _In_Credit_Ble, showcasing my ability in documenting"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " a user guide for end-users of our product._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsearch]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide, showcasing my ability to write technical documentation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "and the technical depth of my code contributions._"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsearch]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 100
    }
  },
  {
    "path": "docs/team/geezlouisee.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d Louise Lee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d PROJECT: In-Credit-Ble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "_In-Credit-Ble_ is an expense tracker that is tailored to help users manage their finances and keep track of their budget in an easy and efficient manner. It is designed for those who prefer to work with a Command Line Interface (CLI), especially for those who prefer to type over using their mouse."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "_In-Credit-Ble_ was developed by four friends and I, from the National University of Singapore. This product was developed as part of our Software Engineering module, CS2103T. We had to adapt to an existing codebase in Java and develop a functional product in a short span of 13 weeks. In this project portfolio, I will be documenting my personal contributions to this project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "This section summarises my contributions towards the code, documentation, as well as other helpful contributions to the team project."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "* *Major enhancement*: added *Summary* command to represent the overview of expenses in a graphical form"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** What it does: Allows the user to view an overview of all their expenditures in a single graph. Each sector represents a category and gets “filled up” according to the percentage spent of the allocated budget for that particular sector."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Justification: This feature improves the product significantly because a user will be able to see a quick overview of their spending in a pictorial form. This allows users to easily perceive whether their spending is within their budget for each category."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Highlights: This enhancement required an in-depth analysis of design alternatives. The implementation was also quite challenging as it required linking to third party libraries."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Credits: Usage of D3, a JavaScript library for data visualisations via HTML, SVG, and CSS."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dgeezlouisee[Functional code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*** Helped to manage issue tracker (https://github.com/CS2103-AY1819S2-W17-3/main/issues/89[#89])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*** Added more colours to tags, and refactored them as categories to suit our product (https://github.com/CS2103-AY1819S2-W17-3/main/pull/20[#20], https://github.com/CS2103-AY1819S2-W17-3/main/pull/59[#59], https://github.com/CS2103-AY1819S2-W17-3/main/pull/73[#73])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/CS2103-AY1819S2-W17-3/main/pull/109[#109]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*** Did cosmetic tweaks to the Developer Guide (https://github.com/CS2103-AY1819S2-W17-3/main/pull/4[#4], https://github.com/CS2103-AY1819S2-W17-3/main/pull/8[#8], https://github.com/CS2103-AY1819S2-W17-3/main/pull/78[#78])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-W17-3/main/pull/64[#64]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*** Integrated a third party library (d3.js) to the project (https://github.com/CS2103-AY1819S2-W17-3/main/pull/104[#104])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "*** Configured project to link properly to RepoSense (https://github.com/CS2103-AY1819S2-W17-3/main/pull/70[#70])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|_We had to update the original addressbook\u0027s User Guide with instructions for the enhancements that we had added. The following is an excerpt from our In-Credit-Ble User Guide, showing additions that I have made for the `summary` feature._"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|_This section contains excerpts from our In-Credit-Ble Developer Guide, showing additions that I have made for the `summary` feature and appendices A and B._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|_While the whole group was involved in the discussion and formulation of our Product Scope and User Stories, I was the one who collated it at the end, streamlined redundancies and standardised the format and grammar._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixA]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendixB]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003d\u003d [Proposed Enhancement] Additional parameters for `summary` feature (coming in v1.4)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "I intend for the `summary` command to be able to accept parameters (ie. start and end date specified by the user). This will enable users to see their expenditures for each category within their specified duration. However, these parameters will be optional. If the user does not specify the start and end dates, the application will just reflect changes according to their total budget and expenditures."
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 67
    }
  },
  {
    "path": "docs/team/jackimaru96.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ":profile-caption: :computer:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d Jack Chen Yu Jie - Project Portfolio"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "[PROFILE]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "--"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "image::jackimaru96_pp.png[120,120,float\u003d\"left\",link\u003dhttps://github.com/Jackimaru96]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "--"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "This page aims to showcase my contributions to the project +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*In-Credit-Ble* under module _CS2103T_. It consists of an overview of the project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "and also summary of my contributions to the User Guide and Developer Guide for the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "features I developed for the project"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "--"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "image::github_icon.png[65,90,float\u003d\"left\",link\u003dhttps://github.com/]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "image::java.png[70,90,float\u003d\"left\",link\u003dhttps://www.java.com/en/download/]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "image::junit5-logo.png[66,90,float\u003d\"left\" link\u003dhttps://junit.org/junit5/]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "image::json.png[67,90, float\u003d\"left\" link\u003dhttps://www.json.org/]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "image::travis.png[66,90,link\u003dhttps://travis-ci.org/]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "--"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d PROJECT: In-Credit-Ble (Finance Tracker)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "---"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "_In-Credit-Ble_ is a desktop Finance Tracker that is tailored to help users manage their finances"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "and keep track of their budget in an easy and efficient manner. It is designed for those who"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "prefer to work with a Command Line Interface (CLI), especially for those who prefer to type over"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "using their mouse."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "_In-Credit-Ble_ was developed by a team of five students from the National University of Singapore"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "as part of a Software Engineering module (CS2103T). As part of the module requirement,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " we had to adapt to an existing codebase in Java and develop a functional product in a short"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " span of 13 weeks while learning new software engineering concepts. We have opted for the option"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " of morphing the existing application into another (from an Address Book to a Finance Tracker)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " In this project portfolio, I will be documenting my contributions to this project through the major"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " and minor features implemented for _In-Credit-Ble_."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* *Major enhancement*: added `CategoryBudget`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** *_What it does_*: Allows user to set a budget for categories so as to keep track"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "of the expenses for each category (such as `Food`, `Travel`, `Clothes`)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "It ensures that the sum of budget of each category does not exceed the total budget"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "of the Finance Tracker."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** *_Justification_*: This feature improves the product significantly and enhances user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "ability to manage their expenses according to categories. For a finance tracker, it is important"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "as this will allow the user to categorise their spending to know which area he/she should"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "start spending less and which category they are able to increase their spending."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** Highlights of feature:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*** This enhancement can be triggered using the `allocate` command. Each of the category"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "budget is stored in the `TotalBudget` class which is implemented in the `Model` component."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*** Each category budget will be displayed on the UI to show the user the current spending"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "for that category over the total budget allocated for it."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* *Minor enhancement*: Changing theme of application"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** _What it does_: Allows user to change the colour theme of the application to pre-set themes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "such as `Dark`, `Light`, `Blue`, `Pink`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** _Justification_: This feature allows the user to have minor customisation of their In-Credit-Ble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "Finance Tracker Application"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** Highlights of feature:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*** This feature can be triggered using the `theme` command. Triggering this command will result in"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "the `UI` component changing its stylesheet to fit the pre-set themes indicated by the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "link:https://tinyurl.com/Jackimaru96[Collated Code by RepoSense]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "* *Notable Contributions:*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** *_Project Management_*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*** *Manging Issue Tracker*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "**** Added the necessary issue type labels as specified by course requirement. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "(e.g. `type.Story`, `type.Enhancement`, `status.onGoing`, `status.Completed`, `priorityHigh`)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "**** Managed issue trackers: https://github.com/CS2103-AY1819S2-W17-3/main/issues/10[#10],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/11[#11],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/12[#12],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/13[#13],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/14[#14],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/50[#50],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/51[#51],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/52[#52],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/53[#53],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/54[#54],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/55[#55],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/56[#56],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/82[#82],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/97[#97],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/issues/108[#108]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "** *_Community_*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*** PRs Reviews:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/111[#111],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/58[#58],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/CS2103-AY1819S2-W17-3/main/pull/64[#64]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*** Forum Participation:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/nus-cs2103-AY1819S2/forum/issues/41[41]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/nus-cs2103-AY1819S2/forum/issues/54[54]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "https://github.com/nus-cs2103-AY1819S2/forum/issues/59[59]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "|The next section will include my contribution to the User Guide. It will showcase my ability"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "in documenting a reader-friendly User Guide that is aimed at the end-users of _In-Credit-Ble_."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "It is important to be able to write a user-friendly guide that will allow the users to quickly grasp"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "how to use our application."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquickstart]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "include::../UserGuide.adoc[tag\u003dallocate]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtheme]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "|The following section will include the sections of my contribution to the Developer Guide."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "It showcases my ability to write technical documentation and the technical depth of my code contributions."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "This is important as in real-world software engineering projects, we are expected to work in team and being able to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "document Developer Guide well will allow colleagues or other developers to understand what we have coded better."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcategorybudget]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 146
    }
  },
  {
    "path": "docs/team/kjiaxuan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d Kok Jia Xuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d Project: In-Credit-Ble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* rephrase another day *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "My team and I were tasked with morphing a basic command line interface addressbook into something else for our Software Engineering project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "We decided to morph it into a finance tracker, and named it In-Credit-Ble. This application allows users"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "to set budgets and track their spendings through the command line interface."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "My role was to design and write the codes for the reverse and sort features."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The following sections explain these enhancements in more detail, and also show the relevant sections"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "I have added to the user and developer guide in relation to these enhancements."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* rephrase another day *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Enhancement added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* rephrase another day *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "I added a reverse and sort feature into the software."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* What they do: +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The `reverse` command allows users to reverse the list of entries displayed on the graphic user interface."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The `sort` command allows users to sort the entries by name or category in alphabetical order,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "amount from largest to smallest and date from most recent to least recent"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "(`sort -name`, `sort -cat`, `sort -amount` and `sort -date` )."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Justification: +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "Without the sort command, entries will be displayed in an order where the most recently entered entry is at the bottom of the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "However, this may not be very helpful and user-friendly to the user. A user may want to sort the entries by amount,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "so that he/she can find out what he/she has been spending the most on."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "A user may also want to sort entries by name, date and category to make the list more organised."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The reverse command will allow the user to reverse the list. Since the 4 sort capabilities have a default ordering,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "a user may want to view the entries in the opposite way. For example, a user may want the entry with the smallest expense"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "at the top of the list, or a user  may want the entries to be sorted in a way where the least recent expense is the top."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The user can then execute the `reverse command` after the `sort -amount` command and `sort -date` command respectively."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "* Highlights:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "-- not doneeee --"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "This enhancement … +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "An in-depth analysis of design alternatives was necessary to … +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "The implementation was also challenging as it required changes to existing commands …."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Code contributed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      }
    ],
    "authorContributionMap": {
      "kjiaxuan": 67
    }
  },
  {
    "path": "src/main/java/seedu/finance/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.FinanceTrackerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FinanceTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTrackerStorage financeTrackerStorage \u003d new JsonFinanceTrackerStorage("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                userPrefs.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        storage \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s finance tracker and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * The data from the sample finance tracker will be used instead if {@code storage}\u0027s finance tracker is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * or an empty finance tracker will be used instead if errors occur when reading {@code storage}\u0027s finance tracker."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Optional\u003cReadOnlyFinanceTracker\u003e financeTrackerOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        ReadOnlyFinanceTracker initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            financeTrackerOptional \u003d storage.readFinanceTracker();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            if (!financeTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FinanceTracker\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            initialData \u003d financeTrackerOptional.orElseGet(SampleDataUtil::getSampleFinanceTracker);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            initialData \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            initialData \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        logger.info(\"Starting FinanceTracker \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Finance Tracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "eugeneyl": 1,
      "kjiaxuan": 44
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final String LOG_FILE \u003d \"financetracker.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 16,
      "-": 110,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_INVALID_RECORD_DISPLAYED_INDEX \u003d \"The record index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_RECORDS_LISTED_OVERVIEW \u003d \"%1$d records listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_INVALID_THEME \u003d \"The theme provided does not exist!\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "-": 10,
      "eugeneyl": 1,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "package seedu.finance.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 11
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/events/ShowGraphRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "package seedu.finance.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * An event requesting to view the Graph page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class ShowGraphRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //Assuming we are using Arraylist to store records"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    // KIV may have to edit accordingly once Budget class is implemented"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private final ArrayList\u003cInteger\u003e recordsList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public ShowGraphRequestEvent(ArrayList\u003cInteger\u003e recordsList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        this.recordsList \u003d recordsList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public ArrayList\u003cInteger\u003e getRecordsList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return recordsList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 27
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/util/InvalidationListenerManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages a list of {@link InvalidationListener}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cInvalidationListener\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@link InvalidationListener#invalidated(Observable)} on all added listeners."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Any modifications to the listeners list during the invocation of this method"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param observable The {@code Observable} that became invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void callListeners(Observable observable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // Make a copy of listeners such that any modifications to the listeners list during"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // the invocation of this method will only take effect on the next invocation of this method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cInvalidationListener\u003e listenersCopy \u003d new ArrayList\u003c\u003e(listeners);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (InvalidationListener listener : listenersCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            listener.invalidated(observable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds {@code listener} to the list of listeners."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the same listener is added more that once, then it will be notified more than once."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.add(listener);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code listener} from the list of listeners."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was not previously added, then this method call is a no-op."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the given listener was added more than once, then only the first occurrence in the list will be removed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        listeners.remove(listener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns the amount value of {@code budget} with an ObjectProperty wrapper."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @see seedu.finance.model.Model#getBudget()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns the FinanceTracker."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see seedu.finance.model.Model#getFinanceTracker()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    ReadOnlyFinanceTracker getFinanceTracker();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Records */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Selected record in the filtered record list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * null if no record is selected."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see seedu.finance.model.Model#selectedRecordProperty()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    ReadOnlyProperty\u003cRecord\u003e selectedRecordProperty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Sets the selected record in the filtered record list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see seedu.finance.model.Model#setSelectedRecord(Record)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    void setSelectedRecord(Record record);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 8,
      "-": 51,
      "eugeneyl": 7,
      "kjiaxuan": 14
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.FinanceTrackerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final FinanceTrackerParser financeTrackerParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private boolean financeTrackerModified;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTrackerParser \u003d new FinanceTrackerParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // Set financeTrackerModified to true whenever the models\u0027 finance tracker is modified."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.getFinanceTracker().addListener(observable -\u003e financeTrackerModified \u003d true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTrackerModified \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            Command command \u003d financeTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (financeTrackerModified) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            logger.info(\"Finance tracker modified, saving to file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                storage.saveFinanceTracker(model.getFinanceTracker());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return model.getBudget();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return model.getFinanceTracker();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return model.getFilteredRecordList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return model.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public ReadOnlyProperty\u003cRecord\u003e selectedRecordProperty() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return model.selectedRecordProperty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setSelectedRecord(Record record) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.setSelectedRecord(record);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 6,
      "-": 76,
      "eugeneyl": 6,
      "kjiaxuan": 26
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/AllocateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.exceptions.CategoryBudgetExceedTotalBudgetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Allocates a certain amount to a category"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class AllocateCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"allocate\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"allo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set the budget amount for a particular category \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"by indicating the amount and the category.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Existing budget for the category will be overwritten by the input\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Parameters: \" + PREFIX_AMOUNT + \"AMOUNT \" + PREFIX_CATEGORY + \"CATEGORY\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_AMOUNT + \"100.10 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s category budget set to $%.2f\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String BUDGET_EXCEEDED_MESSAGE \u003d \"This category budget will exceed the total budget!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private CategoryBudget categoryBudget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public AllocateCommand(CategoryBudget catBudget) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireAllNonNull(catBudget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        categoryBudget \u003d catBudget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            model.addCategoryBudget(categoryBudget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            model.commitFinanceTracker();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            CommandResult cr \u003d new CommandResult(String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    categoryBudget.getCategory(), categoryBudget.getTotalBudget()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            // Trigger UI event:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            cr.changeCategoryBudget();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return cr;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        } catch (CategoryBudgetExceedTotalBudgetException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new CommandException(BUDGET_EXCEEDED_MESSAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // instanceof handle nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!(other instanceof AllocateCommand)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        //state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        AllocateCommand allocateCommand \u003d (AllocateCommand) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return this.categoryBudget.equals(((AllocateCommand) other).categoryBudget);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 74
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Clears the finance tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"clr\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Finance tracker has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.setFinanceTracker(new FinanceTracker());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, false, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "-": 16,
      "kjiaxuan": 10
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/CommandFlag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A flag that gives more information to the command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * E.g. -name in \u0027sort -name\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class CommandFlag {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public CommandFlag(String flag) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (!(obj instanceof CommandFlag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        CommandFlag otherCommandFlag \u003d (CommandFlag) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return otherCommandFlag.getFlag().equals(getFlag());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 6,
      "kjiaxuan": 34
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /** The application will change theme **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private boolean changeTheme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /** The application will update budget **/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private boolean changeBudget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /** The application will update category budget **/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private boolean changeCategoryBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private String themeToChange;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                         boolean changeTheme, String theme) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.changeTheme \u003d changeTheme;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.themeToChange \u003d theme;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * For changing of budget"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean changeBudget, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.changeBudget \u003d changeBudget;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Constructs a {@code CommandResult} with specified fields."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Given by AB4"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CommandResult(String feedbacktoUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbacktoUser);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean changeCategoryBudget) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.changeBudget \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public String getThemeToChange() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return themeToChange;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean isSwitchTheme() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return changeTheme;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean isChangeBudget() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return changeBudget;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean isChangeCategoryBudget() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return changeCategoryBudget;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void changeCategoryBudget() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.changeCategoryBudget \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 10,
      "Jackimaru96": 57,
      "-": 62,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Deletes a record identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"del\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \": Deletes the record identified by the index number used in the displayed record list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_DELETE_RECORD_SUCCESS \u003d \"Deleted record: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 2,
      "-": 39,
      "eugeneyl": 6,
      "kjiaxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/DescriptionCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Changes the description of an existing expense entry in finance log."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class DescriptionCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"descr\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            + \": Edits the description of record identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            + \"by the index number used in the last record listing. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            + \"Existing remarks will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + PREFIX_DESCRIPTION + \"[DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Father\u0027s birthday present.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_ADD_DESCRIPTION_SUCCESS \u003d \"Added description to Record: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_REMOVE_DESCRIPTION_SUCCESS \u003d \"Removed description from Record: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @param index Index of the record in the filtered records list to edit description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @param description description of the record to be updated to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public DescriptionCommand(Index index, Description description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireAllNonNull(index, description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Record editedRecord \u003d new Record(recordToEdit.getName(), recordToEdit.getAmount(), recordToEdit.getDate(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                this.description, recordToEdit.getCategory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.setRecord(recordToEdit, editedRecord);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return new CommandResult(makeSuccessMessage(editedRecord));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Makes a command execution success message based on whether the description is added to or removed from"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@recordToEdit}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param recordToEdit"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private String makeSuccessMessage(Record recordToEdit) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String message \u003d !description.value.isEmpty() ? MESSAGE_ADD_DESCRIPTION_SUCCESS"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                : MESSAGE_REMOVE_DESCRIPTION_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return String.format(message, recordToEdit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!(other instanceof DescriptionCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        DescriptionCommand e \u003d (DescriptionCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 description.equals(e.description);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 1,
      "Jackimaru96": 64,
      "eugeneyl": 12,
      "kjiaxuan": 19
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Edits the details of an existing record in the finance tracker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the record identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"by the index number used in the displayed record list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_AMOUNT + \"1234 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_DATE + \"12/02/2009\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_EDIT_RECORD_SUCCESS \u003d \"Edited Record: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final EditRecordDescriptor editRecordDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param index of the record in the filtered record list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param editRecordDescriptor details to edit the record with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditCommand(Index index, EditRecordDescriptor editRecordDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(editRecordDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.editRecordDescriptor \u003d new EditRecordDescriptor(editRecordDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d createEditedRecord(recordToEdit, editRecordDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.setRecord(recordToEdit, editedRecord);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECORD_SUCCESS, editedRecord),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Creates and returns a {@code Record} with the details of {@code RecordToEdit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * edited with {@code editRecordDescriptor}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private static Record createEditedRecord(Record recordToEdit, EditRecordDescriptor editRecordDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assert recordToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Name updatedName \u003d editRecordDescriptor.getName().orElse(recordToEdit.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Amount updatedAmount \u003d editRecordDescriptor.getAmount().orElse(recordToEdit.getAmount());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Date updatedDate \u003d editRecordDescriptor.getDate().orElse(recordToEdit.getDate());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Description updatedDescription \u003d recordToEdit.getDescription();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category updatedCategory \u003d editRecordDescriptor.getCategory().orElse(recordToEdit.getCategory());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new Record(updatedName, updatedAmount, updatedDate, updatedDescription, updatedCategory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 editRecordDescriptor.equals(e.editRecordDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Stores the details to edit the record with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * corresponding field value of the record."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static class EditRecordDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public EditRecordDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public EditRecordDescriptor(EditRecordDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, amount, date, category);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "         * Sets {@code categories} to this object\u0027s {@code categories}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            this.category \u003d (category !\u003d null) ? category : null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code categories} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return (category !\u003d null) ? Optional.of(category) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            if (!(other instanceof EditRecordDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            EditRecordDescriptor e \u003d (EditRecordDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 6,
      "JeremyLoye": 29,
      "Jackimaru96": 10,
      "-": 113,
      "eugeneyl": 31,
      "kjiaxuan": 21
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"quit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Finance Tracker as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 1,
      "-": 15,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, true, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 1,
      "-": 18,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"hist\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e previousCommands \u003d new ArrayList\u003c\u003e(history.getHistory());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/IncreaseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Increases the budget limit for the month or week by specified amount"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class IncreaseCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"increase\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Increases the budget for week/month \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"by the amount specified.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Existing budget will be changed accordingly.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Parameters: \" + PREFIX_AMOUNT + \"AMOUNT (must be positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + PREFIX_AMOUNT + \"100.50\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Amount: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param amount of money to increase budget by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public IncreaseCommand(Amount amount) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireAllNonNull(amount);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, amount));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Same object; return true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // instaceof handles null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!(other instanceof IncreaseCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        IncreaseCommand e \u003d (IncreaseCommand) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return amount.equals(e.amount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 52,
      "kjiaxuan": 7
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Lists all records in the finance tracker to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"ls\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all records\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "eugeneyl": 1,
      "kjiaxuan": 8
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Reverts the {@code model}\u0027s finance tracker to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (!model.canRedoFinanceTracker()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.redoFinanceTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "eugeneyl": 1,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/ReverseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Reverses the records in the finance tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class ReverseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reverse\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rev\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Order of the list is reversed\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.reverseFilteredRecordList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kjiaxuan": 30
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.record.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.record.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Finds and lists all records in finance tracker whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"find\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all records which contain any of \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"the specified keywords (case-insensitive) based on the selected flag\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"Parameters: FLAG KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"Flags: -name search for names, -cat search based on categories, -date search based on dates\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -name\" + \" fries chicken bus fare\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String INVALID_FLAG \u003d \"CommandFlag not recognised. Valid flags:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"-name: Find all records that contains specified keywords in name\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"-cat: Find all records that has specified keywords in category.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"-date: Find all records of a specific date.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" -name\" + \" fries chicken bus fare\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final Predicate\u003cRecord\u003e predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public SearchCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public SearchCommand(CategoryContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public SearchCommand(DateContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        ObservableList\u003cRecord\u003e filteredRecord \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Double totalSpent \u003d Double.valueOf(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Iterator\u003cRecord\u003e recordIterator \u003d filteredRecord.iterator();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        while (recordIterator.hasNext()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            totalSpent +\u003d recordIterator.next().getAmount().getValue();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String outputMessage \u003d Messages.MESSAGE_RECORDS_LISTED_OVERVIEW + \"\\nTotal spent on searched records \u003d $ \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                + totalSpent;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                String.format(outputMessage, model.getFilteredRecordList().size()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "eugeneyl": 46,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Selects a record identified using its displayed index from the finance tracker."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"sel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \": Selects the record identified by the index number used in the displayed record list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_SELECT_RECORD_SUCCESS \u003d \"Selected Record: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e filteredRecordList \u003d model.getFilteredRecordList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredRecordList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.setSelectedRecord(filteredRecordList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_RECORD_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "eugeneyl": 5,
      "kjiaxuan": 12
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/SetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " * Sets a budget in the finance tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the budget for finance tracker. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_AMOUNT + \"$500.50\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Budget Set: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BUDGET \u003d \"A budget has already been set.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Creates a SetCommand to set the specificed {@code Amount} as budget"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public SetCommand(String amount) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (model.hasBudget()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BUDGET);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Budget budget \u003d new Budget(Double.parseDouble(amount));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        model.addBudget(budget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, amount), true, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // instaceof handles null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!(other instanceof SetCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        SetCommand e \u003d (SetCommand) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return amount.equals(e.amount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 66
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/SetFileCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.storage.StorageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Sets a file path to store data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class SetFileCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setfile\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets the file path to store data. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_FILE + \"FILENAME (Without file extension or folder path) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_FILE + \"finance\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File Set: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFinanceTrackerStorage.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Creates a SetCommand to set the specificed {@code Amount} as budget"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public SetFileCommand(Path path) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        JsonFinanceTrackerStorage newStorage \u003d new JsonFinanceTrackerStorage(path);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Optional\u003cReadOnlyFinanceTracker\u003e financeTrackerOptional;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        ReadOnlyFinanceTracker initialData;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            financeTrackerOptional \u003d newStorage.readFinanceTracker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            if (!financeTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                logger.info(\"Data file not found. Will load a sample FinanceTracker\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            initialData \u003d financeTrackerOptional.orElseGet(SampleDataUtil::getSampleFinanceTracker);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty FinanceTracker\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            initialData \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        model.setFinanceTrackerFilePath(path);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        model.setFinanceTracker(initialData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        StorageManager.setFinanceTrackerStorage(newStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, path), true, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!(other instanceof SetFileCommand)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        SetFileCommand e \u003d (SetFileCommand) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return path.equals(e.path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 76,
      "Jackimaru96": 12
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Sorts the records in the finance tracker"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the records in the list \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            + \"either by name, amount, date or category.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            + \"Parameters: FLAG \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            + \"Possible flags: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + COMMAND_FLAG_NAME + \", \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + COMMAND_FLAG_AMOUNT + \", \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + COMMAND_FLAG_DATE + \", \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + COMMAND_FLAG_CATEGORY + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + COMMAND_FLAG_NAME;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List is sorted.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_NOT_SORTED \u003d \"Only one flag should be provided.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final Comparator\u003cRecord\u003e comparator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Creates a SortCommand to sort the list according to the comparator supplied."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public SortCommand(Comparator\u003cRecord\u003e comparator) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.sortFilteredRecordList(comparator);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.updateFilteredRecordList(Model.PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Comparator\u003cRecord\u003e getComparator() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return comparator;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 comparator.equals(((SortCommand) other).getComparator()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 9,
      "kjiaxuan": 60
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/SpendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Adds a record to the finance tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SpendCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"spend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a record to the finance tracker. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Note that each record should only have one category.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"If date is not inputted, local date will be used.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + PREFIX_AMOUNT + \"123.23 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            + PREFIX_DATE + \"12/02/2002 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Lunch with friends \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EXCEED_BUDGET \u003d \"Your spending in %s \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"category has exceeded the allocated budget!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final Record toSpend;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Record}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public SpendCommand(Record record) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        toSpend \u003d record;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        boolean withinBudget \u003d model.addRecord(toSpend);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!withinBudget) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return new CommandResult (String.format(MESSAGE_SUCCESS_EXCEED_BUDGET, toSpend.getCategory()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    true, false, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toSpend), true, false, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                || (other instanceof SpendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 toSpend.equals(((SpendCommand) other).toSpend));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 4,
      "Jackimaru96": 10,
      "-": 30,
      "eugeneyl": 21,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/SummaryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * Gives user the summary of all expenses in a graph format"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    // KIV may have to edit accordingly once Budget class is implemented"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //May also need to edit accordingly if want to be able to set summary according to a specific duration"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the summary of all your expenses\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Summary command not implemented yet\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 24
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/ThemeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Changes the theme of the application"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class ThemeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"theme\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"colour\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \": Changes the theme of the Finance Tracker \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"according to the input given by user.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Parameters: THEME (must be Light, Dark, Blue or Pink; case-insensitive)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Dark\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String MESSAGE_THEME_SUCCESS \u003d \"Successfully changed to %1$s theme\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private String theme;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public ThemeCommand(String theme) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.theme \u003d formatTheme(theme);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!isValidTheme(this.theme)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_THEME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_THEME_SUCCESS, theme), false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                true, this.theme);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * This methods formats the input String so that user input can be case-insensitive"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param theme the theme to change to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @return the theme to change to with first character being in upper-case and rest in lower-case"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private String formatTheme(String theme) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        theme \u003d (theme.trim()).toLowerCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return theme.substring(0, 1).toUpperCase() + theme.substring(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Method to check if user input is the correct theme"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param theme the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @return true if the theme is in the library"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private boolean isValidTheme(String theme) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return theme.equals(\"Dark\") || theme.equals(\"Light\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                || theme.equals(\"Blue\") || theme.equals(\"Pink\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!(other instanceof ThemeCommand)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        ThemeCommand e \u003d (ThemeCommand) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return e.theme \u003d\u003d this.theme;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 72
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Reverts the {@code model}\u0027s finance tracker to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (!model.canUndoFinanceTracker()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.undoFinanceTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "eugeneyl": 1,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/AllocateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.AllocateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Parses input arguments and creates a new {@code AllocateCommand} object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class AllocateCommandParser implements Parser\u003cAllocateCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AllocateCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * and returns a {@code AllocateCommand} object for execution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public AllocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new AllocateCommand(new CategoryBudget(category.categoryName, amount.getValue()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 48
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.commands.CommandFlag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /* CommandFlag definitions */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final CommandFlag COMMAND_FLAG_NAME \u003d new CommandFlag(\"-name\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final CommandFlag COMMAND_FLAG_CATEGORY \u003d new CommandFlag(\"-cat\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final CommandFlag COMMAND_FLAG_AMOUNT \u003d new CommandFlag(\"-amount\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final CommandFlag COMMAND_FLAG_DATE \u003d new CommandFlag(\"-date\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 1,
      "JeremyLoye": 2,
      "Jackimaru96": 1,
      "-": 9,
      "eugeneyl": 7,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/DescriptionCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DescriptionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Parse input arguments and creates a new {@code DescriptionCommand} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class DescriptionCommandParser implements Parser\u003cDescriptionCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of {@code DescriptionCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * and returns a {@code DescriptionCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param args User String input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @return {@code DescriptionCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @throws ParseException if user input does not follow expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public DescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    DescriptionCommand.MESSAGE_USAGE, ive));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new DescriptionCommand(index, new Description(description));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 32,
      "kjiaxuan": 8
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand.EditRecordDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditRecordDescriptor editRecordDescriptor \u003d new EditRecordDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            editRecordDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            editRecordDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            editRecordDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            editRecordDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (!editRecordDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return new EditCommand(index, editRecordDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assert categories !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Collection\u003cString\u003e categorySet \u003d categories.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                \u0026\u0026 categories.contains(\"\") ? Collections.emptySet() : categories;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categorySet));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 10,
      "JeremyLoye": 4,
      "Jackimaru96": 3,
      "-": 47,
      "eugeneyl": 6,
      "kjiaxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/FinanceTrackerParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.AllocateCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DescriptionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.IncreaseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ReverseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.SetFileCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SpendCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class FinanceTrackerParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        case SetFileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return new SetFileCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case ThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case ThemeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return new ThemeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case AllocateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case AllocateCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return new AllocateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case IncreaseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return new IncreaseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case DescriptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case DescriptionCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return new DescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        case SpendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        case SpendCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return new SpendCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        case SearchCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case ListCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case ReverseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case ReverseCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return new ReverseCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case SummaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            //Have to add in alias for summary command"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            //case SummaryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return new SummaryCommand();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 6,
      "JeremyLoye": 6,
      "Jackimaru96": 20,
      "-": 68,
      "eugeneyl": 6,
      "kjiaxuan": 47
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/IncreaseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.IncreaseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Parses input arguments and creates a new {@code IncreaseCommand} object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class IncreaseCommandParser implements Parser\u003cIncreaseCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Parses given {@code String} of arguments in context of the {@code IncreaseCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * and returns a {@code IncreaseCommand} object for execution"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @throws ParseException if the user input does not conform to expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public IncreaseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Amount amount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        } catch (IllegalValueException | NoSuchElementException ive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    IncreaseCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new IncreaseCommand(amount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 32,
      "kjiaxuan": 7
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static Path parseFile(String filename) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(filename);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String trimmedFilename \u003d filename.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (trimmedFilename.indexOf(\u0027/\u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new ParseException(\"Filename should not contain \u0027\\\\\u0027 character.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return Paths.get(trimmedFilename);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        if (!Category.isValidCategoryName(trimmedCategory)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 15,
      "JeremyLoye": 44,
      "-": 58,
      "kjiaxuan": 8
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.record.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.record.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * and returns an SearchCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String[] argsWithFlag \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String[] nameKeywords \u003d Arrays.copyOfRange(argsWithFlag, 1, argsWithFlag.length);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        switch (argsWithFlag[0]) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        case \"-name\" :"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return new SearchCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        case \"-cat\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return new SearchCommand(new CategoryContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        case \"-date\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return new SearchCommand(new DateContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.INVALID_FLAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "eugeneyl": 19,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/SetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " * Parses input arguments and creates a new SetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * and returns an SetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public SetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()).toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new SetCommand(amount);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 43
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/SetFileCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.SetFileCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Parse given string of argumentsin context of SetFileCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class SetFileCommandParser implements Parser\u003cSetFileCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetFileCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * and returns an SetFileCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public SetFileCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FILE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetFileCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Path path \u003d ParserUtil.parseFile(\"data\\\\\\\\\" + argMultimap.getValue(PREFIX_FILE).get() + \".json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new SetFileCommand(path);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 37,
      "Jackimaru96": 7
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordAmountComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordCategoryComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordDateComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordNameComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        int numFlags \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Comparator\u003cRecord\u003e comparator \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String[] words \u003d args.split(\"\\\\s\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(words);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (list.contains(COMMAND_FLAG_NAME.getFlag())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            comparator \u003d new RecordNameComparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            numFlags++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (list.contains(COMMAND_FLAG_AMOUNT.getFlag())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            comparator \u003d new RecordAmountComparator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            numFlags++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (list.contains(COMMAND_FLAG_DATE.getFlag())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            comparator \u003d new RecordDateComparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            numFlags++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (list.contains(COMMAND_FLAG_CATEGORY.getFlag())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            comparator \u003d new RecordCategoryComparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            numFlags++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (comparator \u003d\u003d null) { // no flags provided"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            throw new ParseException(SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        } else if (numFlags \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            throw new ParseException(SortCommand.MESSAGE_NOT_SORTED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return new SortCommand(comparator);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 12,
      "kjiaxuan": 54
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/SpendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SpendCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SpendCommandParser implements Parser\u003cSpendCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public SpendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_AMOUNT, PREFIX_DATE, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                        PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SpendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            date \u003d new Date(LocalDate.now());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Description description \u003d new Description(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            description \u003d new Description(argMultimap.getValue(PREFIX_DESCRIPTION).get().trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Record record \u003d new Record(name, amount, date, description, category);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return new SpendCommand(record);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 1,
      "Jackimaru96": 2,
      "-": 33,
      "eugeneyl": 21,
      "kjiaxuan": 13
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/ThemeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "//@author Jackimaru96"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Parses input argument and creates a new ThemeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ThemeCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * and returns a ThemeCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public ThemeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    ThemeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new ThemeCommand(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 31
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/comparator/RecordAmountComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.logic.parser.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A comparison function to sort the records by amount in descending order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class RecordAmountComparator implements Comparator\u003cRecord\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public int compare(Record r1, Record r2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        float diff \u003d Float.parseFloat(r2.getAmount().toString()) - Float.parseFloat(r1.getAmount().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (diff \u003c 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        } else if (diff \u003e 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 1,
      "kjiaxuan": 25
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/comparator/RecordCategoryComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.logic.parser.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A comparison function to sort the records by category in lexicographical order (case insensitive)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class RecordCategoryComparator implements Comparator\u003cRecord\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public int compare(Record r1, Record r2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return r1.getCategory().toString().compareToIgnoreCase(r2.getCategory().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * A comparison function to sort the categories in lexicographical order (case insensitive)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static class CategoryComparator implements Comparator\u003cCategory\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public int compare(Category c1, Category c2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return c1.categoryName.compareToIgnoreCase(c2.categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "eugeneyl": 1,
      "kjiaxuan": 29
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/comparator/RecordDateComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.logic.parser.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A comparison function to sort the records by date with the latest first."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class RecordDateComparator implements Comparator\u003cRecord\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public int compare(Record r1, Record r2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return r2.getDate().getDate().compareTo(r1.getDate().getDate());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 1,
      "kjiaxuan": 19
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/comparator/RecordNameComparator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.logic.parser.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A comparison function to sort the records by name in lexicographical order (case insensitive)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class RecordNameComparator implements Comparator\u003cRecord\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public int compare(Record r1, Record r2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return r1.getName().toString().compareToIgnoreCase(r2.getName().toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 1,
      "kjiaxuan": 19
    }
  },
  {
    "path": "src/main/java/seedu/finance/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/FinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.TotalBudget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.exceptions.CategoryBudgetExceedTotalBudgetException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.UniqueRecordList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Wraps all data at the finance-tracker level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class FinanceTracker implements ReadOnlyFinanceTracker {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final UniqueRecordList records;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final TotalBudget budget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        records \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budget \u003d new TotalBudget();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTracker() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Creates an FinanceTracker using the Records in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTracker(ReadOnlyFinanceTracker toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Replaces the contents of the record list with {@code records}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code records} can contain duplicate records."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this.records.setRecords(records);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        budget.updateBudget(this.records.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Resets the existing data of this {@code FinanceTracker} with {@code newData}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void resetData(ReadOnlyFinanceTracker newData) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        setRecords(newData.getRecordList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        addBudget(newData.getBudget());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    //// record-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the finance tracker."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return records.contains(record);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Adds a record to the finance tracker."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean addRecord(Record r) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        records.add(r);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        boolean budgetNotExceeded \u003d budget.addRecord(r);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        budget.updateBudget(this.records.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        logger.info(\"Current Budget: \" + budget.getCurrentBudget());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return budgetNotExceeded;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Replaces the given record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code target} must exist in the finance tracker."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(editedRecord);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        records.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        budget.updateBudget(this.records.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Removes {@code key} from this {@code FinanceTracker}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code key} must exist in the finance tracker."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void removeRecord(Record key) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        records.remove(key);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budget.removeRecord(key);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        budget.updateBudget(this.records.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /// budget-level operations"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns true if a {@code budget} exists in the finance tracker."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean hasBudget() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return this.budget.isSet();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Adds a budget to the finance tracker."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * The budget must not already exist in the finance tracker."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.budget.set(budget.getTotalBudget(), budget.getCurrentBudget());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Category Budget \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    //@author Jackimaru96"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void addCategoryBudget(CategoryBudget catBudget) throws CategoryBudgetExceedTotalBudgetException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budget.setNewCategoryBudget(catBudget);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Notifies listeners that the finance tracker has been modified."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    //// comparator methods"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return records.asUnmodifiableObservableList().size() + \" records\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return records.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void reverseRecordList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        records.reverseList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void sortRecordList(Comparator\u003cRecord\u003e comparator) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        records.sortList(comparator);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                || (other instanceof FinanceTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                \u0026\u0026 records.equals(((FinanceTracker) other).records)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                \u0026\u0026 budget.equals(((FinanceTracker) other).budget));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return Objects.hash(records, budget);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 32,
      "Jackimaru96": 19,
      "-": 96,
      "eugeneyl": 18,
      "kjiaxuan": 32
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.exceptions.CategoryBudgetExceedTotalBudgetException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORD \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Sets the user prefs\u0027 finance tracker file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void setFinanceTrackerFilePath(Path financeTrackerFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Replaces finance tracker data with the data in {@code financeTracker}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void setFinanceTracker(ReadOnlyFinanceTracker financeTracker);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /** Returns the FinanceTracker */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    ReadOnlyFinanceTracker getFinanceTracker();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns true if a record with the same identity as {@code record} exists in the finance tracker."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    boolean hasRecord(Record record);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Deletes the given record."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * The record must exist in the finance tracker."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    void deleteRecord(Record target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Adds the given record."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    boolean addRecord(Record record);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Replaces the given record {@code target} with {@code editedRecord}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    void setRecord(Record target, Record editedRecord);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns true if a {@code budget} exists in the finance tracker."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    boolean hasBudget();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Sets the given amount to budget."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * {@code budget} must not already exist in the finance tracker."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    void addBudget(Budget budget);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Sets the given amount to the category budget"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void addCategoryBudget(CategoryBudget budget) throws CategoryBudgetExceedTotalBudgetException;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns an unmodifiable view of the filtered record list in reverse order."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void reverseFilteredRecordList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Sorts the filtered record list according to comparison function in {@code comparator}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void sortFilteredRecordList(Comparator\u003cRecord\u003e comparator);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /** Returns the amount value of {@code budget} in a ObjectProperty wrapper */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered record list */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    ObservableList\u003cRecord\u003e getFilteredRecordList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Updates the filter of the filtered record list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns true if the model has previous finance tracker states to restore."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    boolean canUndoFinanceTracker();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns true if the model has undone finance tracker states to restore."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    boolean canRedoFinanceTracker();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Restores the model\u0027s finance tracker to its previous state."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void undoFinanceTracker();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Restores the model\u0027s finance tracker to its previously undone state."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void redoFinanceTracker();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Saves the current finance tracker state for undo/redo."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void commitFinanceTracker();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Selected record in the filtered record list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * null if no record is selected."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    ReadOnlyProperty\u003cRecord\u003e selectedRecordProperty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the selected record in the filtered record list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * null if no record is selected."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    Record getSelectedRecord();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Sets the selected record in the filtered record list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    void setSelectedRecord(Record record);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 15,
      "Jackimaru96": 10,
      "-": 84,
      "eugeneyl": 19,
      "kjiaxuan": 34
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.exceptions.CategoryBudgetExceedTotalBudgetException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents the in-memory model of the finance tracker data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final VersionedFinanceTracker versionedFinanceTracker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final FilteredList\u003cRecord\u003e filteredRecords;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final SimpleObjectProperty\u003cRecord\u003e selectedRecord \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Initializes a ModelManager with the given financeTracker and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public ModelManager(ReadOnlyFinanceTracker financeTracker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireAllNonNull(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        logger.fine(\"Initializing with finance tracker: \" + financeTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker \u003d new VersionedFinanceTracker(financeTracker);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        filteredRecords \u003d new FilteredList\u003c\u003e(versionedFinanceTracker.getRecordList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        filteredRecords.addListener(this::ensureSelectedRecordIsValid);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this(new FinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return userPrefs.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(financeTrackerFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(financeTrackerFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setFinanceTracker(ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.resetData(financeTracker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return versionedFinanceTracker;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(record);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return versionedFinanceTracker.hasRecord(record);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.removeRecord(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean addRecord(Record record) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        boolean budgetNotExceeded \u003d versionedFinanceTracker.addRecord(record);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return budgetNotExceeded;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.setRecord(target, editedRecord);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean hasBudget() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return versionedFinanceTracker.hasBudget();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        versionedFinanceTracker.addBudget(budget);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Category Budget \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    //@author Jackimaru96"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void addCategoryBudget(CategoryBudget budget) throws CategoryBudgetExceedTotalBudgetException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.versionedFinanceTracker.addCategoryBudget(budget);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void reverseFilteredRecordList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.reverseRecordList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void sortFilteredRecordList(Comparator\u003cRecord\u003e comparator) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.sortRecordList(comparator);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns the amount value of {@code budget} in an ObjectProperty wrapper"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return versionedFinanceTracker.getBudget();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Record} backed by the internal list of"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code versionedFinanceTracker}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return filteredRecords;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        filteredRecords.setPredicate(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean canUndoFinanceTracker() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return versionedFinanceTracker.canUndo();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public boolean canRedoFinanceTracker() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return versionedFinanceTracker.canRedo();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void undoFinanceTracker() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void redoFinanceTracker() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void commitFinanceTracker() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected record \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public ReadOnlyProperty\u003cRecord\u003e selectedRecordProperty() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return selectedRecord;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public Record getSelectedRecord() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return selectedRecord.getValue();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setSelectedRecord(Record record) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (record !\u003d null \u0026\u0026 !filteredRecords.contains(record)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectedRecord.setValue(record);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Ensures {@code selectedRecord} is a valid record in {@code filteredRecords}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param change"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void ensureSelectedRecordIsValid(ListChangeListener.Change\u003c? extends Record\u003e change) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            if (selectedRecord.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                // null is always a valid selected record, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            boolean wasSelectedRecordReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedRecord.getValue());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            if (wasSelectedRecordReplaced) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                // Update selectedRecord to its new value."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedRecord.getValue());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                selectedRecord.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            boolean wasSelectedRecordRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                    .anyMatch(removedRecord -\u003e selectedRecord.getValue().isSameRecord(removedRecord));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            if (wasSelectedRecordRemoved) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                // Select the record that came before it in the list,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                // or clear the selection if there is no such record."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                selectedRecord.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return versionedFinanceTracker.equals(other.versionedFinanceTracker)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 filteredRecords.equals(other.filteredRecords)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedRecord.get(), other.selectedRecord.get());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 21,
      "Jackimaru96": 11,
      "-": 151,
      "eugeneyl": 36,
      "kjiaxuan": 60
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/ReadOnlyFinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Unmodifiable view of an finance tracker"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public interface ReadOnlyFinanceTracker extends Observable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns an unmodifiable view of the records list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * This list will not contain any duplicate records."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    ObservableList\u003cRecord\u003e getRecordList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 3,
      "-": 11,
      "eugeneyl": 1,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private Path financeTrackerFilePath \u003d Paths.get(\"data\" , \"finance.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        setFinanceTrackerFilePath(newUserPrefs.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return financeTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(financeTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this.financeTrackerFilePath \u003d financeTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 financeTrackerFilePath.equals(o.financeTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return Objects.hash(guiSettings, financeTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + financeTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 1,
      "-": 75,
      "kjiaxuan": 11
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/VersionedFinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * {@code FinanceTracker} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class VersionedFinanceTracker extends FinanceTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final List\u003cReadOnlyFinanceTracker\u003e financeTrackerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public VersionedFinanceTracker(ReadOnlyFinanceTracker initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTrackerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTrackerStateList.add(new FinanceTracker(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Saves a copy of the current {@code FinanceTracker} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTrackerStateList.add(new FinanceTracker(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTrackerStateList.subList(currentStatePointer + 1, financeTrackerStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Restores the finance tracker to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        resetData(financeTrackerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Restores the finance tracker to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        resetData(financeTrackerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns true if {@code undo()} has finance tracker states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns true if {@code redo()} has finance tracker states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return currentStatePointer \u003c financeTrackerStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (!(other instanceof VersionedFinanceTracker)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker otherVersionedFinanceTracker \u003d (VersionedFinanceTracker) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return super.equals(otherVersionedFinanceTracker)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 financeTrackerStateList.equals(otherVersionedFinanceTracker.financeTrackerStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedFinanceTracker.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            super(\"Current state pointer at start of financeTrackerState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            super(\"Current state pointer at end of financeTrackerState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "kjiaxuan": 24
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/budget/Budget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "package seedu.finance.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " * Represents the Budget for the particular instance of the Finance Tracker"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    protected double totalBudget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    protected double currentBudget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    protected double currentSpendings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Constructs a {@code Budget} with no initial value."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        totalBudget \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        currentBudget \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentSpendings \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Budget(double initialBudget) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.totalBudget \u003d initialBudget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.currentBudget \u003d initialBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Budget(double totalBudget, double currentBudget) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.currentBudget \u003d currentBudget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings \u003d totalBudget - currentBudget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public Budget(Budget budget) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.totalBudget \u003d budget.getTotalBudget();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentBudget \u003d budget.getCurrentBudget();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings \u003d budget.getCurrentSpendings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Called to set the budget Amount value wrapped in a ObjectProperty."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @param totalBudget"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @param currentBudget"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void set(double totalBudget, double currentBudget) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.currentBudget \u003d currentBudget;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings \u003d totalBudget - currentBudget;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Method to update budget"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param records the records in Finance Tracker"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void updateBudget(ObservableList\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (totalBudget \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        currentBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentSpendings \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        records.forEach(record -\u003e currentBudget -\u003d Double.parseDouble(record.getAmount().toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        records.forEach(record -\u003e currentSpendings +\u003d Double.parseDouble(record.getAmount().toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (currentBudget \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            currentBudget \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Method to add spendings of record"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param record the record to be added"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @return true if currentSpendings is within totalBudget"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean addRecord(Record record) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Double spending \u003d record.getAmount().getValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings +\u003d spending;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentBudget -\u003d spending;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return this.currentSpendings \u003c\u003d totalBudget;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Method to remove spendings of record"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param record the record to be removed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void removeRecord(Record record) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Double spending \u003d record.getAmount().getValue();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings -\u003d spending;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentBudget +\u003d spending;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean isSet() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return !(totalBudget \u003d\u003d 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public double getTotalBudget() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return totalBudget;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public double getCurrentBudget() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return currentBudget;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public double getCurrentSpendings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return currentSpendings;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Method to reset spendings to 0"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void clearSpendings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings \u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return currentBudget + \"/\" + totalBudget;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean equals(Object budget) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Budget otherBudget \u003d (Budget) budget;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return this.totalBudget \u003d\u003d otherBudget.totalBudget;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 69,
      "Jackimaru96": 60
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/budget/CategoryBudget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Represents the budget for a category in the finance tracker"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * The budget here never exceeds the budget of the finance tracker"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class CategoryBudget extends Budget {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Category categoryOfBudget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CategoryBudget (String category, Double budget) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super(budget);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        checkArgument(Category.isValidCategoryName(category), Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        categoryOfBudget \u003d new Category(category);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CategoryBudget (String category, Double budget, Double currentBudget) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super(budget, currentBudget);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        checkArgument(Category.isValidCategoryName(category), Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.categoryOfBudget \u003d new Category(category);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CategoryBudget (CategoryBudget catBudget) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super(catBudget);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean equals(Object catBudget) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        CategoryBudget otherCatBudget \u003d (CategoryBudget) catBudget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return categoryOfBudget.equals(otherCatBudget.getCategory());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return categoryOfBudget + \":\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + \"Total Budget: \" + getTotalBudget() + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + \"Current Budget: \" + getCurrentBudget();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return categoryOfBudget.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return this.categoryOfBudget;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 53
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/budget/TotalBudget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "//@@author Jackimaru96"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.exceptions.CategoryBudgetExceedTotalBudgetException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Represents the TotalBudget of the FinanceTracker"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class TotalBudget extends Budget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private HashSet\u003cCategoryBudget\u003e categoryBudgets;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public TotalBudget() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.categoryBudgets \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public TotalBudget(Double budget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super(budget);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.categoryBudgets \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public HashSet\u003cCategoryBudget\u003e getCategoryBudgets() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return categoryBudgets;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Category Budgets \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Attempts to add a new category budget."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Total sum of all category budgets should not exceed totalBudget cap"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param budget a CategoryBudget to be added to the list of CategoryBudgets"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @throws CategoryBudgetExceedTotalBudgetException if adding the categoryBudget will cause"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *         total sum of CategoryBudgets to exceed the total budget of Finance Tracker"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void setNewCategoryBudget(CategoryBudget budget) throws CategoryBudgetExceedTotalBudgetException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        double sumOfCategoryBudgets \u003d this.categoryBudgets.stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .mapToDouble(categoryBudget -\u003e categoryBudget.getTotalBudget()).sum();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Double newTotalCategoryBudget \u003d sumOfCategoryBudgets + budget.getTotalBudget();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (newTotalCategoryBudget \u003e this.getTotalBudget()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new CategoryBudgetExceedTotalBudgetException(budget, this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        CategoryBudget catBudgetToAdd \u003d budget;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (categoryBudgets.contains(budget)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            CategoryBudget cBudget;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            Iterator\u003cCategoryBudget\u003e it \u003d categoryBudgets.iterator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                cBudget \u003d it.next();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                if (cBudget.equals(budget)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    catBudgetToAdd.currentSpendings \u003d cBudget.currentSpendings;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    catBudgetToAdd.currentBudget \u003d catBudgetToAdd.totalBudget - catBudgetToAdd.currentSpendings;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            categoryBudgets.remove(budget);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            categoryBudgets.add(catBudgetToAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        categoryBudgets.add(budget);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean addRecord(Record r) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Double spending \u003d r.getAmount().getValue();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpendings +\u003d spending;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentBudget -\u003d spending;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        AtomicInteger catBudgetNotExceeded \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        categoryBudgets.forEach(catBudget -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            if (catBudget.getCategory().equals(r.getCategory())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                if (!catBudget.addRecord(r)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    catBudgetNotExceeded.getAndIncrement();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return this.currentSpendings \u003c\u003d this.totalBudget \u0026\u0026 catBudgetNotExceeded.get() \u003c 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void removeRecord(Record r) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super.removeRecord(r);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category c \u003d r.getCategory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        CategoryBudget deleteThis \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        List\u003cCategoryBudget\u003e catBudget \u003d this.categoryBudgets.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        for (int i \u003d 0; i \u003c catBudget.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            if (catBudget.get(i).getCategory().equals(c)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                deleteThis \u003d catBudget.get(i);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (deleteThis !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            deleteThis.removeRecord(r);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 104
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/category/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * Represents a category in the finance tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategoryName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Category names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * @param categoryName A valid category name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        checkArgument(isValidCategoryName(categoryName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.categoryName \u003d formatCategory(categoryName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * This methods formats the input String so that user input can be case-insensitive"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param categoryName the theme to change to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @return the theme to change to with first character being in upper-case and rest in lower-case"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private String formatCategory(String categoryName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        categoryName \u003d (categoryName.trim()).toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return categoryName.substring(0, 1).toUpperCase() + categoryName.substring(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static boolean isValidCategoryName(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!(other instanceof Category)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category e \u003d (Category) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return this.categoryName.equals(((Category) other).categoryName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 47,
      "Jackimaru96": 22,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/exceptions/CategoryBudgetExceedTotalBudgetException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "//@@author Jackimaru96"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Exception when category budget exceeds the totalBudget of finance tracker"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class CategoryBudgetExceedTotalBudgetException extends Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CategoryBudgetExceedTotalBudgetException(CategoryBudget categoryBudget, Budget totalBudget) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super(String.format(\"The category budget (%.2f) will exceed the total budget of Finance Tracker (%.2f)\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                categoryBudget.getTotalBudget(), totalBudget.getTotalBudget()));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public CategoryBudgetExceedTotalBudgetException(CategoryBudget categoryBudget) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super(String.format(\"The category budget (%.2f) will exceed total budget of Finance Tracker\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 20
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/Amount.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents an Entry\u0027s amount in the finance tracker."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amount is a positive number, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            + \"with either 2 decimal place or none.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(([1-9]\\\\d{0,2}(,\\\\d{3})*)|(([1-9]\\\\d*)?\\\\d))(\\\\.\\\\d\\\\d)?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Constructs an {@code Amount}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @param amount A valid amount."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns if a given string is a valid amount."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public Double getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                || (other instanceof seedu.finance.model.record.Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 value.equals(((seedu.finance.model.record.Amount) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return Double.valueOf(value).hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 45,
      "Jackimaru96": 4,
      "eugeneyl": 3,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/CategoryContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Tests that a {@code Record}\u0027s {@code Category} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class CategoryContainsKeywordsPredicate implements Predicate\u003cRecord\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public CategoryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean test(Record record) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category category \u003d record.getCategory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(category.toString(), keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                || (other instanceof CategoryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 keywords.equals(((CategoryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 3,
      "eugeneyl": 31
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents a Record\u0027s date in the finance tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be of the format dd/mm/yyyy and be a valid date\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String[] parsedDate \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        int year \u003d Integer.parseInt(parsedDate[2]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        int month \u003d Integer.parseInt(parsedDate[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        int day \u003d Integer.parseInt(parsedDate[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this.setDate(year, month, day);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Constructs a (@code Date)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param date A local date object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public Date(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String[] parsedDate \u003d test.split(\"/\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            int year \u003d Integer.parseInt(parsedDate[2]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            int month \u003d Integer.parseInt(parsedDate[1]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            int day \u003d Integer.parseInt(parsedDate[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            LocalDate date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setDate(int year, int month, int day) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        date \u003d LocalDate.of(year, month, day);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return date.format(formatter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 39,
      "eugeneyl": 10,
      "kjiaxuan": 40
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/DateContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Tests that a {@code Record}\u0027s {@code Category} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class DateContainsKeywordsPredicate implements Predicate\u003cRecord\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final List\u003cString\u003e listOfDates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public DateContainsKeywordsPredicate(List\u003cString\u003e listOfDates) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.listOfDates \u003d listOfDates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean test(Record record) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return listOfDates.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .anyMatch(date -\u003e StringUtil.containsWordIgnoreCase(record.getDate().toString(), date));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                || (other instanceof DateContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 listOfDates.equals(((DateContainsKeywordsPredicate) other).listOfDates)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 34
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents a record\u0027s description in finance tracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.value \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return other \u003d\u003d this || (other instanceof Description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 30,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents a record\u0027s name in the finance tracker."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * The first character of the record must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Tests that a {@code Record}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cRecord\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean test(Record record) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(record.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "eugeneyl": 4,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/Record.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents a Record in the finance tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class Record {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Record(Name name, Amount amount, Date date,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                  Description description, Category category) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        requireAllNonNull(name, amount, date, category);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns true if both records of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * This defines a weaker notion of equality between two records."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean isSameRecord(Record otherRecord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (otherRecord \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return otherRecord !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 otherRecord.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                \u0026\u0026 (otherRecord.getAmount().equals(getAmount()) || otherRecord.getDate().equals(getDate()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns true if both records have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * This defines a stronger notion of equality between two records."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (!(other instanceof Record)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record otherRecord \u003d (Record) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return otherRecord.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                \u0026\u0026 otherRecord.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                \u0026\u0026 otherRecord.getDate().equals(getDate())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                \u0026\u0026 otherRecord.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                \u0026\u0026 otherRecord.getCategory().equals(getCategory());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return Objects.hash(name, amount, date, description, category);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .append(\" Amount: $\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .append(getClass());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 22,
      "Jackimaru96": 17,
      "-": 59,
      "eugeneyl": 10,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/UniqueRecordList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * A list of records that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A record is considered unique by comparing using {@code Record#isSameRecord(Record)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * However, the removal of a record uses Record#equals(Object) so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * as to ensure that the record with exactly the same fields will be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * @see Record#isSameRecord(Record)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class UniqueRecordList implements Iterable\u003cRecord\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final ObservableList\u003cRecord\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns true if the list contains an equivalent record as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean contains(Record toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecord);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Adds a record to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Can have duplicate records in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void add(Record toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Replaces the record {@code target} in the list with {@code editedRecord}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireAllNonNull(target, editedRecord);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        internalList.set(index, editedRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Removes the equivalent record from the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * The record must exist in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void remove(Record toRemove) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new RecordNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecords(UniqueRecordList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Replaces the contents of this list with {@code records}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code records} can contain duplicate records."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setRecords(List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireAllNonNull(records);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        internalList.setAll(records);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Reverses the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void reverseList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FXCollections.reverse(internalList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Sorts the list according to comparator supplied"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void sortList(Comparator\u003cRecord\u003e comparator) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public Iterator\u003cRecord\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                || (other instanceof UniqueRecordList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecordList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns true if {@code people} contains only unique people."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private boolean recordsAreUnique(List\u003cRecord\u003e people) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        for (int i \u003d 0; i \u003c people.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            for (int j \u003d i + 1; j \u003c people.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                if (people.get(i).isSameRecord(people.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 113,
      "kjiaxuan": 27
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/exceptions/DuplicateRecordException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Signals that the operation will result in duplicate Records (Records are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class DuplicateRecordException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public DuplicateRecordException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        super(\"Operation would result in duplicate Record\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 9,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/record/exceptions/RecordNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Signals that the operation is unable to find the specified record."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 5,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Contains utility methods for populating {@code FinanceTracker} with sample data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String STANDARD_DESCRIPTION \u003d \"some description\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static Record[] getSampleRecords() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return new Record[] {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            new Record(new Name(\"Weekly groceries purchase\"), new Amount(\"100\"), new Date(\"12/02/2018\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(STANDARD_DESCRIPTION), new Category(\"shopping\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            new Record(new Name(\"H and M Clothes\"), new Amount(\"100\"), new Date(\"12/02/2018\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(STANDARD_DESCRIPTION), new Category(\"shopping\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            new Record(new Name(\"Chicken Rice lunch\"), new Amount(\"100\"), new Date(\"12/02/2018\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(STANDARD_DESCRIPTION), new Category(\"food\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            new Record(new Name(\"Haircut\"), new Amount(\"100\"), new Date(\"12/02/2018\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(STANDARD_DESCRIPTION), new Category(\"entertainment\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            new Record(new Name(\"Bus Ride\"), new Amount(\"100\"), new Date(\"12/02/2018\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(STANDARD_DESCRIPTION), new Category(\"transportation\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            new Record(new Name(\"Cigarettes\"), new Amount(\"100\"), new Date(\"12/02/2018\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(STANDARD_DESCRIPTION), new Category(\"vices\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static Budget getSamepleBudget() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return new Budget(800, 200);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static ReadOnlyFinanceTracker getSampleFinanceTracker() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker sampleFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        for (Record sampleRecord : getSampleRecords()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            sampleFinanceTracker.addRecord(sampleRecord);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        sampleFinanceTracker.addBudget(getSamepleBudget());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return sampleFinanceTracker;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static Category getCategory(String string) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        /*return Arrays.stream(strings)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .collect(Collectors.toSet());*/"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new Category(string);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 2,
      "JeremyLoye": 7,
      "Jackimaru96": 11,
      "-": 16,
      "eugeneyl": 9,
      "kjiaxuan": 14
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/FinanceTrackerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents a storage for {@link FinanceTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public interface FinanceTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns FinanceTracker data as a {@link ReadOnlyFinanceTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see #getFinanceTrackerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Saves the given {@link ReadOnlyFinanceTracker} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @param financeTracker cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see #saveFinanceTracker(ReadOnlyFinanceTracker)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kjiaxuan": 46
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/JsonAdaptedBudget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Budget\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final String totalBudget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final String currentBudget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given record details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"totalBudget\") String totalBudget,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                             @JsonProperty(\"currentBudget\") String currentBudget) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.currentBudget \u003d currentBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        currentBudget \u003d Double.toString(source.getCurrentBudget());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        totalBudget \u003d Double.toString(source.getTotalBudget());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * Converts this Jackson-friendly adapted record object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted record."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public Budget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (currentBudget \u003d\u003d null || totalBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            Double currBudget \u003d Double.parseDouble(currentBudget);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            Double totBudget \u003d Double.parseDouble(totalBudget);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            return new Budget(totBudget, currBudget);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new IllegalValueException(String.format(Amount.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 53,
      "Jackimaru96": 3
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/JsonAdaptedCategory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Constructs a {@code JsonAdaptedCategory} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Converts a given {@code Category} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        categoryName \u003d source.categoryName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code Category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        if (!Category.isValidCategoryName(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 44,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/JsonAdaptedRecord.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Jackson-friendly version of {@link Record}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "class JsonAdaptedRecord {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Record\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final JsonAdaptedCategory tagged;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecord} with the given record details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public JsonAdaptedRecord(@JsonProperty(\"name\") String name, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                             @JsonProperty(\"date\") String date, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                             @JsonProperty(\"tagged\") JsonAdaptedCategory tagged) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.tagged \u003d tagged;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Converts a given {@code Record} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public JsonAdaptedRecord(Record source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        tagged \u003d new JsonAdaptedCategory(source.getCategory());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Converts this Jackson-friendly adapted record object into the model\u0027s {@code Record} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted record."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public Record toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (!Category.isValidCategoryName(tagged.getCategoryName())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final Category modelTag \u003d new Category(tagged.getCategoryName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new Record(modelName, modelAmount, modelDate, modelDescription, modelTag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 23,
      "Jackimaru96": 19,
      "-": 35,
      "eugeneyl": 9,
      "kjiaxuan": 10
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/JsonFinanceTrackerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A class to access FinanceTracker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class JsonFinanceTrackerStorage implements FinanceTrackerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFinanceTrackerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public JsonFinanceTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return readFinanceTracker(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Similar to {@link #readFinanceTracker()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Optional\u003cJsonSerializableFinanceTracker\u003e jsonFinanceTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                filePath, JsonSerializableFinanceTracker.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        if (!jsonFinanceTracker.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return Optional.of(jsonFinanceTracker.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        saveFinanceTracker(financeTracker, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Similar to {@link #saveFinanceTracker(ReadOnlyFinanceTracker)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        requireNonNull(financeTracker);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFinanceTracker(financeTracker), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "kjiaxuan": 26
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/JsonSerializableFinanceTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * An Immutable FinanceTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "@JsonRootName(value \u003d \"finance\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "class JsonSerializableFinanceTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    //public static final String MESSAGE_DUPLICATE_RECORD \u003d \"Records list contains duplicate record(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final List\u003cJsonAdaptedRecord\u003e records \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final JsonAdaptedBudget budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Constructs a {@code JsonSerializableFinanceTracker} with the given records."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public JsonSerializableFinanceTracker(@JsonProperty(\"records\") List\u003cJsonAdaptedRecord\u003e records,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                                          @JsonProperty(\"budget\") JsonAdaptedBudget budget) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.records.addAll(records);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Converts a given {@code ReadOnlyFinanceTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFinanceTracker}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public JsonSerializableFinanceTracker(ReadOnlyFinanceTracker source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        records.addAll(source.getRecordList().stream().map(JsonAdaptedRecord::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        budget \u003d new JsonAdaptedBudget(source.getBudget());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Converts this finance tracker into the model\u0027s {@code FinanceTracker} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        for (JsonAdaptedRecord jsonAdaptedRecord : records) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            Record record \u003d jsonAdaptedRecord.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            financeTracker.addRecord(record);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        financeTracker.addBudget(budget.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return financeTracker;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 9,
      "Jackimaru96": 1,
      "-": 33,
      "eugeneyl": 5,
      "kjiaxuan": 16
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public interface Storage extends FinanceTrackerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Path getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Manages storage of FinanceTracker data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static FinanceTrackerStorage financeTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public StorageManager(FinanceTrackerStorage financeTrackerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this.financeTrackerStorage \u003d financeTrackerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FinanceTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return financeTrackerStorage.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return readFinanceTracker(financeTrackerStorage.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(Path filePath) throws"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return financeTrackerStorage.readFinanceTracker(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        saveFinanceTracker(financeTracker, financeTrackerStorage.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTrackerStorage.saveFinanceTracker(financeTracker, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static void setFinanceTrackerStorage(FinanceTrackerStorage newStorage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        financeTrackerStorage \u003d newStorage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 6,
      "-": 55,
      "kjiaxuan": 21
    }
  },
  {
    "path": "src/main/java/seedu/finance/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Represents a storage for {@link seedu.finance.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Saves the given {@link seedu.finance.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d \"https://se-education.org/dummy-search-page/?name\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private Label totalBudget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private Label currentBudget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Label currentSpending;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public BrowserPanel(ObservableValue\u003cRecord\u003e selectedRecord, Budget budget) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        updateBudget(budget);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Load record page when selected record changes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectedRecord.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                //loadDefaultPage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            //loadRecordPage(newValue);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Method to update Budget"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param budget the budget to be updated to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void updateBudget(Budget budget) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String totalBudgetString \u003d String.format(\"%.2f\", budget.getTotalBudget());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String currentBudgetString \u003d String.format(\"%.2f\", budget.getCurrentBudget());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String currentSpendingString \u003d String.format(\"%.2f\", budget.getCurrentSpendings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.totalBudget.textProperty().setValue(\"Total Budget: \" + totalBudgetString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.currentBudget.textProperty().setValue(\"Current Budget: \" + currentBudgetString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.currentSpending.textProperty().setValue(\"Current Spendings: \" + currentSpendingString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 18,
      "Jackimaru96": 9,
      "-": 54,
      "eugeneyl": 2,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/BudgetPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "//@@author Jackimaru96"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * This class represents the budget panel for the finance tracker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Shows currentSpending/totalBudget with some animation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class BudgetPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String FXML \u003d \"BudgetPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final double ANIMATION_DURATION \u003d 0.2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final double SIZE_OF_FONT \u003d 35.0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private ProgressBar budgetBar;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Text budgetDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Text spendingDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private TextFlow percentageDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private double currentSpending;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private double currentTotalBudget;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public BudgetPanel(Budget budget) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetDisplay \u003d new Text(\" / $0\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        spendingDisplay \u003d new Text(\"$0 \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentTotalBudget \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentSpending \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetDisplay.setStyle(\"-fx-fill: #ffffff;\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetDisplay.setFont(Font.font(\"Abel\", SIZE_OF_FONT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        spendingDisplay.setFont(Font.font(\"Abel\", SIZE_OF_FONT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        percentageDisplay.getChildren().addAll(spendingDisplay, budgetDisplay);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        updateTotalBudgetTextDisplay(budget.getTotalBudget());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        updateCurrentSpendingTextDisplay(budget.getCurrentSpendings());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        update(budget);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Called when light themes are set so that the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * fonts are updated to correct contrast colour"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void setLightThemes(String colour) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        switch (colour) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case \"Pink\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            budgetDisplay.setStyle(\"-fx-fill: #ff82c2;\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case \"Blue\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            budgetDisplay.setStyle(\"-fx-fill: #4a5aff;\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            budgetDisplay.setStyle(\"-fx-fill: #000000;\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Called when dark theme is set so that the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * fonts are updated to correct contrast colour"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void setDarkTheme() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetDisplay.setStyle(\"-fx-fill:#ffffff;\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Updates the totalBudget and currentSpending"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param budget to update bugetPanel with"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void update(Budget budget) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        double totalBudget \u003d budget.getTotalBudget();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        double currentTotalSpending \u003d budget.getCurrentSpendings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        updateTotalBudget(totalBudget, currentTotalSpending);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        setBudgetUiColours(totalBudget, currentTotalSpending);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Updates the percentage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param totalBudget the total budget"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param currentSpending the total spending"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void updateTotalBudget(double totalBudget, double currentSpending) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        double currentPercentage \u003d currentSpending / totalBudget;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (currentPercentage \u003e\u003d 1.00) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            currentPercentage \u003d 1.00;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (totalBudget \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            currentPercentage \u003d 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        updateBudgetPanel(currentSpending, totalBudget, currentPercentage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Update budgetDisplay to the input budget"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param totalBudget to display on totalBudget"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void updateTotalBudgetTextDisplay(double totalBudget) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.budgetDisplay.setText(\" / $\" + String.format(\"%.2f\", totalBudget));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Update spendingDisplay to input spending"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param spending to display on currentSpending"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void updateCurrentSpendingTextDisplay(double spending) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.spendingDisplay.setText(\"$\" + String.format(\"%.2f\", spending));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Changes the colours of spendingDisplay and budgetBar to red if over budget."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * If spending is below budget, set the above to green."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param totalBudget total budget now"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param currentSpending total spending now"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void setBudgetUiColours(double totalBudget, double currentSpending) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        double percentage \u003d currentSpending / totalBudget;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Exceeded budget, red for exceeding"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (totalBudget \u003c currentSpending) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            spendingDisplay.setStyle(\"-fx-fill: #ae0807;\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            budgetBar.setStyle(\"-fx-accent: derive(#ae0807, 20%);\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Close to exceeding budget; orange for warning"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (percentage \u003c\u003d 1 \u0026\u0026 percentage \u003e\u003d 0.8) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            spendingDisplay.setStyle(\"-fx-fill: #ae6429;\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            budgetBar.setStyle(\"-fx-accent: derive(#ae6429, 20%);\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // default, within budget green"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        spendingDisplay.setStyle(\"-fx-fill: #14a124;\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetBar.setStyle(\"-fx-accent: derive(#14a124, 20%);\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * method to update the budget panel to show updated budget"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param currentSpending the total current spending now"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param totalBudget the total budget for finance tracker"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param percentage the percentage (currentSpending/totalBudget0"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void updateBudgetPanel(double currentSpending, double totalBudget, double percentage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        timeline \u003d new Timeline("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new KeyFrame("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                        Duration.ZERO,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                        new KeyValue(budgetBar.progressProperty(), budgetBar.getProgress())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new KeyFrame("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                        Duration.seconds(ANIMATION_DURATION),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                        new KeyValue(budgetBar.progressProperty(), percentage)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                )"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        );"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        timeline.setOnFinished(stage -\u003e {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            this.currentSpending \u003d currentSpending;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            this.currentTotalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            updateCurrentSpendingTextDisplay(currentSpending);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            updateTotalBudgetTextDisplay(totalBudget);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            alterTextSize();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        timeline.playFromStart();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Alter the size of texts"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void alterTextSize() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        percentageDisplay.setScaleY(percentageDisplay.getMaxHeight() / percentageDisplay.getHeight());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        percentageDisplay.setScaleX(percentageDisplay.getMaxHeight() / percentageDisplay.getHeight());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 191
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, List\u003cString\u003e history) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d new ListElementPointer(history);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "         * @see seedu.finance.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/GraphPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.commons.events.ShowGraphRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * The Graph Panel of the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class GraphPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //Not sure about the page urls, KIV most likely have to edit again"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //Want to link to GraphPage.html which is currently under main/docs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"https://geezlouisee.github.io/web/index.html?\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            \"https://geezlouisee.github.io/web/index.html?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public GraphPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Loads graph using attendance data from event object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private void loadGraph(ShowGraphRequestEvent event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String url \u003d SEARCH_PAGE_URL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        loadPage(url);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        loadPage(DEFAULT_PAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private void showGraphRequestEvent(ShowGraphRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        loadGraph(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 65
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private String theme \u003d \"Dark\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private BudgetPanel budgetPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private RecordListPanel recordListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Scene currentScene;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private StackPane budgetPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private StackPane recordListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.selectedRecordProperty(), logic.getBudget());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanel \u003d new BudgetPanel(logic.getBudget());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanelPlaceholder.getChildren().add(budgetPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList(), logic.selectedRecordProperty(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                logic::setSelectedRecord);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        recordListPanelPlaceholder.getChildren().add(recordListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFinanceTrackerFilePath(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                logic.getFinanceTracker());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (theme \u003d\u003d \"Dark\") {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            budgetPanel.setDarkTheme();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            budgetPanel.setLightThemes(theme);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        browserPanel.updateBudget(logic.getBudget());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanel.update(logic.getBudget());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Handles and udpates the budget to show on UI"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void handleChangeBudget() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        logger.info(\"Budget Info: \" + logic.getBudget().getCurrentBudget());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanel.update(logic.getBudget());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        browserPanel.updateBudget(logic.getBudget());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordListPanel getRecordListPanel() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return recordListPanel;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see seedu.finance.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            if (commandResult.isSwitchTheme()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                handleSwitchTheme(commandResult.getThemeToChange());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            if (commandResult.isChangeBudget()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                handleChangeBudget();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Changing Theme \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d//"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    //@author Jackimaru96"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Method to handle switching the Finance Tracker to specified theme"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * @param themeToSwitch the theme to switch to"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private void handleSwitchTheme(String themeToSwitch) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        switch (themeToSwitch) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case \"Dark\":"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            setDarkTheme();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case \"Light\":"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            setLightTheme();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case \"Blue\":"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            setBlueTheme();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        case \"Pink\":"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            setPinkTheme();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Sets the Finance Tracker to light theme"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private void setLightTheme() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (this.theme \u003d\u003d \"Light\") {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            CommandResult r \u003d new CommandResult(\"Theme is currently already set to \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + theme"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + \".\\nPlease choose another theme to switch to.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().clear();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/LightTheme.css\").toExternalForm());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/Extensions.css\").toExternalForm());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.theme \u003d \"Light\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        CommandResult r \u003d new CommandResult(\"Light Theme is set\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanel.setLightThemes(\"Light\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Sets the FinanceTracker to dark theme"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private void setDarkTheme() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (this.theme \u003d\u003d \"Dark\") {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            CommandResult r \u003d new CommandResult(\"Theme is currently already set to \""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + theme"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + \".\\nPlease choose another theme to switch to.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().clear();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/DarkTheme.css\").toExternalForm());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/Extensions.css\").toExternalForm());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.theme \u003d \"Dark\";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        CommandResult r \u003d new CommandResult(\"Dark Theme is set\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanel.setDarkTheme();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Sets the FinanceTracker to blue theme"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private void setBlueTheme() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (this.theme \u003d\u003d \"Blue\") {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            CommandResult r \u003d new CommandResult(\"Theme is currently already set to \""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + theme"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + \".\\nPlease choose another theme to switch to.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().clear();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/BlueTheme.css\").toExternalForm());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/Extensions.css\").toExternalForm());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.theme \u003d \"Blue\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        CommandResult r \u003d new CommandResult(\"Blue Theme is set\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanel.setLightThemes(\"Blue\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Sets the FinanceTracker to pink theme"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private void setPinkTheme() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (this.theme \u003d\u003d \"Pink\") {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            CommandResult r \u003d new CommandResult(\"Theme is currently already set to \""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + theme"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    + \".\\nPlease choose another theme to switch to.\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene \u003d primaryStage.getScene();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().clear();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/PinkTheme.css\").toExternalForm());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        currentScene.getStylesheets().add(getClass()"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .getResource(\"/view/Extensions.css\").toExternalForm());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.theme \u003d \"Pink\";"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        CommandResult r \u003d new CommandResult(\"Pink Theme is set\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        resultDisplay.setFeedbackToUser(r.getFeedbackToUser());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        budgetPanel.setLightThemes(\"Pink\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 10,
      "Jackimaru96": 160,
      "-": 184,
      "eugeneyl": 5,
      "kjiaxuan": 12
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/RecordCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * An UI component that displays information of a {@code Record}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final String FXML \u003d \"RecordListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String[] CATEGORY_COLOR_STYLES \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        { \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\", \"purple\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            \"coral\", \"tan\", \"turquoise\" };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public final Record record;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordCard(Record record, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.record \u003d record;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        name.setText(record.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        amount.setText(\"$\" + record.getAmount().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        date.setText(record.getDate().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        description.setText(record.getDescription().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        initCategories(record);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author geezlouisee-reused"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/1ac2e7c5597cf328cc9c28d5d8e18db8dc1fc5a0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    // with minor modifications"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Returns the color style for {@code categoryName}\u0027s label."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private String getCategoryColorStyleFor(String categoryName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        //Using the hash code of the category name to generate a random color, so color remains consistent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        //between different runs of the program while still making it random enough between Categories"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return CATEGORY_COLOR_STYLES[Math.abs(categoryName.hashCode()) % CATEGORY_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Creates the category labels for {@code record}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private void initCategories(Record record) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category category \u003d record.getCategory();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Label categoryLabel \u003d new Label(category.categoryName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        categoryLabel.getStyleClass().add(getCategoryColorStyleFor(category.categoryName));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        categories.getChildren().add(categoryLabel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (!(other instanceof RecordCard)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordCard card \u003d (RecordCard) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                \u0026\u0026 record.equals(card.record);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 27,
      "JeremyLoye": 3,
      "Jackimaru96": 4,
      "-": 51,
      "eugeneyl": 11,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/RecordListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Panel containing the list of records."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final String FXML \u003d \"RecordListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecordListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private ListView\u003cRecord\u003e recordListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordListPanel(ObservableList\u003cRecord\u003e recordList, ObservableValue\u003cRecord\u003e selectedRecord,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                           Consumer\u003cRecord\u003e onSelectedRecordChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        recordListView.setItems(recordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        recordListView.setCellFactory(listView -\u003e new RecordListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        recordListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            logger.fine(\"Selection in record list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            onSelectedRecordChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectedRecord.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            logger.fine(\"Selected record changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected record,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            if (Objects.equals(recordListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                recordListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                int index \u003d recordListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                recordListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                recordListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Record} using a {@code RecordCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    class RecordListViewCell extends ListCell\u003cRecord\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        protected void updateItem(Record record, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            super.updateItem(record, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            if (empty || record \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                setGraphic(new RecordCard(record, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "eugeneyl": 17,
      "kjiaxuan": 13
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/finance_tracker_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "-": 80,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/main/java/seedu/finance/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/resources/view/BlueTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    background-color: white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 0.8;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #9efffa;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #9efffa;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #71c2ff;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #bdf7ff;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #f3ffe1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".budget_title {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#4a5aff, 50%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#4a5aff, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#4a5aff, 30%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #9efffa;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #9efffa;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cardPane {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#4a5aff, 20%);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(rgba(167, 163, 245, 0.5), 20%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: rgba(255, 255, 255, 0.5)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: white white rgba(74, 90, 255, 0.4) white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: white white #ffffff white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CATEGORIES \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .teal{"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: teal;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .red {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .yellow {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .blue {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .orange {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .brown {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .green {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .pink {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .black {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .grey {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .purple {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .tan {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: tan;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .coral {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: coral;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .turquoise {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: turquoise;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 358
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "  \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "      \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \u003cLabel fx:id\u003d\"currentBudget\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$currentBudget\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \u003cLabel fx:id\u003d\"totalBudget\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalBudget\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \u003cLabel fx:id\u003d\"currentSpending\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$currentSpending\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 9,
      "Jackimaru96": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/BudgetPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003cStackPane fx:id\u003d\"budgetPanel\" alignment\u003d\"TOP_CENTER\" minHeight\u003d\"10.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"150.0\" prefWidth\u003d\"300.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "       \u003cLabel styleClass\u003d\"budget_title\" text\u003d\"Total Budget\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            \u003cFont size\u003d\"25.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "       \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "       \u003cProgressBar fx:id\u003d\"budgetBar\" prefHeight\u003d\"55.0\" prefWidth\u003d\"350.0\" progress\u003d\"0.0\" StackPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "       \u003cGridPane fx:id\u003d\"textDisplay\" prefHeight\u003d\"96.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "           \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "               \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "           \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "           \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "               \u003cRowConstraints maxHeight\u003d\"46.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"32.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "               \u003cRowConstraints maxHeight\u003d\"71.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"66.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "               \u003cRowConstraints maxHeight\u003d\"55.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"49.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "           \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "               \u003cTextFlow fx:id\u003d\"percentageDisplay\" maxHeight\u003d\"50.00\" prefHeight\u003d\"50.0\" prefWidth\u003d\"300.0\" textAlignment\u003d\"CENTER\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "       \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 35
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".budget_title {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "#categories .teal{"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: teal;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "#categories .red {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .yellow {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .blue {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .orange {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .brown {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .green {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .pink {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .black {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .grey {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " #categories .purple {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " #categories .tan {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: tan;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " #categories .coral {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: coral;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " #categories .turquoise {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -fx-background-color: turquoise;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 59,
      "Jackimaru96": 6,
      "-": 348,
      "kjiaxuan": 13
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: #ff0e1b !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    background-color: white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 0.8;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #f4ffea;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #f5ffcd;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".budget_title {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #f6ffd3;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #ffefd5;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CATEGORIES \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .teal{"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: teal;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .red {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .yellow {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .blue {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .orange {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .brown {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .green {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .pink {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .black {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .grey {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .purple {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .tan {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: tan;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .coral {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: coral;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .turquoise {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: turquoise;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 333
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         title\u003d\"In-Credit-Ble\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \u003cImage url\u003d\"@/images/finance_tracker_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Theme\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"LightTheme\" mnemonicParsing\u003d\"false\" onAction\u003d\"#setLightTheme\" text\u003d\"Light\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"DarkTheme\" mnemonicParsing\u003d\"false\" onAction\u003d\"#setDarkTheme\" text\u003d\"Dark\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"BlueTheme\" mnemonicParsing\u003d\"false\" onAction\u003d\"#setBlueTheme\" text\u003d\"Blue\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"PinkTheme\" mnemonicParsing\u003d\"false\" onAction\u003d\"#setPinkTheme\" text\u003d\"Pink\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "          \u003cVBox fx:id\u003d\"recordList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"recordListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "          \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"rightSplitPane\" dividerPositions\u003d\"0.4\" orientation\u003d\"VERTICAL\" SplitPane.resizableWithParent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            \u003cVBox fx:id\u003d\"budgetPanel\" minWidth \u003d \"450\" prefWidth\u003d\"450\" prefHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "              \u003cStackPane fx:id\u003d\"budgetPanelPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 4,
      "Jackimaru96": 13,
      "-": 60,
      "eugeneyl": 1,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/main/resources/view/PinkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    background-color: white; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 0.8;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #ffd8dd;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #ffe4df;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #ffb1ed;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: rgb(255, 203, 247);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #ffa8cc;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".budget_title {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 30px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-pane \u003e .viewport {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#ffa1dd, 50%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#ffa1dd, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#ffa1dd, 30%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu:hover {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #ffcaf0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".menu-item:focused {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #ff94df;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".cardPane {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(#ffb2e4, 20%);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: derive(rgba(245, 195, 243, 0.95), 20%);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: rgba(255, 255, 255, 0.5)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: white white rgb(255, 204, 222) white;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: transparent, white, transparent, white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-color: white white #ffffff white;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CATEGORIES \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .teal{"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: teal;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .red {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .yellow {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .blue {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .orange {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .brown {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .green {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .pink {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .black {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .grey {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .purple {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .tan {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: tan;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .coral {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: coral;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "#categories .turquoise {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    -fx-background-color: turquoise;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 358
    }
  },
  {
    "path": "src/main/resources/view/RecordListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "      \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 1,
      "JeremyLoye": 2,
      "Jackimaru96": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/RecordListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \u003cListView fx:id\u003d\"recordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \u003c!--\u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e--\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/style.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "body {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  font: 10px sans-serif;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".axis path,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".axis line {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  fill: none;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  stroke: #000;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  shape-rendering: crispEdges;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".bar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  fill: orange;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".solidArc:hover {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  fill: orangered ;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".solidArc {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -moz-transition: all 0.3s;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -o-transition: all 0.3s;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    -webkit-transition: all 0.3s;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    transition: all 0.3s;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".x.axis path {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  display: none;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".aster-score {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  line-height: 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  font-weight: bold;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  font-size: 500%;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".d3-tip {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  line-height: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  font-weight: bold;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  padding: 12px;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  background: rgba(0, 0, 0, 0.8);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  color: #fff;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  border-radius: 2px;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/* Creates a small triangle extender for the tooltip */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".d3-tip:after {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  box-sizing: border-box;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  display: inline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  font-size: 10px;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  width: 100%;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  line-height: 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  color: rgba(0, 0, 0, 0.8);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  content: \"\\25BC\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  position: absolute;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  text-align: center;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/* Style northward tooltips differently */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ".d3-tip.n:after {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  margin: -1px 0 0 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  top: 100%;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "  left: 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 64
    }
  },
  {
    "path": "src/test/data/JsonFinanceTrackerStorageTest/invalidAndValidRecordFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \"records\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"name\": \"Valid Record\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"amount\": \"123\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\": \"12/02/2009\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"description\": \"some description\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"name\": \"Record With Invalid Amount Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"amount\": \"948asdf2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\": \"12/02/2009\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"description\": \"\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 4,
      "Jackimaru96": 2,
      "-": 4,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/data/JsonFinanceTrackerStorageTest/invalidRecordFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \"records\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"name\": \"Record with invalid name field: Ha!m Bu@rger\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"amount\": \"123\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"date\": \"12/02/2019\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"description\": \"\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kjiaxuan": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableFinanceTrackerTest/duplicateRecordFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \"records\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"name\": \"Fries\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"3.00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"date\" : \"03/02/2019\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"description\": \"some description\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"category\": \"friends\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"name\": \"Fries\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"3.00\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"date\" : \"12/03/2019\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"description\": \"some description\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"category\": \"friends\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 3,
      "eugeneyl": 2,
      "kjiaxuan": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableFinanceTrackerTest/invalidRecordFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \"records\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"name\": \"Stapler\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"1.40\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"date\" : \"03/03/19invalid\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    \"description\": \"asdfnmxcv,as kasm kk as 012 @\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 1,
      "kjiaxuan": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableFinanceTrackerTest/typicalRecordsFinanceTracker.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \"_comment\": \"FinanceTracker saves file which contains the same Record values as in TypicalRecords#getTypicalFinanceTracker()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "  \"records\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \"name\" : \"Apple\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"1.00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\" : \"12/02/2017\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"tagged\" : \"groceries\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \"name\" : \"Banana Donut\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"2.50\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\" : \"12/02/2015\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"tagged\" : \"food\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \"name\" : \"Cap\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"15.00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\" : \"12/05/2017\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"tagged\" : \"clothes\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \"name\" : \"Chocolate Donut\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"0.90\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\" : \"12/02/2007\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"tagged\" : \"food\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \"name\" : \"Earrings\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"12.99\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\" : \"12/12/2017\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"tagged\" : \"accessories\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \"name\" : \"Fruits\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"20.00\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\" : \"02/02/2017\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"tagged\" : \"food\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    \"name\" : \"Gift\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    \"amount\" : \"24.90\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    \"date\" : \"12/02/2027\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"description\": \"\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    \"tagged\" : \"gift\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 7,
      "JeremyLoye": 11,
      "Jackimaru96": 10,
      "-": 9,
      "eugeneyl": 8,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \"financeTrackerFilePath\" : \"financetracker.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "  \"financeTrackerFilePath\" : \"financetracker.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/GraphPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.concurrent.Worker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * A handler for the {@code GraphPanel} of the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class GraphPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public GraphPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        WebView webView \u003d getChildNode(BROWSER_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        WebEngine engine \u003d webView.getEngine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            if (newState \u003d\u003d Worker.State.RUNNING) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                isWebViewLoaded \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Remembers the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void rememberUrl() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        lastRememberedUrl \u003d getLoadedUrl();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Returns true if the current {@code URL} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * {@code rememberUrl()} call."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public boolean isUrlChanged() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return !lastRememberedUrl.equals(getLoadedUrl());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public boolean isLoaded() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return isWebViewLoaded;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 64
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final RecordListPanelHandle recordListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        recordListPanel \u003d new RecordListPanelHandle(getChildNode(RecordListPanelHandle.RECORD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordListPanelHandle getRecordListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return recordListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "eugeneyl": 1,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RecordCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Provides a handle to a record card in the record list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static final String AMOUNT_FIELD_ID \u003d \"#amount\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static final String DATE_FIELD_ID \u003d \"#date\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#category\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final Label amountLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private final Label dateLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Label descriptionLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        dateLabel \u003d getChildNode(DATE_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return amountLabel.getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return dateLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return descriptionLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author geezlouisee-reused"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/1ac2e7c5597cf328cc9c28d5d8e18db8dc1fc5a0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //with minor modifications"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public String getCategoryStyleClasses(String category) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        if (categoryLabel.getText().equals(category)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return categoryLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new IllegalArgumentException(\"No such category.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns true if this handle contains {@code record}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean equals(Record record) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return getName().equals(record.getName().fullName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                \u0026\u0026 getAmount().equals(\"$\" + record.getAmount().toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                \u0026\u0026 getDate().equals(record.getDate().toString())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                \u0026\u0026 getCategory().equals(record.getCategory());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 4,
      "JeremyLoye": 10,
      "Jackimaru96": 20,
      "-": 39,
      "eugeneyl": 7,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RecordListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * Provides a handle for {@code RecordListPanel} containing the list of {@code RecordCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordListPanelHandle extends NodeHandle\u003cListView\u003cRecord\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String RECORD_LIST_VIEW_ID \u003d \"#recordListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private Optional\u003cRecord\u003e lastRememberedSelectedRecordCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordListPanelHandle(ListView\u003cRecord\u003e recordListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        super(recordListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns a handle to the selected {@code RecordCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e selectedRecordList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (selectedRecordList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new AssertionError(\"Record list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .map(RecordCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedRecordList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Navigates the listview to display {@code record}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void navigateToCard(Record record) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        if (!getRootNode().getItems().contains(record)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            throw new IllegalArgumentException(\"Record does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            getRootNode().scrollTo(record);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Selects the {@code RecordCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the record card handle of a record associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordCardHandle getRecordCardHandle(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .map(RecordCardHandle::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .filter(handle -\u003e handle.equals(getRecord(index)))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private Record getRecord(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Remembers the selected {@code RecordCard} in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void rememberSelectedRecordCard() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            lastRememberedSelectedRecordCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            lastRememberedSelectedRecordCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns true if the selected {@code RecordCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@code rememberSelectedRecordCard()} call."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public boolean isSelectedRecordCardChanged() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return lastRememberedSelectedRecordCard.isPresent();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return !lastRememberedSelectedRecordCard.isPresent()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                    || !lastRememberedSelectedRecordCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "eugeneyl": 37,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WebViewUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods for dealing with {@code WebView}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class WebViewUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page in the {@code webView}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static URL getLoadedUrl(WebView webView) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the {@code browserPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void waitUntilBrowserLoaded(BrowserPanelHandle browserPanelHandle) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().waitForEvent(browserPanelHandle::isLoaded);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * If the {@code graphPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static void waitUntilBrowserLoaded(GraphPanelHandle graphPanelHandle) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        new GuiRobot().waitForEvent(graphPanelHandle::isLoaded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 7,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/finance/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.function.Supplier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    protected Supplier\u003cReadOnlyFinanceTracker\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyFinanceTracker\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            JsonFinanceTrackerStorage jsonFinanceTrackerStorage \u003d new JsonFinanceTrackerStorage(saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                jsonFinanceTrackerStorage.saveFinanceTracker(initialDataSupplier.get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns a defensive copy of the finance tracker data stored inside the storage file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTracker readStorageFinanceTracker() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return new FinanceTracker(storage.readFinanceTracker().get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            throw new AssertionError(\"Data is not in the FinanceTracker format.\", dce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return storage.getFinanceTrackerFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model copy \u003d new ModelManager((model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredRecordList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 15,
      "-": 80,
      "eugeneyl": 2,
      "kjiaxuan": 23
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        final Index fifthRecordIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(fifthRecordIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(fifthRecordIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(fifthRecordIndex.equals(fifthRecordIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(fifthRecordIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(fifthRecordIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(fifthRecordIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "kjiaxuan": 8
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/finance_tracker_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "-": 45,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 126,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/util/InvalidationListenerManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class InvalidationListenerManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final SimpleObjectProperty\u003cObject\u003e dummyObservable \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int counter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerOnce_listenerAdded() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(dummyObservable, observable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_sameListenerTwice_listenerAddedTwice() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2, counter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_listenersBeingCalled_listenerNotCalled() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_singleListenerAdded_listenerRemoved() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_sameListenerAddedTwice_firstListenerRemoved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_listenersBeingCalled_listenerStillCalled() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener1 \u003d observable -\u003e counter++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener2 \u003d observable -\u003e invalidationListenerManager.removeListener(listener1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(dummyObservable);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 158,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SpendCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonFinanceTrackerStorage financeTrackerStorage \u003d new JsonFinanceTrackerStorage("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // Setup LogicManager with JsonFinanceTrackerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonFinanceTrackerStorage financeTrackerStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                new JsonFinanceTrackerIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String spendCommand \u003d SpendCommand.COMMAND_WORD + NAME_DESC_AMY + AMOUNT_DESC_AMY + DATE_DESC_AMY"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Record expectedRecord \u003d new RecordBuilder(AMY).withCategory(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.addRecord(expectedRecord);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandBehavior(CommandException.class, spendCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertHistoryCorrect(spendCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void getFilteredRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        logic.getFilteredRecordList().remove(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     *      - {@code expectedModel}\u0027s finance tracker was saved to the storage file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static class JsonFinanceTrackerIoExceptionThrowingStub extends JsonFinanceTrackerStorage {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        private JsonFinanceTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 7,
      "-": 145,
      "eugeneyl": 4,
      "kjiaxuan": 35
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/AllocateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Contains integration tests (interaction with Model) and unit test for AllocateCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class AllocateCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void execute_addCategoryBudget_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final CategoryBudget categoryBudget \u003d new CategoryBudget(VALID_CATEGORY_FRIEND,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                Double.parseDouble(VALID_AMOUNT_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final TotalBudget totalBudget \u003d new TotalBudget(500.00);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        model.addBudget(totalBudget);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        AllocateCommand allocateCommand \u003d new AllocateCommand(categoryBudget);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, VALID_CATEGORY_FRIEND,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                Double.parseDouble(VALID_AMOUNT_AMY));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        expectedModel.addBudget(totalBudget);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            expectedModel.addCategoryBudget(categoryBudget);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        } catch (CategoryBudgetExceedTotalBudgetException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            System.out.println(String.format(\"The category budget (%.2f) will exceed the total budget of \" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                    \"Finance Tracker (%.2f)\\n\", categoryBudget.getTotalBudget(), totalBudget.getTotalBudget()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(allocateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final CategoryBudget catBudget \u003d new CategoryBudget(VALID_CATEGORY_FRIEND,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                Double.parseDouble(VALID_AMOUNT_AMY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final AllocateCommand standardCommand \u003d new AllocateCommand(catBudget);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // same category (case-insensitive) -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        AllocateCommand commandWithSameCategory \u003d new AllocateCommand(new CategoryBudget("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                \"fRieND\", Double.parseDouble(\"100.14\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameCategory));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(standardCommand.equals(new IncreaseCommand(new Amount (\"312.00\"))));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(standardCommand.equals(new AllocateCommand(new CategoryBudget(VALID_CATEGORY_HUSBAND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                Double.parseDouble(VALID_AMOUNT_AMY)))));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 75,
      "eugeneyl": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_emptyFinanceTracker_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_nonEmptyFinanceTracker_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.setFinanceTracker(new FinanceTracker());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "kjiaxuan": 15
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.EditRecordDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String VALID_AMOUNT_AMY \u003d \"312.00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String VALID_AMOUNT_BOB \u003d \"123.23\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"12/01/2005\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"23/04/2014\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String VALID_CATEGORY_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String VALID_CATEGORY_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"Birthday present for Amy\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"Birthday present for Bob\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String AMOUNT_DESC_AMY \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String AMOUNT_DESC_BOB \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String CATEGORY_DESC_FRIEND \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String CATEGORY_DESC_HUSBAND \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"$42\"; // did not start with \u0027$\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            \" \" + PREFIX_DATE + \"29/29/2019\"; // invalid date not allowed in dates"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            + \"hubby*\"; // \u0027*\u0027 not allowed in categories"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final EditCommand.EditRecordDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final EditCommand.EditRecordDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DESC_AMY \u003d new EditRecordDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .withAmount(VALID_AMOUNT_AMY).withDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DESC_BOB \u003d new EditRecordDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).withDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * - the finance tracker, filtered record list and selected record in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker expectedFinanceTracker \u003d new FinanceTracker(actualModel.getFinanceTracker());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecordList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record expectedSelectedRecord \u003d actualModel.getSelectedRecord();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            assertEquals(expectedFinanceTracker, actualModel.getFinanceTracker());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredRecordList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            assertEquals(expectedSelectedRecord, actualModel.getSelectedRecord());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the record at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void showRecordAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record record \u003d model.getFilteredRecordList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        final String[] splitName \u003d record.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(1, model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Deletes the first record in {@code model}\u0027s filtered list from {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void deleteFirstRecord(Model model) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record firstRecord \u003d model.getFilteredRecordList().get(0);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.deleteRecord(firstRecord);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.commitFinanceTracker();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 4,
      "JeremyLoye": 10,
      "Jackimaru96": 4,
      "-": 91,
      "eugeneyl": 21,
      "kjiaxuan": 21
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.showRecordAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToDelete \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToDelete \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showNoRecord(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of finance tracker list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getRecordList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToDelete \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // delete -\u003e first record deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverts financetracker back to previous state and filtered record list to show all records"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // redo -\u003e same first record deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // execution failed -\u003e finance tracker state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // single finance tracker state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 1. Deletes a {@code Record} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted record in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the record object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameRecordDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_SECOND_RECORD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToDelete \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.deleteRecord(recordToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // delete -\u003e deletes second record in unfiltered record list / first record in filtered record list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverts financetracker back to previous state and filtered record list to show all records"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertNotEquals(recordToDelete, model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // redo -\u003e deletes same second record in unfiltered record list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_RECORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void showNoRecord(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.updateFilteredRecordList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(model.getFilteredRecordList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "eugeneyl": 40,
      "kjiaxuan": 33
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/DescriptionCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.showRecordAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Contains integration tests (interaction with Model)and unit tests for DescriptionCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class DescriptionCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final String DESCRIPTION_STUB \u003d \"Some description\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void execute_addDescriptionUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record firstRecord \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(firstRecord).withDescription(new Description(DESCRIPTION_STUB)).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DescriptionCommand descriptionCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new Description(editedRecord.getDescription().value));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(DescriptionCommand.MESSAGE_ADD_DESCRIPTION_SUCCESS, editedRecord);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(firstRecord, editedRecord);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(descriptionCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void execute_removeDescriptionUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record firstRecord \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(firstRecord).withDescription(new Description(\"\")).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DescriptionCommand descriptionCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new Description(editedRecord.getDescription().value));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(DescriptionCommand.MESSAGE_REMOVE_DESCRIPTION_SUCCESS, editedRecord);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(firstRecord, editedRecord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(descriptionCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record firstRecord \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased()))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withDescription(new Description(DESCRIPTION_STUB)).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DescriptionCommand descriptionCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new Description(editedRecord.getDescription().value));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(DescriptionCommand.MESSAGE_ADD_DESCRIPTION_SUCCESS, editedRecord);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(firstRecord, editedRecord);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(descriptionCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void execute_invalidRecordIndexUnfilteredIndex_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        DescriptionCommand descriptionCommand \u003d new DescriptionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(VALID_DESCRIPTION_BOB));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandFailure(descriptionCommand, model, commandHistory,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void execute_invalidRecordIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // see if outOfBoundIndex is still smaller than max size of finance tracker list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getRecordList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        DescriptionCommand descriptionCommand \u003d new DescriptionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(VALID_DESCRIPTION_BOB));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandFailure(descriptionCommand, model, commandHistory,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToEdit \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(recordToEdit)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withDescription(new Description(DESCRIPTION_STUB)).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DescriptionCommand descriptionCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(DESCRIPTION_STUB));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(recordToEdit, editedRecord);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // description -\u003e first record description changed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        descriptionCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverts financetracker back to previous state and filtered record list to show all records"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // redo -\u003e same first record edited again"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        DescriptionCommand descriptionCommand \u003d new DescriptionCommand(outOfBoundIndex, new Description(\"\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // execution failed -\u003e finance tracker state not added into model"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandFailure(descriptionCommand, model, commandHistory,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // single finance tracker state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 1. Modifies {@code Record#description} from a filtered list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * 2. Undo the modification."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified record in the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the record object regardless of indexing."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameRecordDeleted() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DescriptionCommand remarkCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(DESCRIPTION_STUB));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_SECOND_RECORD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToModify \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record modifiedRecord \u003d new RecordBuilder(recordToModify)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withDescription(new Description(DESCRIPTION_STUB)).build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(recordToModify, modifiedRecord);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // remark -\u003e modifies second record in unfiltered record list / first record in filtered record list"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        remarkCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverts financetracker back to previous state and filtered record list to show all records"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // redo -\u003e modifies same second record in unfiltered record list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        final DescriptionCommand standardCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(VALID_DESCRIPTION_AMY));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Object with same values -\u003e returns true"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DescriptionCommand commandWithSameValues \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(VALID_DESCRIPTION_AMY));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(standardCommand.equals(new DescriptionCommand(INDEX_SECOND_RECORD,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(VALID_DESCRIPTION_AMY))));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(standardCommand.equals(new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(VALID_DESCRIPTION_BOB))));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 130,
      "eugeneyl": 49,
      "kjiaxuan": 40
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.showRecordAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.EditRecordDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(editedRecord).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(model.getFilteredRecordList().get(0), editedRecord);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index indexLastRecord \u003d Index.fromOneBased(model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record lastRecord \u003d model.getFilteredRecordList().get(indexLastRecord.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordBuilder recordInList \u003d new RecordBuilder(lastRecord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Record editedRecord \u003d recordInList.withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastRecord, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(lastRecord, editedRecord);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD, new EditCommand.EditRecordDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordInFilteredList \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(recordInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new EditRecordDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(model.getFilteredRecordList().get(0), editedRecord);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_duplicateRecordUnfilteredList_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record firstRecord \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(firstRecord).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_RECORD, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECORD_SUCCESS, firstRecord);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.setRecord(model.getFilteredRecordList().get(1), firstRecord);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_duplicateRecordFilteredList_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // edit record in filtered list into a duplicate in finance tracker"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Record recordInList \u003d model.getFinanceTracker().getRecordList().get(INDEX_SECOND_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new EditRecordDescriptorBuilder(recordInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECORD_SUCCESS, recordInList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.setRecord(model.getFilteredRecordList().get(0), recordInList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void execute_invalidRecordIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new EditRecordDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * but smaller than size of finance tracker"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void execute_invalidRecordIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of finance tracker list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFinanceTracker().getRecordList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new EditRecordDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToEdit \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(editedRecord).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(recordToEdit, editedRecord);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // edit -\u003e first record edited"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverts financetracker back to previous state and filtered record list to show all records"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // redo -\u003e same first record edited again"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new EditRecordDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // execution failed -\u003e finance tracker state not added into model"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // single finance tracker state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 1. Edits a {@code Record} from a filtered list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited record in the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the record object regardless of indexing."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameRecordEdited() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(editedRecord).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECORD, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_SECOND_RECORD);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToEdit \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(recordToEdit, editedRecord);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // edit -\u003e edits second record in unfiltered record list / first record in filtered record list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverts financetracker back to previous state and filtered record list to show all records"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertNotEquals(model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased()), recordToEdit);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // redo -\u003e edits same second record in unfiltered record list"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_RECORD, DESC_AMY);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor copyDescriptor \u003d new EditCommand.EditRecordDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_RECORD, copyDescriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_RECORD, DESC_AMY)));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_RECORD, DESC_BOB)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 1,
      "Jackimaru96": 2,
      "-": 126,
      "eugeneyl": 67,
      "kjiaxuan": 63
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/EditRecordDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand.EditRecordDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.EditRecordDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class EditRecordDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditRecordDescriptor descriptorWithSameValues \u003d new EditRecordDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditRecordDescriptor editedAmy \u003d new EditRecordDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        editedAmy \u003d new EditRecordDescriptorBuilder(DESC_AMY).withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        editedAmy \u003d new EditRecordDescriptorBuilder(DESC_AMY).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        editedAmy \u003d new EditRecordDescriptorBuilder(DESC_AMY).withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 4,
      "Jackimaru96": 1,
      "-": 34,
      "eugeneyl": 3,
      "kjiaxuan": 11
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/IncreaseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.IncreaseCommand.MESSAGE_ARGUMENTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " * Contains integration tests (interaction with Model) and unit test for IncreaseCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class IncreaseCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        final Amount amount \u003d new Amount(\"123.30\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandFailure(new IncreaseCommand(amount), model, new CommandHistory(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                String.format(MESSAGE_ARGUMENTS, amount));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final IncreaseCommand standardCommand \u003d new IncreaseCommand(new Amount(VALID_AMOUNT_AMY));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        IncreaseCommand commandWithSameValues \u003d new IncreaseCommand(new Amount(\"312.00\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(standardCommand.equals(new IncreaseCommand(new Amount(VALID_AMOUNT_BOB))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 39,
      "eugeneyl": 2,
      "kjiaxuan": 12
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.showRecordAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "eugeneyl": 1,
      "kjiaxuan": 11
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.deleteFirstRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.undoFinanceTracker();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.undoFinanceTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "eugeneyl": 4,
      "kjiaxuan": 17
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/ReverseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.showRecordAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * and unit tests for {@code ReverseCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class ReverseCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_unfilteredList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.reverseFilteredRecordList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new ReverseCommand(), model, commandHistory, ReverseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.reverseFilteredRecordList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new ReverseCommand(), model, commandHistory, ReverseCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 1. Reverses the list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 2. Undo the reversion"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 3. Redo the reversion."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void executeUndoRedo_unfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.reverseFilteredRecordList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        ReverseCommand reverseCommand \u003d new ReverseCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // reverse -\u003e list is reversed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        reverseCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverse finance tracker back to previous state"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // redo -\u003e list is reversed again"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kjiaxuan": 70
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.CAP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.EARRINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.FRUITS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void execute_zeroKeywords_noRecordsFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                + \"\\nTotal spent on searched records \u003d $ 0.0\", 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void execute_multipleKeywords_multipleRecordsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                + \"\\nTotal spent on searched records \u003d $ 47.99\" , 3);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Cap Earrings Fruits\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.updateFilteredRecordList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(Arrays.asList(CAP, EARRINGS, FRUITS), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 5,
      "-": 50,
      "eugeneyl": 21,
      "kjiaxuan": 11
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.showRecordAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_THIRD_RECORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Index lastRecordIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_RECORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertExecutionSuccess(lastRecordIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(expectedModel, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(model, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showRecordAtIndex(expectedModel, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of finance tracker list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getFinanceTracker().getRecordList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_RECORD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * and checks that the model\u0027s selected record is set to the record at {@code index} in the filtered record list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_RECORD_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setSelectedRecord(model.getFilteredRecordList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "eugeneyl": 16,
      "kjiaxuan": 22
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.CAP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.DONUT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.EARRINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.FRUITS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.GIFT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordAmountComparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordDateComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordNameComparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_sortByName_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.sortFilteredRecordList(new RecordNameComparator());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new SortCommand(new RecordNameComparator()), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, BANANA, CAP, DONUT, EARRINGS, FRUITS, GIFT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_sortByAmount_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.sortFilteredRecordList(new RecordAmountComparator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new SortCommand(new RecordAmountComparator()), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(GIFT, FRUITS, CAP, EARRINGS, BANANA, APPLE, DONUT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_sortByDate_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.sortFilteredRecordList(new RecordDateComparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new SortCommand(new RecordDateComparator()), model, commandHistory,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(GIFT, EARRINGS, CAP, APPLE, FRUITS, BANANA, DONUT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_sortByCategory_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.sortFilteredRecordList(new RecordCategoryComparator());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new SortCommand(new RecordCategoryComparator()), model, commandHistory,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(CAP, EARRINGS, FRUITS, GIFT, BANANA, DONUT, APPLE), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void executeUndoRedo_listSortedByAmount_success() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, BANANA, CAP, DONUT, EARRINGS, FRUITS, GIFT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FinanceTracker(model.getFinanceTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.sortFilteredRecordList(new RecordAmountComparator());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(new RecordAmountComparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        sortCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(GIFT, FRUITS, CAP, EARRINGS, BANANA, APPLE, DONUT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // undo -\u003e reverse finance tracker back to previous state (before sort was executed)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, BANANA, CAP, DONUT, EARRINGS, FRUITS, GIFT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // redo -\u003e list is sorted by amount again"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.redoFinanceTracker();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(GIFT, FRUITS, CAP, EARRINGS, BANANA, APPLE, DONUT), model.getFilteredRecordList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    // redo undo tests"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    // reverse"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 3,
      "eugeneyl": 3,
      "kjiaxuan": 100
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/SpendCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SpendCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_newRecord_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record validRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.addRecord(validRecord);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(new SpendCommand(validRecord), model, commandHistory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                String.format(SpendCommand.MESSAGE_SUCCESS, validRecord), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_duplicateRecord_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Record recordInList \u003d model.getFinanceTracker().getRecordList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.addRecord(recordInList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.commitFinanceTracker();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(new SpendCommand(recordInList), model, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                String.format(SpendCommand.MESSAGE_SUCCESS, recordInList), expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "eugeneyl": 5,
      "kjiaxuan": 22
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/SpendCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.CAP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.DONUT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.EARRINGS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.FRUITS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.GIFT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.exceptions.CategoryBudgetExceedTotalBudgetException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SpendCommandTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void constructor_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        new SpendCommand(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void execute_recordAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        ModelStubAcceptingRecordAdded modelStub \u003d new ModelStubAcceptingRecordAdded();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record validRecord \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        CommandResult commandResult \u003d new SpendCommand(validRecord).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(String.format(SpendCommand.MESSAGE_SUCCESS, validRecord), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(Arrays.asList(validRecord), modelStub.recordsAdded);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void execute_duplicateRecord_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Record validRecord \u003d model.getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String expectedMessage \u003d String.format(SpendCommand.MESSAGE_SUCCESS, validRecord);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        CommandResult commandResult \u003d new SpendCommand(validRecord).execute(model, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(expectedMessage, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, BANANA, CAP, DONUT, EARRINGS, FRUITS, GIFT, APPLE),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                model.getFilteredRecordList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record alice \u003d new RecordBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record bob \u003d new RecordBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SpendCommand addAliceCommand \u003d new SpendCommand(alice);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SpendCommand addBobCommand \u003d new SpendCommand(bob);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SpendCommand addAliceCommandCopy \u003d new SpendCommand(alice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public Path getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void setFinanceTrackerFilePath(Path financeTrackerFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public boolean addRecord(Record record) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public void addCategoryBudget(CategoryBudget budget) throws CategoryBudgetExceedTotalBudgetException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void setFinanceTracker(ReadOnlyFinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public void deleteRecord(Record target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public void setRecord(Record target, Record editedRecord) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        public boolean hasBudget() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public void addBudget(Budget budget) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void reverseFilteredRecordList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void sortFilteredRecordList(Comparator\u003cRecord\u003e comparator) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public ObservableList\u003cRecord\u003e getFilteredRecordList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public boolean canUndoFinanceTracker() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public boolean canRedoFinanceTracker() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void undoFinanceTracker() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void redoFinanceTracker() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void commitFinanceTracker() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public ReadOnlyProperty\u003cRecord\u003e selectedRecordProperty() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public Record getSelectedRecord() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public void setSelectedRecord(Record record) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * A Model stub that contains a single record."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private class ModelStubWithRecord extends ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        private final Record record;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        ModelStubWithRecord(Record record) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            this.record \u003d record;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return this.record.isSameRecord(record);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * A Model stub that always accept the record being added."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private class ModelStubAcceptingRecordAdded extends ModelStub {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        final ArrayList\u003cRecord\u003e recordsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public boolean hasRecord(Record record) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return recordsAdded.stream().anyMatch(record::isSameRecord);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public boolean addRecord(Record record) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            requireNonNull(record);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return recordsAdded.add(record);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public void commitFinanceTracker() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        public ReadOnlyFinanceTracker getFinanceTracker() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            return new FinanceTracker();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 13,
      "Jackimaru96": 13,
      "-": 181,
      "eugeneyl": 39,
      "kjiaxuan": 52
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/SummaryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.logic.commands.SummaryCommand.MESSAGE_NOT_IMPLEMENTED_YET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " * Contains integration tests (interaction with Model) and unit test for SummaryCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class SummaryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandFailure(new SummaryCommand(), model, new CommandHistory(), MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 25
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.deleteFirstRecord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFinanceTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteFirstRecord(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel.undoFinanceTracker();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "eugeneyl": 4,
      "kjiaxuan": 13
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/AllocateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.AllocateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class AllocateCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private AllocateCommandParser parser \u003d new AllocateCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parse_invalidFields_failure() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AllocateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, AllocateCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // no category"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, AllocateCommand.COMMAND_WORD + \" \" + PREFIX_AMOUNT + VALID_AMOUNT_AMY"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + PREFIX_CATEGORY, expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // no amount"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, AllocateCommand.COMMAND_WORD + \" \" + PREFIX_AMOUNT + \" \" + PREFIX_CATEGORY"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + VALID_CATEGORY_FRIEND, expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 32
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String argsString \u003d \"  some random string /t category with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 1,
      "-": 148,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_RECORD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "eugeneyl": 1,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/DescriptionCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DescriptionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class DescriptionCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private DescriptionCommandParser parser \u003d new DescriptionCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private final String nonEmptyDescription \u003d \"Some description.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // with remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DESCRIPTION + nonEmptyDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DescriptionCommand expectedCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new Description(nonEmptyDescription));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // with no remark"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedCommand \u003d new DescriptionCommand(INDEX_FIRST_RECORD, new Description(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DescriptionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, DescriptionCommand.COMMAND_WORD + \" \" + nonEmptyDescription, expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, DescriptionCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 32,
      "eugeneyl": 3,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_THIRD_RECORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand.EditRecordDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.EditRecordDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String CATEGORY_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_BOB + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code Record} being edited,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                            + CATEGORY_EMPTY, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        /*assertParseFailure(parser, \"1\" + CATEGORY_DESC_FRIEND + CATEGORY_EMPTY"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                            + CATEGORY_DESC_HUSBAND, Category.MESSAGE_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        /*assertParseFailure(parser, \"1\" + CATEGORY_EMPTY + CATEGORY_DESC_FRIEND"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                            + CATEGORY_DESC_HUSBAND, Category.MESSAGE_CONSTRAINTS);*/"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_AMOUNT_DESC + VALID_AMOUNT_AMY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                        + VALID_DATE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BOB + CATEGORY_DESC_HUSBAND"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + DATE_DESC_AMY + NAME_DESC_AMY + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                .withAmount(VALID_AMOUNT_BOB).withDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_FRIEND)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BOB + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECORD;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        descriptor \u003d new EditRecordDescriptorBuilder().withAmount(VALID_AMOUNT_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        descriptor \u003d new EditRecordDescriptorBuilder().withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // categories"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        descriptor \u003d new EditRecordDescriptorBuilder().withCategory(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_AMY + DATE_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_FRIEND + AMOUNT_DESC_AMY + DATE_DESC_AMY + CATEGORY_DESC_FRIEND"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_BOB + DATE_DESC_BOB + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withDate(VALID_DATE_BOB).withCategory(VALID_CATEGORY_HUSBAND)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AMOUNT_DESC + AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_BOB + INVALID_AMOUNT_DESC + AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        descriptor \u003d new EditRecordDescriptorBuilder().withAmount(VALID_AMOUNT_BOB).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // Category is a compulsory field."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parse_resetCategories_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECORD;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_EMPTY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withCategories().build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 15,
      "JeremyLoye": 21,
      "Jackimaru96": 11,
      "-": 108,
      "eugeneyl": 6,
      "kjiaxuan": 40
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/FinanceTrackerParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.COMMAND_FLAG_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.logic.commands.AllocateCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DescriptionCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.IncreaseCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ReverseCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SpendCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordNameComparator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.EditRecordDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class FinanceTrackerParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final FinanceTrackerParser parser \u003d new FinanceTrackerParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        SpendCommand command \u003d (SpendCommand) parser.parseCommand(RecordUtil.getSpendCommand(record));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new SpendCommand(record), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SpendCommand command \u003d (SpendCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                SpendCommand.COMMAND_ALIAS + \" \" + RecordUtil.getRecordDetails(record));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new SpendCommand(record), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parseCommand_allocate() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue((parser.parseCommand(AllocateCommand.COMMAND_WORD + \" \" + PREFIX_AMOUNT + \"123.00 \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + PREFIX_CATEGORY + \"Friends\") instanceof AllocateCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_clearAlias2() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS2) instanceof ClearCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS2 + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_deleteAlias2() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS2 + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parseCommand_description() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        final Description description \u003d new Description(\"Some description.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        DescriptionCommand command \u003d (DescriptionCommand) parser.parseCommand(DescriptionCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                + INDEX_FIRST_RECORD.getOneBased() + \" \" + PREFIX_DESCRIPTION + description.value);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new DescriptionCommand(INDEX_FIRST_RECORD, description), command);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_descriptionAlias() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        final Description description \u003d new Description(\"Some description.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        DescriptionCommand command \u003d (DescriptionCommand) parser.parseCommand(DescriptionCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                + INDEX_FIRST_RECORD.getOneBased() + \" \" + PREFIX_DESCRIPTION + description.value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(new DescriptionCommand(INDEX_FIRST_RECORD, description), command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(record).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                + INDEX_FIRST_RECORD.getOneBased() + \" \" + RecordUtil.getEditRecordDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_RECORD, descriptor), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        EditCommand.EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(record).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                + INDEX_FIRST_RECORD.getOneBased() + \" \" + RecordUtil.getEditRecordDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_RECORD, descriptor), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_exitAlias() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_historyAlias2() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS2) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS2 + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parseCommand_increase() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue((parser.parseCommand(IncreaseCommand.COMMAND_WORD + \" \" + PREFIX_AMOUNT + \"123\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                instanceof IncreaseCommand));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_listAlias() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_listAlias2() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS2) instanceof ListCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS2 + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_reverse() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ReverseCommand.COMMAND_WORD) instanceof ReverseCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ReverseCommand.COMMAND_WORD + \" 3\") instanceof ReverseCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_reverseAlias() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ReverseCommand.COMMAND_ALIAS) instanceof ReverseCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(ReverseCommand.COMMAND_ALIAS + \" 3\") instanceof ReverseCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_selectAlias2() throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                SelectCommand.COMMAND_ALIAS2 + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_RECORD), command);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parseCommand_search() throws Exception {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                SearchCommand.COMMAND_WORD + \" -name \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertEquals(new SearchCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void parseCommand_searchAlias() throws Exception {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        SearchCommand command \u003d (SearchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                SearchCommand.COMMAND_ALIAS + \" -name \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertEquals(new SearchCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //KIV: May want to add in alias as well"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCommand_summary() throws Exception {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(parser.parseCommand(SummaryCommand.COMMAND_WORD) instanceof SummaryCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        SortCommand command \u003d (SortCommand) parser.parseCommand("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                SortCommand.COMMAND_WORD + \" \" + COMMAND_FLAG_NAME);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(new SortCommand(new RecordNameComparator()), command);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 7,
      "Jackimaru96": 39,
      "-": 95,
      "eugeneyl": 36,
      "kjiaxuan": 136
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"$1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static final String INVALID_DATE \u003d \"1/30/5999\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"123\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static final String VALID_DATE \u003d \"12/02/2009\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String VALID_CATEGORY_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(INDEX_FIRST_RECORD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(INDEX_FIRST_RECORD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String amountWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithWhitespace));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ParserUtil.parseCategory(null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ParserUtil.parseCategory(INVALID_CATEGORY);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ParserUtil.parseCategories(null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, INVALID_CATEGORY));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void parseCategories_collectionWithValidCategories_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003cCategory\u003e(Arrays.asList(new Category(VALID_CATEGORY_1),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                                                                         new Category(VALID_CATEGORY_2)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 25,
      "JeremyLoye": 24,
      "-": 119,
      "eugeneyl": 4,
      "kjiaxuan": 10
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/SearchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.record.CategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.record.DateContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void parse_validNameArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new SearchCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Apple\", \"Banana\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"-name Apple Banana\", expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"-name \\n Apple \\n \\t Banana  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void parse_validCategoryArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new SearchCommand(new CategoryContainsKeywordsPredicate(Arrays.asList(\"Food\", \"Drinks\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"-cat Food Drinks\", expectedFindCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"-cat \\n Food \\n \\t Drinks  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void parse_validDateArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        SearchCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new SearchCommand(new DateContainsKeywordsPredicate(Arrays.asList(\"10/3/2018\", \"2/12/2017\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"-date 10/3/2018 2/12/2017\", expectedFindCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"-date \\n 10/3/2018 \\n \\t 2/12/2017  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "eugeneyl": 32,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_RECORD));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "eugeneyl": 1,
      "kjiaxuan": 6
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/SortCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordAmountComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordCategoryComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordDateComparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.logic.parser.comparator.RecordNameComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertParseFailure(parser, \" \", SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parse_validArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertParseSuccess(parser, \"-name\", new SortCommand(new RecordNameComparator()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertParseSuccess(parser, \"-amount\", new SortCommand(new RecordAmountComparator()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertParseSuccess(parser, \"-date\", new SortCommand(new RecordDateComparator()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertParseSuccess(parser, \"-cat\", new SortCommand(new RecordCategoryComparator()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parse_multipleFlags_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertParseFailure(parser, \"-name -amount\", SortCommand.MESSAGE_NOT_SORTED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertParseFailure(parser, \"-description\", SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 4,
      "kjiaxuan": 36
    }
  },
  {
    "path": "src/test/java/seedu/finance/logic/parser/SpendCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SpendCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class SpendCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private SpendCommandParser parser \u003d new SpendCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Record expectedRecord \u003d new RecordBuilder(BOB).withCategory(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_FRIEND, new SpendCommand(expectedRecord));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_FRIEND, new SpendCommand(expectedRecord));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + AMOUNT_DESC_AMY + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_FRIEND, new SpendCommand(expectedRecord));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_AMY + DATE_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_FRIEND, new SpendCommand(expectedRecord));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // multiple categories - last category accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                        + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new SpendCommand(expectedRecord));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // Category is now a compulsory field"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // zero categories"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Record expectedRecord \u003d new RecordBuilder(AMY).withCategory().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + AMOUNT_DESC_AMY + DATE_DESC_AMY,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                new SpendCommand(expectedRecord));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SpendCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + CATEGORY_DESC_FRIEND, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_AMOUNT_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + CATEGORY_DESC_FRIEND, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + AMOUNT_DESC_BOB + VALID_DATE_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + CATEGORY_DESC_FRIEND, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // missing category prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + VALID_CATEGORY_FRIEND, expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_AMOUNT_BOB + VALID_DATE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_AMOUNT_DESC + DATE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + AMOUNT_DESC_BOB + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + AMOUNT_DESC_BOB + INVALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                + DATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + AMOUNT_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                        + CATEGORY_DESC_HUSBAND + CATEGORY_DESC_FRIEND,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SpendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 11,
      "JeremyLoye": 27,
      "Jackimaru96": 21,
      "-": 32,
      "eugeneyl": 4,
      "kjiaxuan": 29
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/FinanceTrackerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class FinanceTrackerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Collections.emptyList(), financeTracker.getRecordList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void resetData_withValidReadOnlyFinanceTracker_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker newData \u003d getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(newData, financeTracker);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void resetData_withDuplicateRecords_replacesData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Two records with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record editedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_HUSBAND)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        List\u003cRecord\u003e newRecords \u003d Arrays.asList(APPLE, editedApple);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTrackerStub newData \u003d new FinanceTrackerStub(newRecords);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.resetData(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(newRecords, financeTracker.getRecordList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void hasRecord_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.hasRecord(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void hasRecord_recordNotInFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(financeTracker.hasRecord(APPLE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void hasRecord_recordInFinanceTracker_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        financeTracker.addRecord(APPLE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(financeTracker.hasRecord(APPLE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void hasRecord_recordWithSameIdentityFieldsInFinanceTracker_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        financeTracker.addRecord(APPLE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record editedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(financeTracker.hasRecord(editedApple));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void getRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.getRecordList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.addListener(listener);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        financeTracker.addRecord(APPLE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.addListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.removeListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        financeTracker.addRecord(APPLE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * A stub ReadOnlyFinanceTracker whose records list can violate interface constraints."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static class FinanceTrackerStub implements ReadOnlyFinanceTracker {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        private final ObservableList\u003cRecord\u003e records \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        private Budget budget \u003d new Budget(123.00);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTrackerStub(Collection\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            this.records.setAll(records);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        public ObservableList\u003cRecord\u003e getRecordList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            return records;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            return this.budget;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 11,
      "Jackimaru96": 9,
      "-": 83,
      "eugeneyl": 7,
      "kjiaxuan": 38
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.FinanceTrackerBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(new FinanceTracker(), new FinanceTracker(modelManager.getFinanceTracker()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(null, modelManager.getSelectedRecord());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"finance/tracker/file/path\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"new/finance/tracker/file/path\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setFinanceTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        modelManager.setFinanceTrackerFilePath(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setFinanceTrackerFilePath_validPath_setsFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Path path \u003d Paths.get(\"finance/tracker/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        modelManager.setFinanceTrackerFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(path, modelManager.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void hasRecordn_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        modelManager.hasRecord(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void hasRecord_recordNotInFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(modelManager.hasRecord(APPLE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void hasRecord_recordInFinanceTracker_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.addRecord(APPLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(modelManager.hasRecord(APPLE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void deleteRecord_recordIsSelectedAndFirstRecordInFilteredRecordList_selectionCleared() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.addRecord(APPLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.setSelectedRecord(APPLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.deleteRecord(APPLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(null, modelManager.getSelectedRecord());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void deleteRecord_recordIsSelectedAndSecondRecordInFilteredRecordList_firstRecordSelected() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.addRecord(APPLE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        modelManager.addRecord(BOB);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, BOB), modelManager.getFilteredRecordList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        modelManager.setSelectedRecord(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        modelManager.deleteRecord(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(APPLE, modelManager.getSelectedRecord());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord_recordIsSelected_selectedRecordUpdated() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.addRecord(APPLE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.setSelectedRecord(APPLE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record updatedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.setRecord(APPLE, updatedApple);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(updatedApple, modelManager.getSelectedRecord());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void getFilteredRecordList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        modelManager.getFilteredRecordList().remove(0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setSelectedRecord_recordNotInFilteredRecordList_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(RecordNotFoundException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.setSelectedRecord(APPLE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setSelectedRecord_recordInFilteredRecordList_setsSelectedRecord() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.addRecord(APPLE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(Collections.singletonList(APPLE), modelManager.getFilteredRecordList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        modelManager.setSelectedRecord(APPLE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(APPLE, modelManager.getSelectedRecord());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        FinanceTracker financeTracker \u003d new FinanceTrackerBuilder().withRecord(APPLE).withRecord(BANANA).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker differentFinanceTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        modelManager \u003d new ModelManager(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(financeTracker, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // different financeTracker -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFinanceTracker, userPrefs)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String[] keywords \u003d APPLE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        modelManager.updateFilteredRecordList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        modelManager.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        differentUserPrefs.setFinanceTrackerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(financeTracker, differentUserPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 23,
      "-": 119,
      "eugeneyl": 17,
      "kjiaxuan": 29
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setFinanceTrackerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setFinanceTrackerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/VersionedFinanceTrackerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.CAP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.FinanceTrackerBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class VersionedFinanceTrackerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final ReadOnlyFinanceTracker financeTrackerWithAmy \u003d new FinanceTrackerBuilder().withRecord(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final ReadOnlyFinanceTracker financeTrackerWithBob \u003d new FinanceTrackerBuilder().withRecord(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private final ReadOnlyFinanceTracker financeTrackerWithCarl \u003d new FinanceTrackerBuilder().withRecord(CAP).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final ReadOnlyFinanceTracker emptyFinanceTracker \u003d new FinanceTrackerBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void commit_singleFinanceTracker_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void commit_multipleFinanceTrackerPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Arrays.asList(emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                financeTrackerWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void commit_multipleFinanceTrackerPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canUndo_multipleFinanceTrackerPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canUndo_multipleFinanceTrackerPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canUndo_singleFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canUndo_multipleFinanceTrackerPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canRedo_multipleFinanceTrackerPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canRedo_multipleFinanceTrackerPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canRedo_singleFinanceTracker_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void canRedo_multipleFinanceTrackerPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void undo_multipleFinanceTrackerPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                financeTrackerWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Collections.singletonList(financeTrackerWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void undo_multipleFinanceTrackerPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Arrays.asList(financeTrackerWithAmy, financeTrackerWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void undo_singleFinanceTracker_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoUndoableStateException.class, versionedFinanceTracker::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void undo_multipleFinanceTrackerPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoUndoableStateException.class, versionedFinanceTracker::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void redo_multipleFinanceTrackerPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Arrays.asList(emptyFinanceTracker, financeTrackerWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                financeTrackerWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void redo_multipleFinanceTrackerPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFinanceTrackerListStatus(versionedFinanceTracker,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Collections.singletonList(emptyFinanceTracker),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                financeTrackerWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                Collections.singletonList(financeTrackerWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void redo_singleFinanceTracker_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList(emptyFinanceTracker);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoRedoableStateException.class, versionedFinanceTracker::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void redo_multipleFinanceTrackerPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                emptyFinanceTracker, financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertThrows(VersionedFinanceTracker.NoRedoableStateException.class, versionedFinanceTracker::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker copy \u003d prepareFinanceTrackerList(financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(versionedFinanceTracker.equals(copy));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(versionedFinanceTracker.equals(versionedFinanceTracker));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(null));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(1));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker differentFinanceTrackerList \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                financeTrackerWithBob, financeTrackerWithCarl);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(differentFinanceTrackerList));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker differentCurrentStatePointer \u003d prepareFinanceTrackerList("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                financeTrackerWithAmy, financeTrackerWithBob);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedFinanceTracker, 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Asserts that {@code versionedFinanceTracker} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * states before {@code versionedFinanceTracker#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * and states after {@code versionedFinanceTracker#currentStatePointer} is equal to"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private void assertFinanceTrackerListStatus(VersionedFinanceTracker versionedFinanceTracker,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                                                List\u003cReadOnlyFinanceTracker\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                                                ReadOnlyFinanceTracker expectedCurrentState,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                                                List\u003cReadOnlyFinanceTracker\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(new FinanceTracker(versionedFinanceTracker), expectedCurrentState);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        while (versionedFinanceTracker.canUndo()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        for (ReadOnlyFinanceTracker expectedFinanceTracker : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            assertEquals(expectedFinanceTracker, new FinanceTracker(versionedFinanceTracker));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        for (ReadOnlyFinanceTracker expectedFinanceTracker : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            versionedFinanceTracker.redo();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            assertEquals(expectedFinanceTracker, new FinanceTracker(versionedFinanceTracker));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(versionedFinanceTracker.canRedo());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedFinanceTracker.undo());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Creates and returns a {@code VersionedFinanceTracker} with the"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code financeTrackerStates} added into it, and the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code VersionedFinanceTracker#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private VersionedFinanceTracker prepareFinanceTrackerList(ReadOnlyFinanceTracker... financeTrackerStates) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(financeTrackerStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        VersionedFinanceTracker versionedFinanceTracker \u003d new VersionedFinanceTracker(financeTrackerStates[0]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        for (int i \u003d 1; i \u003c financeTrackerStates.length; i++) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            versionedFinanceTracker.resetData(financeTrackerStates[i]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            versionedFinanceTracker.commit();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return versionedFinanceTracker;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Shifts the {@code versionedFinanceTracker#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedFinanceTracker versionedFinanceTracker, int count) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            versionedFinanceTracker.undo();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 2,
      "-": 138,
      "kjiaxuan": 163
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/category/CategoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // null category name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Category.isValidCategoryName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 6,
      "-": 16,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/AmountTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String invalidAmount \u003d \"$1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // invalid amounts"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"123.3435\")); //2 dp only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // valid amounts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"123\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"123.20\")); // 2 dp only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"2147483648.50\")); // long amount"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 28,
      "eugeneyl": 6,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/CategoryContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class CategoryContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        CategoryContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new CategoryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        CategoryContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new CategoryContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        CategoryContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new CategoryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void test_categoryContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new CategoryContainsKeywordsPredicate(Collections.singletonList(\"food\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withCategory(\"food\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"food\", \"transport\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withCategory(\"food\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"fOoD\", \"TrAnsPort\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withCategory(\"food\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void test_categoryDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        CategoryContainsKeywordsPredicate predicate \u003d new CategoryContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withCategory(\"food\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"games\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withCategory(\"food\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Keywords match phone, email and finance, but does not match category"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new CategoryContainsKeywordsPredicate(Arrays.asList(\"12345\", \"27/08/2014\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withCategory(\"food\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .withDate(\"27/08/2014\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 75
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/DateContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class DateContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1/1/2001\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"1/1/2001\", \"2/2/2002\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicate \u003d new DateContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DateContainsKeywordsPredicate secondPredicate \u003d new DateContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DateContainsKeywordsPredicate firstPredicateCopy \u003d new DateContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void test_dateContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // One date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new DateContainsKeywordsPredicate(Collections.singletonList(\"01/01/2001\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withDate(\"01/01/2001\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Only one matching date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new DateContainsKeywordsPredicate(Arrays.asList(\"01/01/2001\", \"02/02/2002\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withDate(\"01/01/2001\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void test_dateDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        DateContainsKeywordsPredicate predicate \u003d new DateContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withDate(\"01/01/2001\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new DateContainsKeywordsPredicate(Arrays.asList(\"11/01/2001\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withDate(\"01/01/2001\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // Keywords match name, amount and category, but does not match date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new DateContainsKeywordsPredicate(Arrays.asList(\"Banana\", \"3\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withName(\"Banana\").withAmount(\"3\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .withCategory(\"Food\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugeneyl": 69
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String test \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(test));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        String invalidDate \u003d \"1/22/3\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/20/\")); // missing year"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\"30/2009\")); // missing day"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\"30/2008\")); // missing month"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\"99/01/2008\")); // invalid date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\"03/30/2008\")); // invalid month"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertFalse(Date.isValidDate(\"30-03-2009\")); // dashes instead of backslash"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertTrue(Date.isValidDate(\"30/03/2009\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 39,
      "eugeneyl": 2,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Description description \u003d new Description(\"description\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Description object with same values -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Description test \u003d new Description(description.value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(description.equals(test));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertTrue(description.equals(description));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // Different types -\u003e return false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(description.equals(2));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(description.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Description test2 \u003d new Description(\"other description\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertFalse(description.equals(test2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 30,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(predicate.test(new RecordBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // Keywords match phone, email and finance, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"27/08/2014\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(predicate.test(new RecordBuilder().withName(\"Alice\").withAmount(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                .withDate(\"27/08/2014\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 1,
      "-": 62,
      "eugeneyl": 9,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/RecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        record.getCategories().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void isSameRecord() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(APPLE.isSameRecord(APPLE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.isSameRecord(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // different amount and date -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record editedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.isSameRecord(editedApple));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        editedApple \u003d new RecordBuilder(APPLE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.isSameRecord(editedApple));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // same name, same amount, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        editedApple \u003d new RecordBuilder(APPLE).withDate(VALID_DATE_BOB).withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(APPLE.isSameRecord(editedApple));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // same name, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        editedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB).withCategory(VALID_CATEGORY_HUSBAND)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(APPLE.isSameRecord(editedApple));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record appleopy \u003d new RecordBuilder(APPLE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(APPLE.equals(appleopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record editedApple \u003d new RecordBuilder(APPLE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        editedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        editedApple \u003d new RecordBuilder(APPLE).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        editedApple \u003d new RecordBuilder(APPLE).withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 24,
      "JeremyLoye": 5,
      "Jackimaru96": 5,
      "-": 43,
      "eugeneyl": 3,
      "kjiaxuan": 10
    }
  },
  {
    "path": "src/test/java/seedu/finance/model/record/UniqueRecordListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.model.record;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.exceptions.RecordNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class UniqueRecordListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final UniqueRecordList uniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void contains_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void contains_recordNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(uniqueRecordList.contains(APPLE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void contains_recordInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(uniqueRecordList.contains(APPLE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void contains_recordWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record editedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertTrue(uniqueRecordList.contains(editedApple));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void add_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void add_duplicateRecord_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, APPLE), uniqueRecordList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord_nullTargetRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.setRecord(null, APPLE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord_nullEditedRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.setRecord(APPLE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord_targetRecordNotInList_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(RecordNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.setRecord(APPLE, APPLE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord_editedRecordIsSameRecord_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.setRecord(APPLE, APPLE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        expectedUniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord_editedRecordHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        Record editedApple \u003d new RecordBuilder(APPLE).withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .withCategory(VALID_CATEGORY_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.setRecord(APPLE, editedApple);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        expectedUniqueRecordList.add(editedApple);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecord_editedRecordHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.setRecord(APPLE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedUniqueRecordList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setRecord_editedRecordHasNonUniqueIdentity_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.setRecord(APPLE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(BOB, BOB), uniqueRecordList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void remove_nullRecord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void remove_recordDoesNotExist_throwsRecordNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(RecordNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.remove(APPLE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void remove_existingRecord_removesRecord() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.remove(APPLE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecords_nullUniqueRecordList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.setRecords((UniqueRecordList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecords_uniqueRecordList_replacesOwnListWithProvidedUniqueRecordList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedUniqueRecordList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.setRecords(expectedUniqueRecordList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecords_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.setRecords((List\u003cRecord\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void setRecords_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uniqueRecordList.add(APPLE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        List\u003cRecord\u003e recordList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.setRecords(recordList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        UniqueRecordList expectedUniqueRecordList \u003d new UniqueRecordList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedUniqueRecordList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedUniqueRecordList, uniqueRecordList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void setRecords_listWithDuplicateRecords_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        List\u003cRecord\u003e listWithDuplicateRecords \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.setRecords(listWithDuplicateRecords);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(Arrays.asList(APPLE, APPLE), uniqueRecordList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uniqueRecordList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 29,
      "Jackimaru96": 2,
      "eugeneyl": 142,
      "kjiaxuan": 16
    }
  },
  {
    "path": "src/test/java/seedu/finance/storage/JsonAdaptedRecordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.storage.JsonAdaptedRecord.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class JsonAdaptedRecordTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"$1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private static final String INVALID_DATE \u003d \"59/59/2109\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String VALID_NAME \u003d BANANA.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String VALID_AMOUNT \u003d BANANA.getAmount().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String VALID_DATE \u003d BANANA.getDate().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BANANA.getDescription().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static final JsonAdaptedCategory VALID_CATEGORIES \u003d new JsonAdaptedCategory(BANANA.getCategory());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void toModelType_validRecordDetails_returnsRecord() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(BANANA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(BANANA, record.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        JsonAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                new JsonAdaptedRecord(INVALID_NAME, VALID_AMOUNT, VALID_DATE, VALID_DESCRIPTION, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(null, VALID_AMOUNT, VALID_DATE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                VALID_DESCRIPTION, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        JsonAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                new JsonAdaptedRecord(VALID_NAME, INVALID_AMOUNT, VALID_DATE, VALID_DESCRIPTION, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(VALID_NAME, null, VALID_DATE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                VALID_DESCRIPTION, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        JsonAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                new JsonAdaptedRecord(VALID_NAME, VALID_AMOUNT, INVALID_DATE, VALID_DESCRIPTION, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        JsonAdaptedRecord record \u003d new JsonAdaptedRecord(VALID_NAME, VALID_AMOUNT, null,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                VALID_DESCRIPTION, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, record::toModelType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        JsonAdaptedCategory invalidCategory \u003d new JsonAdaptedCategory(INVALID_CATEGORY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        JsonAdaptedRecord record \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                new JsonAdaptedRecord(VALID_NAME, VALID_AMOUNT, VALID_DATE, VALID_DESCRIPTION, invalidCategory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, record::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 14,
      "JeremyLoye": 24,
      "Jackimaru96": 5,
      "-": 26,
      "eugeneyl": 14,
      "kjiaxuan": 7
    }
  },
  {
    "path": "src/test/java/seedu/finance/storage/JsonFinanceTrackerStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.HAMBURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.IPHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class JsonFinanceTrackerStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFinanceTrackerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void readFinanceTracker_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        readFinanceTracker(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFinanceTracker\u003e readFinanceTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return new JsonFinanceTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                .readFinanceTracker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertFalse(readFinanceTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        readFinanceTracker(\"notJsonFormatFinanceTracker.json\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void readFinanceTracker_invalidRecordFinanceTracker_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        readFinanceTracker(\"invalidRecordFinanceTracker.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void readFinanceTracker_invalidAndValidRecordFinanceTracker_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        readFinanceTracker(\"invalidAndValidRecordFinanceTracker.json\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void readAndSaveFinanceTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempFinanceTracker.json\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker original \u003d getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonFinanceTrackerStorage jsonFinanceTrackerStorage \u003d new JsonFinanceTrackerStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        ReadOnlyFinanceTracker readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        original.addRecord(HAMBURGER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        original.removeRecord(APPLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        original.addRecord(IPHONE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        jsonFinanceTrackerStorage.saveFinanceTracker(original); // file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        readBack \u003d jsonFinanceTrackerStorage.readFinanceTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(original, new FinanceTracker(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void saveFinanceTracker_nullFinanceTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        saveFinanceTracker(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Saves {@code financeTracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private void saveFinanceTracker(ReadOnlyFinanceTracker financeTracker, String filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            new JsonFinanceTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                    .saveFinanceTracker(financeTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void saveFinanceTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        saveFinanceTracker(new FinanceTracker(), null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 6,
      "Jackimaru96": 3,
      "-": 78,
      "kjiaxuan": 39
    }
  },
  {
    "path": "src/test/java/seedu/finance/storage/JsonSerializableFinanceTrackerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class JsonSerializableFinanceTrackerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFinanceTrackerTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final Path TYPICAL_RECORDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecordsFinanceTracker.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final Path INVALID_RECORD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecordFinanceTracker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final Path DUPLICATE_RECORD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecordFinanceTracker.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // NULL POINTER EXCEPTION"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void toModelType_typicalRecordsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonSerializableFinanceTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECORDS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                JsonSerializableFinanceTracker.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker financeTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker typicalRecordsFinanceTracker \u003d TypicalRecords.getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(financeTrackerFromFile, typicalRecordsFinanceTracker);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void toModelType_invalidRecordFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonSerializableFinanceTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECORD_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                JsonSerializableFinanceTracker.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // NULL POINTER EXCEPTION"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void toModelType_duplicateRecords_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonSerializableFinanceTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECORD_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                JsonSerializableFinanceTracker.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        thrown.expectMessage(JsonSerializableFinanceTracker.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 8,
      "-": 26,
      "eugeneyl": 3,
      "kjiaxuan": 18
    }
  },
  {
    "path": "src/test/java/seedu/finance/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        userPrefs.setFinanceTrackerFilePath(Paths.get(\"financetracker.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 130,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/test/java/seedu/finance/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalFinanceTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonFinanceTrackerStorage financeTrackerStorage \u003d new JsonFinanceTrackerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        storageManager \u003d new StorageManager(financeTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void financeTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "         * {@link JsonFinanceTrackerStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFinanceTrackerStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker original \u003d getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        storageManager.saveFinanceTracker(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        ReadOnlyFinanceTracker retrieved \u003d storageManager.readFinanceTracker().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(original, new FinanceTracker(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void getFinanceTrackerFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertNotNull(storageManager.getFinanceTrackerFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "kjiaxuan": 17
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/EditRecordDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * A utility class to help with building EditRecordDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class EditRecordDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private EditCommand.EditRecordDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditRecordDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor \u003d new EditCommand.EditRecordDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditRecordDescriptorBuilder(EditCommand.EditRecordDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditRecordDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns an {@code EditRecordDescriptor} with fields containing {@code record}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditRecordDescriptorBuilder(Record record) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor \u003d new EditCommand.EditRecordDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor.setName(record.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor.setAmount(record.getAmount());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor.setDate(record.getDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        descriptor.setCategory(record.getCategory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRecordDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditRecordDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditRecordDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditRecordDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Sets the {@code Date} of the {@code EditRecordDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditRecordDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code EditRecordDescriptor}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public EditRecordDescriptorBuilder withCategory(String categoryName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category category \u003d new Category(categoryName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        descriptor.setCategory(category);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public EditCommand.EditRecordDescriptor build() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 1,
      "Jackimaru96": 4,
      "eugeneyl": 59,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/FinanceTrackerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A utility class to help with building FinanceTracker objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " *     {@code FinanceTracker ab \u003d new FinanceTrackerBuilder().withRecord(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class FinanceTrackerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private FinanceTracker financeTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTrackerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTrackerBuilder(FinanceTracker financeTracker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        this.financeTracker \u003d financeTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Adds a new {@code Record} to the {@code FinanceTracker} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTrackerBuilder withRecord(Record record) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        financeTracker.addRecord(record);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public FinanceTracker build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return financeTracker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kjiaxuan": 34
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/RecordBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * A utility class to help with building Record objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"12\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"12/12/2019\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"friend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Initializes the RecordBuilder with the data of {@code recordToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param recordToCopy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordBuilder(Record recordToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        name \u003d recordToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        amount \u003d recordToCopy.getAmount();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        date \u003d recordToCopy.getDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        description \u003d recordToCopy.getDescription();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        category \u003d recordToCopy.getCategory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Sets the {@code Name} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Parses the {@code category} into a {@code Category} and set it to the {@code Record} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public RecordBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.category \u003d SampleDataUtil.getCategory(category);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Sets the {@code Amount} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Sets the {@code Date} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordBuilder withDate(String date) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Sets the {@code Description} of the {@code Record} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordBuilder withDescription(Description description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        this.description \u003d new Description(description.value);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Creates a {@code Record} based on the variables specified."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @return Record with fields specified by Class"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public Record build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return new Record(name, amount, date, description, category);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 19,
      "Jackimaru96": 17,
      "-": 30,
      "eugeneyl": 21,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/RecordUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand.EditRecordDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SpendCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * A utility class for Record."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns an add command string for adding the {@code record}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static String getSpendCommand(Record record) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return SpendCommand.COMMAND_WORD + \" \" + getRecordDetails(record);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the part of command string for the given {@code record}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @param record"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static String getRecordDetails(Record record) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        sb.append(PREFIX_NAME + record.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        sb.append(PREFIX_AMOUNT + record.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        sb.append(PREFIX_DATE + record.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        sb.append(PREFIX_CATEGORY + record.getCategory().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the part of command string for the given {@code EditRecordDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static String getEditRecordDescriptorDetails(EditRecordDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.toString()).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e sb.append(PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                .append(category.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremyLoye": 3,
      "Jackimaru96": 6,
      "-": 22,
      "eugeneyl": 11,
      "kjiaxuan": 10
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the middle index of the record in the {@code model}\u0027s record list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecordList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the last index of the record in the {@code model}\u0027s record list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns the record in the {@code model}\u0027s record list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static Record getRecord(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return model.getFilteredRecordList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "eugeneyl": 7,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final Index INDEX_FIRST_RECORD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static final Index INDEX_SECOND_RECORD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static final Index INDEX_THIRD_RECORD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "eugeneyl": 2,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/testutil/TypicalRecords.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.TotalBudget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": " * A utility class containing a list of {@code Record} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class TypicalRecords {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record APPLE \u003d new RecordBuilder().withName(\"Apple\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withAmount(\"1.00\").withDate(\"12/02/2017\").withDescription(new Description(\"\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withCategory(\"groceries\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record BANANA \u003d new RecordBuilder().withName(\"Banana Donut\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withAmount(\"2.50\").withDate(\"12/02/2015\").withDescription(new Description(\"\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withCategory(\"food\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record CAP \u003d new RecordBuilder().withName(\"Cap\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withAmount(\"15.00\").withDate(\"12/05/2017\").withDescription(new Description(\"\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withCategory(\"clothes\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record DONUT \u003d new RecordBuilder().withName(\"Chocolate Donut\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withAmount(\"0.90\").withDate(\"12/02/2007\").withDescription(new Description(\"\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withCategory(\"food\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record EARRINGS \u003d new RecordBuilder().withName(\"Earrings\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withAmount(\"12.99\").withDate(\"12/12/2017\").withDescription(new Description(\"\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withCategory(\"accessories\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record FRUITS \u003d new RecordBuilder().withName(\"Fruits\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withAmount(\"20.00\").withDate(\"02/02/2017\").withDescription(new Description(\"\"))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withCategory(\"food\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record GIFT \u003d new RecordBuilder().withName(\"Gift\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withAmount(\"24.90\").withDate(\"12/02/2027\").withDescription(new Description(\"\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withCategory(\"gift\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record HAMBURGER \u003d new RecordBuilder().withName(\"Hamburger\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            .withAmount(\"5.00\").withDate(\"12/07/2017\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final Record IPHONE \u003d new RecordBuilder().withName(\"Iphone Charger\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            .withAmount(\"11.99\").withDate(\"12/01/2017\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    // Manually added - Record\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final Record AMY \u003d new RecordBuilder().withName(VALID_NAME_AMY).withAmount(VALID_AMOUNT_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withDate(VALID_DATE_AMY).withCategory(VALID_CATEGORY_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "    public static final Record BOB \u003d new RecordBuilder().withName(VALID_NAME_BOB).withAmount(VALID_AMOUNT_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            .withDate(VALID_DATE_BOB).withCategory(VALID_CATEGORY_HUSBAND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public static final String KEYWORD_MATCHING_DONUT \u003d \"Donut\"; // A keyword that matches DONUT"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private TypicalRecords() {} // prevents instantiation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Returns an {@code FinanceTracker} with all the typical records."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public static FinanceTracker getTypicalFinanceTracker() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        FinanceTracker ft \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        ft.addBudget(new TotalBudget(500.00));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        for (Record record : getTypicalRecords()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            ft.addRecord(record);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return ft;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     * Returns an {@code FinanceTracker} with all the typical records."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    public static FinanceTracker getTypicalFinanceTrackerWithBudget() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        FinanceTracker ft \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        ft.addBudget(new TotalBudget(500.00));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        for (Record record : getTypicalRecords()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            ft.addRecord(record);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        return ft;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static List\u003cRecord\u003e getTypicalRecords() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BANANA, CAP, DONUT, EARRINGS, FRUITS, GIFT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 11,
      "JeremyLoye": 3,
      "Jackimaru96": 33,
      "-": 23,
      "eugeneyl": 8,
      "kjiaxuan": 16
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.budget.TotalBudget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private SimpleObjectProperty\u003cRecord\u003e selectedRecord \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private Budget budgetData \u003d new TotalBudget();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(selectedRecord, budgetData));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // associated web page of a record"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        guiRobot.interact(() -\u003e selectedRecord.set(APPLE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        URL expectedRecordUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + APPLE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(expectedRecordUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 2,
      "JeremyLoye": 1,
      "Jackimaru96": 6,
      "-": 22,
      "eugeneyl": 1,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 155,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/GraphPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.ui.GraphPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import guitests.guihandles.GraphPanelHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import seedu.finance.commons.events.ShowGraphRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "public class GraphPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private ShowGraphRequestEvent graphRequestEventStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private GraphPanel graphPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private GraphPanelHandle graphPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ArrayList\u003cInteger\u003e integerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        integerList.add(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        integerList.add(3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        graphRequestEventStub \u003d new ShowGraphRequestEvent(integerList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        guiRobot.interact(() -\u003e graphPanel \u003d new GraphPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        uiPartRule.setUiPart(graphPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        graphPanelHandle \u003d new GraphPanelHandle(graphPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        URL expectedDefaultPageUrl \u003d new URL(DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, graphPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(GraphPanel.SEARCH_PAGE_URL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        waitUntilBrowserLoaded(graphPanelHandle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertEquals(expectedPersonUrl, graphPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 48
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A GUI unit test class for FinanceTracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 174,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.JsonFinanceTrackerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        JsonFinanceTrackerStorage jsonFinanceTrackerStorage \u003d new JsonFinanceTrackerStorage("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonFinanceTrackerStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 90,
      "kjiaxuan": 9
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/RecordCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        // The record must all have a tag to it (category)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordWithTags \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        RecordCard recordCard \u003d new RecordCard(recordWithTags, 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uiPartRule.setUiPart(recordCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCardDisplay(recordCard, recordWithTags, 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record record \u003d new RecordBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordCard recordCard \u003d new RecordCard(record, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // same record, same index -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordCard copy \u003d new RecordCard(record, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(recordCard.equals(copy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(recordCard.equals(recordCard));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(recordCard.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(recordCard.equals(0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // different record, same index -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record differentRecord \u003d new RecordBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(recordCard.equals(new RecordCard(differentRecord, 0)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // same record, different index -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(recordCard.equals(new RecordCard(record, 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Asserts that {@code recordCard} displays the details of {@code expectedRecord} correctly and matches"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void assertCardDisplay(RecordCard recordCard, Record expectedRecord, int expectedId) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordCardHandle recordCardHandle \u003d new RecordCardHandle(recordCard.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", recordCardHandle.getId());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // verify record details are displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCardDisplaysRecord(expectedRecord, recordCardHandle);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 9,
      "eugeneyl": 57,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/RecordListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.getTypicalRecords;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import guitests.guihandles.RecordListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "public class RecordListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private static final ObservableList\u003cRecord\u003eTYPICAL_RECORDS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            FXCollections.observableList(getTypicalRecords());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private final SimpleObjectProperty\u003cRecord\u003e selectedRecord \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private RecordListPanelHandle recordListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        initUi(TYPICAL_RECORDS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_RECORDS.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            recordListPanelHandle.navigateToCard(TYPICAL_RECORDS.get(i));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            Record expectedRecord \u003d TYPICAL_RECORDS.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            RecordCardHandle actualCard \u003d recordListPanelHandle.getRecordCardHandle(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            assertCardDisplaysRecord(expectedRecord, actualCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    // TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void selection_modelSelectedRecordChanged_selectionChanges() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        initUi(TYPICAL_RECORDS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record secondRecord \u003d TYPICAL_RECORDS.get(INDEX_SECOND_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        guiRobot.interact(() -\u003e selectedRecord.set(secondRecord));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordCardHandle expectedRecord \u003d recordListPanelHandle.getRecordCardHandle(INDEX_SECOND_RECORD.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordCardHandle selectedRecord \u003d recordListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCardEquals(expectedRecord, selectedRecord);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Verifies that creating and deleting large number of records in {@code RecordListPanel} requires lesser than"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        ObservableList\u003cRecord\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }, \"Creation and deletion of record cards exceeded time limit\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns a list of records containing {@code recordCount} records that is used to populate the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@code RecordListPanel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private ObservableList\u003cRecord\u003e createBackingList(int recordCount) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        ObservableList\u003cRecord\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        for (int i \u003d 0; i \u003c recordCount; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            Amount amount \u003d new Amount(\"123\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            Date date \u003d new Date(\"12/12/2018\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            Description description \u003d new Description (\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "            Record record \u003d new Record(name, amount, date, description, new Category(\"food\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            backingList.add(record);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Initializes {@code recordListPanelHandle} with a {@code RecordListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code RecordListPanel}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void initUi(ObservableList\u003cRecord\u003e backingList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        RecordListPanel recordListPanel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                new RecordListPanel(backingList, selectedRecord, selectedRecord::set);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        uiPartRule.setUiPart(recordListPanel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        recordListPanelHandle \u003d new RecordListPanelHandle(getChildNode(recordListPanel.getRoot(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                RecordListPanelHandle.RECORD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 8,
      "eugeneyl": 87,
      "kjiaxuan": 7
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e resultDisplay.setFeedbackToUser(\"Dummy feedback to user\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"Dummy feedback to user\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private final FinanceTracker financeTracker \u003d new FinanceTracker();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, financeTracker);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        // after finance tracker is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        guiRobot.interact(() -\u003e financeTracker.addRecord(APPLE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 2,
      "-": 66,
      "kjiaxuan": 7
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/UiPartTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.getRoot().toURI().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFilePathInView + \" does not exist.\", testFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "kjiaxuan": 3
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import guitests.guihandles.RecordCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import guitests.guihandles.RecordListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void assertCardEquals(RecordCardHandle expectedCard, RecordCardHandle actualCard) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertEquals(expectedCard.getAmount(), actualCard.getAmount());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertEquals(expectedCard.getDate(), actualCard.getDate());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertEquals(expectedCard.getCategory(), actualCard.getCategory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedRecord}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void assertCardDisplaysRecord(Record expectedRecord, RecordCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedRecord.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertEquals(\"$\" + expectedRecord.getAmount().toString(), actualCard.getAmount());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(expectedRecord.getDate().toString(), actualCard.getDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedRecord.getDescription().value, actualCard.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCategoryEqual(expectedRecord, actualCard);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Returns the color style for {@code categoryName}\u0027s label."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * The category\u0027s color is determined by looking up the color in {@code RecordCard#CATEGORY_COLOR_STYLES},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * using an index generated by the hash code of the category\u0027s content."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author geezlouisee-reused"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    //Reused from https://github.com/se-edu/addressbook-level4/pull/798/commits/1ac2e7c5597cf328cc9c28d5d8e18db8dc1fc5a0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    // with minor modifications"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    private static String getCategoryColorStyleFor(String categoryName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        switch (categoryName.toLowerCase()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"clothing\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"food\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"transportation\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"dining\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"pink\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"entertainment\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"tan\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"black\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"groceries\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"textbooks\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"turquoise\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        case \"shopping\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"vices\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"purple\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        case \"movies\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            return \"blue\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "            throw new AssertionError(categoryName + \" does not have a color assigned.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * Asserts that the categories in {@code actualCard} matches all the categories in {@code expectedRecord}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     * with the correct color."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    private static void assertCategoryEqual(Record expectedRecord, RecordCardHandle actualCard) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category expectedCategory \u003d expectedRecord.getCategory();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        String actualCategory \u003d actualCard.getCategory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertEquals(expectedCategory, actualCard.getCategory());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertEquals(getCategoryColorStyleFor(expectedCategory.toString()), getCategoryColorStyleFor(actualCategory));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Asserts that the list in {@code recordListPanelHandle} displays the details of {@code records} correctly and"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void assertListMatching(RecordListPanelHandle recordListPanelHandle, Record... records) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        for (int i \u003d 0; i \u003c records.length; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            recordListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "            assertCardDisplaysRecord(records[i], recordListPanelHandle.getRecordCardHandle(i));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Asserts that the list in {@code recordListPanelHandle} displays the details of {@code records} correctly and"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void assertListMatching(RecordListPanelHandle recordListPanelHandle, List\u003cRecord\u003e records) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertListMatching(recordListPanelHandle, records.toArray(new Record[0]));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Asserts the size of the list in {@code recordListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void assertListSize(RecordListPanelHandle recordListPanelHandle, int size) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        int numberOfPeople \u003d recordListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 61,
      "JeremyLoye": 4,
      "Jackimaru96": 9,
      "-": 47,
      "eugeneyl": 18,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/seedu/finance/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "package seedu.finance.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "kjiaxuan": 2
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class ClearCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: clear non-empty finance tracker, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: undo clearing finance tracker -\u003e original finance tracker restored *//*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: redo clearing finance tracker -\u003e cleared *//*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: selects first card in record list and clears finance tracker -\u003e cleared and no card selected *//*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original finance tracker"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectRecord(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: filters the record list before clearing -\u003e entire finance tracker cleared *//*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original finance tracker"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        showRecordsWithName(KEYWORD_MATCHING_DONUT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: clear empty finance tracker -\u003e cleared *//*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: mixed case command word -\u003e cleared *//*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(\"ClEaR\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 2,
      "Jackimaru96": 33,
      "-": 72,
      "eugeneyl": 1,
      "kjiaxuan": 15
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 9,
      "-": 54,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.DeleteCommand.MESSAGE_DELETE_RECORD_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TestUtil.getRecord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class DeleteCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- *//*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: delete the first record in the list, command with leading spaces and trailing spaces -\u003e deleted *//*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_RECORD.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record deletedRecord \u003d removeRecord(expectedModel, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_RECORD_SUCCESS, deletedRecord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: delete the last record in the list -\u003e deleted *//*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index lastRecordIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(lastRecordIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: undo deleting the last record in the list -\u003e last record restored *//*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: redo deleting the last record in the list -\u003e last record deleted again *//*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        removeRecord(modelBeforeDeletingLast, lastRecordIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: delete the middle record in the list -\u003e deleted *//*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index middleRecordIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(middleRecordIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: mixed case command word -\u003e deleted *//*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        deletedRecord \u003d removeRecord(expectedModel, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_RECORD_SUCCESS, deletedRecord);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(\"DelETE 1\", expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ------------------ Performing delete operation while a filtered list is being shown ---------------------- *//*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: filtered record list, delete index within bounds of finance tracker and record list -\u003e deleted *//*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        showRecordsWithName(KEYWORD_MATCHING_DONUT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index index \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRecordList().size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: filtered record list, delete index within bounds of finance tracker but out of bounds of record list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        showRecordsWithName(KEYWORD_MATCHING_DONUT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        int invalidIndex \u003d getModel().getFinanceTracker().getRecordList().size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* --------------------- Performing delete operation while a record card is selected ------------------------ *//*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: delete the selected record -\u003e record list panel selects the record before the deleted record *//*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showAllRecords();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectRecord(selectedIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deletedRecord \u003d removeRecord(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_RECORD_SUCCESS, deletedRecord);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* --------------------------------- Performing invalid delete operation ------------------------------------ *//*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (0) -\u003e rejected *//*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (-1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (size + 1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                getModel().getFinanceTracker().getRecordList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid arguments (alphabets) -\u003e rejected *//*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid arguments (extra argument) -\u003e rejected *//*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Removes the {@code Record} at the specified {@code index} in {@code model}\u0027s finance tracker."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @return the removed record"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private Record removeRecord(Model model, Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record targetRecord \u003d getRecord(model, index);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.deleteRecord(targetRecord);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return targetRecord;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Deletes the record at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record deletedRecord \u003d removeRecord(expectedModel, toDelete);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_RECORD_SUCCESS, deletedRecord);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 3,
      "Jackimaru96": 66,
      "-": 123,
      "eugeneyl": 24,
      "kjiaxuan": 28
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_CATEGORY_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.model.Model.PREDICATE_SHOW_ALL_RECORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class EditCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- *//*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "/* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Index index \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_BOB + \" \" + DATE_DESC_BOB + \" \" + CATEGORY_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Record editedRecord \u003d new RecordBuilder(BOB).withCategory(VALID_CATEGORY_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, index, editedRecord);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: undo editing the last record in the list -\u003e last record restored *//*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: redo editing the last record in the list -\u003e last record edited again *//*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.setRecord(getModel().getFilteredRecordList().get(INDEX_FIRST_RECORD.getZeroBased()), editedRecord);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: edit a record with new values same as existing values -\u003e edited *//*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + AMOUNT_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + DATE_DESC_BOB + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: edit a record with new values same as another record\u0027s values but with different name -\u003e edited *//*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(getModel().getFinanceTracker().getRecordList().contains(BOB));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        index \u003d INDEX_SECOND_RECORD;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertNotEquals(getModel().getFilteredRecordList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_BOB + DATE_DESC_BOB + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        editedRecord \u003d new RecordBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, index, editedRecord);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: clear categories -\u003e cleared *//*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        index \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_CATEGORY.getPrefix();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record recordToEdit \u003d getModel().getFilteredRecordList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        editedRecord \u003d new RecordBuilder(recordToEdit).withCategory().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(command, index, editedRecord);*//*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ------------------ Performing edit operation while a filtered list is being shown ------------------------ *//*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: filtered record list, edit index within bounds of finance tracker and record list -\u003e edited *//*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        showRecordsWithName(KEYWORD_MATCHING_DONUT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        index \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRecordList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Record recordToEdit \u003d getModel().getFilteredRecordList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        editedRecord \u003d new RecordBuilder(recordToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, index, editedRecord);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: filtered record list, edit index within bounds of finance tracker but out of bounds of record list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        showRecordsWithName(KEYWORD_MATCHING_DONUT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        int invalidIndex \u003d getModel().getFinanceTracker().getRecordList().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* --------------------- Performing edit operation while a record card is selected -------------------------- *//*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/* Case: selects first card in the record list, edit a record -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showAllRecords();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        index \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectRecord(index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_AMY + DATE_DESC_AMY + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        // browser\u0027s url is updated to reflect the new record\u0027s name"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* --------------------------------- Performing invalid edit operation -------------------------------------- *//*"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (0) -\u003e rejected *//*"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (-1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (size + 1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredRecordList().size() + 1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: missing index -\u003e rejected *//*"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: missing all fields -\u003e rejected *//*"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid name -\u003e rejected *//*"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid amount -\u003e rejected *//*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid date -\u003e rejected *//*"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid category -\u003e rejected *//*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: edit a record with new values same as another record\u0027s values -\u003e rejected *//*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        executeCommand(RecordUtil.getSpendCommand(BOB));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(getModel().getFinanceTracker().getRecordList().contains(BOB));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        index \u003d INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(getModel().getFilteredRecordList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_BOB + DATE_DESC_BOB + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: edit a record with new values same as another record\u0027s values but"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "                 with different categories -\u003e rejected *//*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_BOB + DATE_DESC_BOB + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: edit a record with new values same as another record\u0027s values but with different amount -\u003e rejected *//*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_AMY + DATE_DESC_BOB + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: edit a record with new values same as another record\u0027s values but with different date -\u003e rejected *//*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + AMOUNT_DESC_BOB + DATE_DESC_AMY + CATEGORY_DESC_FRIEND + CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Record, Index)} except that"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Record, Index)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Record editedRecord) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedRecord, null);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the record at index {@code toEdit} being"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * updated to values specified {@code editedRecord}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Record editedRecord,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.setRecord(expectedModel.getFilteredRecordList().get(toEdit.getZeroBased()), editedRecord);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORD);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 20,
      "JeremyLoye": 9,
      "Jackimaru96": 100,
      "-": 129,
      "eugeneyl": 39,
      "kjiaxuan": 45
    }
  },
  {
    "path": "src/test/java/systemtests/FinanceTrackerSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import guitests.guihandles.RecordListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.TestApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.TypicalRecords;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.BrowserPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.CommandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": " * A system test class for FinanceTracker, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public abstract class FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    protected FinanceTracker getInitialData() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return TypicalRecords.getTypicalFinanceTracker();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public RecordListPanelHandle getRecordListPanel() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        return mainWindowHandle.getRecordListPanel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Displays all records in the finance record."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    protected void showAllRecords() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(getModel().getFinanceTracker().getRecordList().size(), getModel().getFilteredRecordList().size());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Displays all records with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    protected void showRecordsWithName(String keyword) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        executeCommand(SearchCommand.COMMAND_WORD + \" -name \" + keyword);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertTrue(getModel().getFilteredRecordList().size() \u003c getModel().getFinanceTracker().getRecordList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Selects the record at {@code index} of the displayed list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    protected void selectRecord(Index index) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(index.getZeroBased(), getRecordListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * Deletes all records in the finance record."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    protected void deleteAllRecords() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(0, getModel().getFinanceTracker().getRecordList().size());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same record objects as {@code expectedModel}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * and the record list panel displays the records in the model correctly."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertEquals(new FinanceTracker(expectedModel.getFinanceTracker()), testApp.readStorageFinanceTracker());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertListMatching(getRecordListPanel(), expectedModel.getFilteredRecordList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code RecordListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        getRecordListPanel().rememberSelectedRecordCard();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url is now displaying the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * default page."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(getRecordListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the record in the record list panel at"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @see RecordListPanelHandle#isSelectedRecordCardChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        getRecordListPanel().navigateToCard(getRecordListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String selectedCardName \u003d getRecordListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getRecordListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the record list panel remain unchanged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @see RecordListPanelHandle#isSelectedRecordCardChanged()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertFalse(getRecordListPanel().isSelectedRecordCardChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertListMatching(getRecordListPanel(), getModel().getFilteredRecordList());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 60,
      "-": 215,
      "eugeneyl": 29,
      "kjiaxuan": 24
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.BrowserPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class HelpCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        getRecordListPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertListMatching(getRecordListPanel(), getModel().getFilteredRecordList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 12,
      "-": 92,
      "eugeneyl": 4,
      "kjiaxuan": 8
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    private static final Predicate\u003cRecord\u003e PREDICATE_MATCHING_NO_RECORDS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cRecord\u003e toDisplay) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Optional\u003cPredicate\u003cRecord\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        model.updateFilteredRecordList(predicate.orElse(PREDICATE_MATCHING_NO_RECORDS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public static void setFilteredList(Model model, Record... toDisplay) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Record} equals to {@code other}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private static Predicate\u003cRecord\u003e getPredicateMatching(Record other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        return record -\u003e record.equals(other);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 15,
      "-": 21,
      "eugeneyl": 9,
      "kjiaxuan": 5
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.FinanceTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import seedu.finance.model.comparator.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.TestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SampleDataTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    protected FinanceTracker getInitialData() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public void financeTracker_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record[] expectedList \u003d SampleDataUtil.getSampleRecords();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertListMatching(getRecordListPanel(), expectedList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 12,
      "-": 38,
      "eugeneyl": 3,
      "kjiaxuan": 7
    }
  },
  {
    "path": "src/test/java/systemtests/SearchCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BANANA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.CAP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.DONUT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SearchCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: find multiple records in finance tracker, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "         * -\u003e 2 records found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String command \u003d \"   \" + SearchCommand.COMMAND_WORD + \" -name \" + KEYWORD_MATCHING_DONUT + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BANANA, DONUT); // Banana Donut and Chocolate Donut"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: repeat previous find command where record list is displaying the records we are finding"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "         * -\u003e 2 records found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name \" + KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find record where record list is not displaying the record we are finding -\u003e 1 record found *//*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Cap\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CAP);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find multiple records in finance tracker, 2 keywords -\u003e 2 records found *//*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Banana Donut\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BANANA, DONUT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find multiple records in finance tracker, 2 keywords in reversed order -\u003e 2 records found *//*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Donut Banana\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find multiple records in finance tracker, 2 keywords with 1 repeat -\u003e 2 records found *//*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Donut Banana Donut\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: find multiple records in finance tracker, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "         * -\u003e 2 records found"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Donut Banana NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: undo previous find command -\u003e rejected *//*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: redo previous find command -\u003e rejected *//*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find same records in finance tracker after deleting 1 of them -\u003e 1 record found *//*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(getModel().getFinanceTracker().getRecordList().contains(BANANA));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name \" + KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DONUT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find record in finance tracker, keyword is same as name but of different case -\u003e 1 record found *//*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" DoNuT\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find record in finance tracker, keyword is substring of name -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Don\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find record in finance tracker, name is substring of keyword -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Donuts\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find record not in finance tracker -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Milo\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find phone number of record in finance tracker -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/*command \u003d SearchCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertSelectedCardUnchanged();*//*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find finance of record in finance tracker -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/*command \u003d SearchCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertSelectedCardUnchanged();*//*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find email of record in finance tracker -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "/*command \u003d SearchCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertSelectedCardUnchanged();*//*"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find category of record in finance tracker -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        Category category \u003d DONUT.getCategory();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name \" + category.categoryName;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find while a record is selected -\u003e selected card deselected *//*"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        showAllRecords();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectRecord(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertFalse(getRecordListPanel().getHandleToSelectedCard().getName().equals(DONUT.getName().fullName));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name\" + \" Donut\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DONUT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: find record in empty finance tracker -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteAllRecords();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d SearchCommand.COMMAND_WORD + \" -name \" + KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DONUT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: mixed case command word -\u003e 0 records found *//*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d \"FiNd -name Donut\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * box displays {@code Messages#MESSAGE_RECORDS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                MESSAGE_RECORDS_LISTED_OVERVIEW, expectedModel.getFilteredRecordList().size());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 12,
      "JeremyLoye": 3,
      "Jackimaru96": 83,
      "-": 107,
      "eugeneyl": 18,
      "kjiaxuan": 24
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.SelectCommand.MESSAGE_SELECT_RECORD_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalIndexes.INDEX_FIRST_RECORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SelectCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ------------------------ Perform select operations on the shown unfiltered list -------------------------- *//*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "/* Case: select the first card in the record list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: select the last card in the record list -\u003e selected *//*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        Index recordCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + recordCount.getOneBased();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(command, recordCount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: undo previous selection -\u003e rejected *//*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: redo selecting last card in the list -\u003e rejected *//*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: select the middle card in the record list -\u003e selected *//*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: select the current selected card -\u003e selected *//*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: mixed case command word -\u003e selected *//*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        assertCommandSuccess(\"SeLeCt 1\", INDEX_FIRST_RECORD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ------------------------ Perform select operations on the shown filtered list ---------------------------- *//*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: filtered record list, select index within bounds of finance tracker but out of bounds of record list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        showRecordsWithName(KEYWORD_MATCHING_DONUT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "        int invalidIndex \u003d getModel().getFinanceTracker().getRecordList().size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: filtered record list, select index within bounds of finance tracker and record list -\u003e selected *//*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredRecordList().size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ----------------------------------- Perform invalid select operations ------------------------------------ *//*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (0) -\u003e rejected *//*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (-1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid index (size + 1) -\u003e rejected *//*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredRecordList().size() + 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid arguments (alphabets) -\u003e rejected *//*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid arguments (extra argument) -\u003e rejected *//*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: select from empty finance tracker -\u003e rejected *//*"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteAllRecords();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECORD.getOneBased(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "                MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected record.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 4. {@code Storage} and {@code RecordListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "                MESSAGE_SELECT_RECORD_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getRecordListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 4. {@code Storage} and {@code RecordListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 2,
      "Jackimaru96": 56,
      "-": 99,
      "eugeneyl": 12,
      "kjiaxuan": 27
    }
  },
  {
    "path": "src/test/java/systemtests/SpendCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.CATEGORY_DESC_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_AMOUNT_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.APPLE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.CAP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.HAMBURGER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.IPHONE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "import static seedu.finance.testutil.TypicalRecords.KEYWORD_MATCHING_DONUT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.Messages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.SpendCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.category.Category;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Amount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.record.Record;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.testutil.RecordUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "public class SpendCommandSystemTest extends FinanceTrackerSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    public void spend() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- *//*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: add a record without categories to a non-empty finance tracker,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "         \u0026 command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        Record toSpend \u003d AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        String command \u003d \"   \" + SpendCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"   \" + AMOUNT_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "                + DATE_DESC_AMY + \"   \" + CATEGORY_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, toSpend);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: undo adding Amy to the list -\u003e Amy deleted *//*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: redo adding Amy to the list -\u003e Amy added again *//*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        model.addRecord(toSpend);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add a record with all fields same as another record in the finance tracker except name -\u003e added *//*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        toSpend \u003d new RecordBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + NAME_DESC_BOB + AMOUNT_DESC_AMY + DATE_DESC_AMY + CATEGORY_DESC_FRIEND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, toSpend);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "/* Case: add a record with all fields same as another record in the finance tracker except amount and date"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "         *//*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        toSpend \u003d new RecordBuilder(AMY).withAmount(\"999\").withDate(\"01/01/2001\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        command \u003d RecordUtil.getSpendCommand(toSpend);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, toSpend);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add to empty finance tracker -\u003e added *//*"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        deleteAllRecords();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandSuccess(APPLE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add a record with categories, command with parameters in random order -\u003e added *//*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        toSpend \u003d BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + CATEGORY_DESC_FRIEND + NAME_DESC_BOB + CATEGORY_DESC_HUSBAND"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "                + DATE_DESC_BOB + AMOUNT_DESC_BOB;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandSuccess(command, toSpend);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add a record, missing categories -\u003e added *//*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandSuccess(HAMBURGER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* -------------------------- Perform add operation on the shown filtered list ------------------------------ *//*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: filters the record list before adding -\u003e added *//*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        showRecordsWithName(KEYWORD_MATCHING_DONUT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandSuccess(IPHONE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ------------------------ Perform add operation while a record card is selected --------------------------- *//*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: selects first card in the record list, add a record -\u003e added, card selection remains unchanged *//*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        selectRecord(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandSuccess(CAP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* ----------------------------------- Perform invalid add operations --------------------------------------- *//*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add a duplicate record -\u003e rejected *//*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        command \u003d RecordUtil.getSpendCommand(HAMBURGER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, SpendCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add a duplicate record except with different amount -\u003e rejected *//*"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        toSpend \u003d new RecordBuilder(HAMBURGER).withAmount(VALID_AMOUNT_BOB).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        command \u003d RecordUtil.getSpendCommand(toSpend);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, SpendCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add a duplicate record except with different date -\u003e rejected *//*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        toSpend \u003d new RecordBuilder(HAMBURGER).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        command \u003d RecordUtil.getSpendCommand(toSpend);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, SpendCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: add a duplicate record except with different categories -\u003e rejected *//*"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        command \u003d RecordUtil.getSpendCommand(HAMBURGER) + \" \" + PREFIX_CATEGORY.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, SpendCommand.MESSAGE_DUPLICATE_RECORD);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: missing name -\u003e rejected *//*"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + AMOUNT_DESC_AMY + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SpendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: missing amount -\u003e rejected *//*"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + NAME_DESC_AMY + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SpendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: missing date -\u003e rejected *//*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + NAME_DESC_AMY + AMOUNT_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, SpendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid keyword -\u003e rejected *//*"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        command \u003d \"adds \" + RecordUtil.getRecordDetails(toSpend);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid name -\u003e rejected *//*"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + INVALID_NAME_DESC + AMOUNT_DESC_AMY + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid amount -\u003e rejected *//*"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_AMOUNT_DESC + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertCommandFailure(command, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid date -\u003e rejected *//*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + NAME_DESC_AMY + AMOUNT_DESC_AMY + INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": "        assertCommandFailure(command, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremyLoye"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/* Case: invalid category -\u003e rejected *//*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        command \u003d SpendCommand.COMMAND_WORD + NAME_DESC_AMY + AMOUNT_DESC_AMY + DATE_DESC_AMY + INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "geezlouisee"
        },
        "content": "        assertCommandFailure(command, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 4. {@code Storage} and {@code RecordListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void assertCommandSuccess(Record toAdd) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "        assertCommandSuccess(RecordUtil.getSpendCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Record)}. Executes {@code command}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @see SpendCommandSystemTest#assertCommandSuccess(Record)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "    private void assertCommandSuccess(String command, Record toAdd) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        expectedModel.addRecord(toAdd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "        String expectedResultMessage \u003d String.format(SpendCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Record)} except asserts that"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 2. {@code Storage} and {@code RecordListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "     * @see SpendCommandSystemTest#assertCommandSuccess(String, Record)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * 4. {@code Storage} and {@code RecordListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * {@code FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "     * @see FinanceTrackerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "geezlouisee": 19,
      "JeremyLoye": 16,
      "Jackimaru96": 97,
      "-": 89,
      "eugeneyl": 26,
      "kjiaxuan": 45
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "// TODO: Failed Test; need to update"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugeneyl"
        },
        "content": "import java.comparator.function.Supplier;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.TestApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "import seedu.finance.model.ReadOnlyFinanceTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": " *//*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyFinanceTracker\u003e financeTracker, Path saveFileLocation) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(financeTracker, saveFileLocation));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "    */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 18,
      "-": 63,
      "eugeneyl": 2,
      "kjiaxuan": 4
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003c?import seedu.finance.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "kjiaxuan": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jackimaru96"
        },
        "content": "\u003c?import seedu.finance.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kjiaxuan"
        },
        "content": "\u003cfx:root type\u003d\"seedu.finance.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jackimaru96": 1,
      "-": 5,
      "kjiaxuan": 1
    }
  }
]
